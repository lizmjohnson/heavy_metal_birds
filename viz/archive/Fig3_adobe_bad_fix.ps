%!PS-Adobe-3.1
%ADO_DSC_Encoding: UTF8
%%Title: Fig3_adobe_bad_fix.pdf
%%Creator: (Adobe Acrobat 18.11.0)
%%For: tgagne
%%CreationDate: 7/31/18, 8:47 AM
%%BoundingBox: 0 0 612 792
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 35191 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfxid="http://www.npes.org/pdfx/ns/id/"
    xmlns:pdfaExtension="http://www.aiim.org/pdfa/ns/extension/"
    xmlns:pdfaSchema="http://www.aiim.org/pdfa/ns/schema#"
    xmlns:pdfaProperty="http://www.aiim.org/pdfa/ns/property#"
   xmp:ModifyDate="2018-07-31T08:47:13-07:00"
   xmp:CreateDate="2018-07-31T15:39:32Z"
   xmp:MetadataDate="2018-07-31T08:47:13-07:00"
   xmp:CreatorTool="Adobe Illustrator CC 2017 (Macintosh)"
   xmpMM:InstanceID="uuid:8bd35a09-a915-9443-9aaa-74eaf0903fbb"
   xmpMM:DocumentID="xmp.did:b7f3e520-1ffc-4a62-b006-2548c71c57bb"
   xmpMM:RenditionClass="proof:pdf"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:VersionID="1"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:HasVisibleOverprint="False"
   dc:format="application/pdf"
   illustrator:StartupProfile="Print"
   pdf:Producer="Mac OS X 10.12.4 Quartz PDFContext"
   pdf:Trapped="False"
   pdfxid:GTS_PDFXVersion="PDF/X-4">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADEAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9CDy/wCZv+VgHXjrjHy9&#xA;9Q+qLoAjIT1+Yb1i3IqW/wArjWm3TFUQnn3yO6c18w6bwpWpu4Bsab7v/lD7xirR8/eRQyqfMWmc&#xA;mjaZVF5ASY0+04o+6jxxVOrW5guraK5t3ElvOiywyL0ZHHJWHzBxVUxVLdT8y+XdKuYrbU9TtbG4&#xA;mRpIo7mZIiyp9ojmR/mD4HFUEfzA8hhwn+I9MLmNpgovICTHH9pwA/Qd8VTu1uYLq2iubdxJbzos&#xA;sMi9GRxyVh8wcVVMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirGE/LD8ukZGXy3pwa&#xA;OnAi3jqCCCO3am2KrG/Kn8tWdXPlnTuSJJGhFvGOKy8vUCgDblzNaYqyeCCG3gjt4EWKCFVjijQU&#xA;VUUUVQB0AAxVfirBvzA/L3UfM2p2d5a3OnRJaW88ax3+nR3rid0b6vMkjsOPpS8W48T0PjirBm/I&#xA;XzKKy3Oq+XlSGJ+HHQoURS6sZAQ0jBVdnPNhQ8ajbYqqnsujfm6dPhtNB83WpeIRIkkGlRC1SOKH&#xA;0yEZ24EGTchGYqBQDrirOdE0zzQulwQa9qyXN4vL15rOFYOfJyQKnlQBCB8KqffFUu0y80R9MswL&#xA;q8vr5oYjNFbXV1M/qOo5cuMnFDWpPIjKjmiNhufJyI6WZFkcI7zsrva6rQTpYXAt1q0kLajc/WGX&#xA;twUOUDeKlvpyPHPnw7e/dkMWLlxb+7b9f2I7T7bSL+D1rae6YKSksZu7oPG67MkimSqsO4OWQmJC&#xA;w05cUoGj/b7kRpKmOXUIA7vHDchYvUd5GCm3icjk5ZvtMT1ybWmGKuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxVLtc8xaLoVvFcatdraQzSCGJmDHlIwJCgKCeinFXktx+XPmjUZLK70TXIdM0u/tkNvDcWbyO&#xA;ky26KV/eMpozo8i1FDU9qZUYi+vzLcCSCdtvJnPl/wAvWWmSWml6lbW93dLbRxTXbIGE8iqaTBZO&#xA;XAt6cnMCv7PjgjIiVFE4DhEhy/SyM6DoI66dajt/cx9/oy5qQ1zpemWuoaXJbWkMEhuXUvHGiNQ2&#xA;021VAxVhJSPzB5puJfMugPp831G1S2gnh+vclSW4YkPbHmh+P7Ne2+VzjfVthIgEgfZavdaNo2lv&#xA;ayW+mQtbC7tS0h02aOWACdDySV42cg0oeTk77eGRAlE8/SyMhMcvV5fq/sehW89pcx+rbuksdack&#xA;IYVHUbd8uaF7KvE7DpiqUaVc3cejaXHb2pnJtIWZy6og/dqKVNTX6MiSegSiWvNYVS36OVqCvFZ1&#xA;5GnYVVRX6cHFLuVK9SuliuDqNuk1lfIqiRZ04W9xGpNI5ZByjVhUhGLChPhlMzR4hsfsLkYsgrgn&#xA;9P8AufMfpCL8tajb6iuoXtvURS3IoGpUFbeFWB4ll2II2JGXQmJCw05IcEq5pzk2DsVdirsVdirs&#xA;VdirsVdirsVdirsVSvzHrdto9nFcXFnc3ySzpCsVpF68gZ6kOUqPhFNyMVYto+rRnRrSF4ZrDlBC&#xA;UDK5ichRwkVSgkjfmK8lQr3PLKDwk0DUu47X7un45MoiUTxAWB8R8eoRt/rLTxwXJ4Ga3YgTxMGj&#xA;ZSwpWhb4RKsZYgsAoIPEmmQymQIsUR+P1ORh4cgMYnc9D3juPXa0z1DV45oYZ7ZPWhCicEHoFoTI&#xA;adRHyFR7n+XI5Z8W45Df4/s/HJhD08+v3I7USDd6URuDdNQ/9Gs+ZjQwuy1O+i1u6ivtUXW1lhtz&#xA;Bd2EMdYJEeUqPTjZ2cipLAb8T3yEqJqxf4+DKMzA3VjqymDVtI1zTprSSeMSTKYJYw24Zh+xyoaj&#xA;r0qO4BwSFjhlsziN+KHqj+OfcpW81pcaWL+6Ho6jCGgupYm9OT1oaqwZl6rVeXFgRTtkBlqFnn+l&#xA;Tj9VdP0Kwv7+20w30jJfWiRGWRkpHMqqCWp/uuT/AITp3yzHLiiCwlGjTtKudQttLs7aXSrn1YII&#xA;43o9qRyRApp++9smxRX6SvP+rVdf8Fa/9V8Vd+krz/q1XX/BWv8A1XxVD+XLGS1/SRaBrZLm9e4i&#xA;icoWpJHHy/u2dfthu+RhGmc5Xv5JvkmDsVdirsVdirsVdirsVdirsVdirsVQmralHpthJeyQzXCx&#xA;lAYbZDLKebhPhQbmnKp9sVYrpnmzy3JomnrPN6VxFbpFNbTxOwIVQCrFBIvVQwIr+vITiJDddwbH&#xA;NLr+fyheF1F2LXmN5Y1uGoAKBfsISPbb3J6ZSMJAoH09x3H2/oo+bbLLxUSBff1/t99jySpdXk0y&#xA;SX9H3wuYJhweN0JJQ1JryjRX+0aGgwDGeg4fduPto/jkyGTh2I8Qee0v1J/5d83Nqd9pGmSWkkcl&#xA;u7H6wWVgypbSrVhWtdx45fjiQAC0GVnkoR3nkm08watZtpx0orHFH9Ya14CSRJJQzpxBZ0b4dyOL&#xA;UxyYxIUWQkRyKy+v/K8xDi5pNx4LNEJlYD+UsY1PD/IWg+eUDFOO0Tt3fj9FMzkEjco+rvGx+ex+&#xA;dpS2omxuvWtdQS6FQ/BY2iTmpBUuhQRt9noEU7D4sfC3sij5cvkf1svGlW/rHcdpf6Yc/wAbJhbe&#xA;eq6Xe6ZNZuRcpMttJFwVVMykBeDOaKGYn7R2y7HAxsGq/H45tU5gnYH41+PsemZYxdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdiqR65p/my5v7aTSNXh0+yTj9ahktlnZ6NU8WJXjVTT+mKsSH5a6&#xA;rq1tBqUfnHWdLku7O3R7bT5Eit04QqsfpxusjL4t8XxEk7bUUsg8oeRpvLuo6jeya/qWr/pAgmG/&#xA;lWRIyp2KUUGvGi1PYfcoZFfEi2akSTVIHpSGitUgUJo36sjM0GUbvZJLS5E11bhVZEi1SZFjenJT&#xA;9UlZwaEj7bN0OQxHn72eQ3R8v2fclfkKPQ49W1RdKstQsV9KAyRX31ijNykq6mVpFNRShrXrlrWz&#xA;bFDjWm3XtirGb7UHa21O0MXoI2mSTxxLQoPt8nUgKfj5jqAdumUY52fIhtly35g/j5V9rJsvanYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqw7z3pvkQXWnar5onkt3jlSGydZZ0QyKTIqkQ/TucV&#xA;Tzymbc+WtMNu7PF9Xjozs7tXj8W7kts1f4bYqmuKofULaS5s5YYnMcrD929SAGG4rTt4+2QyQ4ok&#xA;KDW4Y1Zzxv5igYfB9bljuFh/lYW1zHKPmHXfKsMrN94DK9q7j+PuXeUZtQfWNR+t61a6v+5tzG9s&#xA;iKUXnLxUmNipp1Pw98yGLK8VcQCCD0PXFWF6wGtRLCT8UVveWryMas8MkDzwbnuCpU+498xMe0q7&#xA;iR89wyvv7maZlsXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgtZmuILB57aw/SVxGyGK0DIh&#xA;YlgpIZ/hHFWJxVjnl/zeU0mxtptJvvrUduiskEfqqQiqAytVCQQVPTviqZ/4s/7U2qf9I3/N2KrW&#xA;83Kiln0jU1UdSbag/wCJYCQOaQLSCwuNRvPOdheG1mjs5HmBlmiMI5eg4AUfGGPw0+1kIwHFxA8/&#xA;xzUgjpSG8ta/pFh5n1ux0vy68EFqVt3OnxrIXeGWVWdlQLx5VHVq7ZYrKv8AFn/am1T/AKRv+bsU&#xA;O/xZ/wBqbVP+kb/m7FWGeZPM6+YJFi0iCe4eJAxiWLkyJJUFmMRmPFqddhlc8YkQb5J+DPofMGnT&#xA;RJLEty8bgMji0uqFSKgj910OWIX/AKas/wDfd1/0iXX/AFTxVbLr+nwxPLKtykcal3c2l1QKoqSf&#xA;3eKpjirsVdirsVdirsVdirsVdirsVdirsVdirHPPM2mx6fZpf6zcaGst5EsVzallkkkoxEJKhvhb&#xA;vUU2xVilv+TPkDzHHY+YtTt7q41We1hSS5aaa2ZlWEQ8TEnpKF4Lx+z8Q8a7qpxov5PeSNG1W11P&#xA;T4J0uLR0liV7iWWPlHA1utUkLD7L8jT9qh7DFWbYqkZ+DVIYeipqLMi+0ljI5P0uWyuHMjzbsu4i&#xA;fL7if0U1pP6WHmbV1vILaO29O3NpJA7F2jLS0MqsoHMnlWjeHzyxpT3FXYqx+0tbLSNeNpbxelBf&#xA;WiiJmdn+O2dz6a8i1BxlJp0yAoGqbCCY8Xw/V+lMdA/44Om/8wsP/Jtcm1o/FUm1+4nn0TUxbKvp&#xA;LbzK07HuEblwWh5U+fXKPElL6eXf+pt4BH6ufcnOXtTsVdirsVdirsVdirsVdirsVdirsVdiqS+a&#xA;7fUZbO3ex1K30sw3CPLc3USTJxIKKqhyoVi7LQ19sVVfKkvq+WtMf1o7ittGPVhFENFAoPifdaUO&#xA;/Xw6YqmuKoPWLySz0+W4jpzShFSAOo8f8/DIZJULZQqxfJJFvxP5ktEkUR3Hq8HjB5bwQ3NWr3DL&#xA;Mh/DqMSAJ7ciPu5s+eP3S++q+5vQZbB/N2urDfz3lzGsCzxTFuEB5SH0o14onFQVINCd+pybUybF&#xA;WmNFJ8BX/OuKsQ1LW0uLe1vynC6sxJOpFKSQqrs/ChbiXaARsN+PLetcq5iMvh+Pk3xMSJRHKgR+&#xA;PKynGgTXM2iaaIFEcYtIT6sg5BqxinEKy/OpwGUyaG3v/tYVEDff3I8WRfk1xK7u38jPEgHgFVv1&#xA;4+Df1En5j7LT4lch9x/Qoa4ip5f1BEAVVtJgqjoAIzloAAoNZNlMMKHYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FUu8w2l1d6TLBa21td3BeJo4L2voEpKr1fiCfh48h7gYqhdGudWtdKtLa60mYXEESRSel&#xA;LbuhKDjVWaSM7gV3XFUZ+krz/q1XX/BWv/VfFWpL65kRkk0i5dGFGVjakEHsQZsBFqkNn5Zkj8yW&#xA;GpW0N1bRQeotxHcNA6GMwukaqY5Hf4GIpUdO+QhiETt+Px+gJBNVe34/HxRlk3mO213Up7vTI5bO&#xA;cItnNZSJzKRvIV9ZJmi+Mh9yDTLEJn+krz/q1XX/AAVr/wBV8Vd+krz/AKtV1/wVr/1XxVjfmDyy&#xA;+qerLaWV3Y3kpB58rb0STTl6irKWowG9PnQnK/CF33qLBsMkXy9oCqFXTLQKBQAQRgAD/Y5Yrv0B&#xA;oX/Vttf+RMf/ADTirTeXtAZSraZaMrCjKYIyCD2Pw4qmGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;qMV7Zy3M1rFPHJc23A3ECupeP1ASnNQaryA2r1xVWxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KsVi/L3TYvzCm87x3l0t9cWwtZrMMot2VVCgsAodqBQaFiK74qjov&#xA;O3lmUqIrsuXClAsMxJ57LQcO/bIeJHvDb4M+4/JEy+ZNKiEjSmeMRKGlLW1wAqmtC1Y9htkjIDm1&#xA;xiSaHNUGt2RAIjuiD0P1S6/6p4ULo9ZsZLiK3/fRyzkrEJYJ4gzKpcgNIirXipPXG00tvdd0yzuv&#xA;qtxI4nCLKUSKWSiOWVTVFYblDgMgOaREnkGhrtiQCEuSG+yfqlzvtXb93htjTf6as/8Afd1/0iXX&#xA;/VPFVsvmDTYY2lmFxFEgq8j2tyqgeJYxgDATSQLTHCh2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KpbrsnmJIrb9BxW0srTqt19bZ1VYCDzZeG/KtKYq861D8qvKXmi0s7zUIp18wXFtbxSPaXM0K&#xA;FYo42R3UNTiECA7delDvkDLp1SCnvlX8rPKPkm4huNKgkkabhb3Et1K85B39ORQ5IRjIafCP2vbB&#xA;KIsEshMjkymxP1G4GmttAwL2DHpwH2ofnH+z/k/6pwQ9J4enT9X46NuT1jj69f1/H7/eg9YJbzHo&#xA;IB2inlLj3ltZ+P8AyabIS3yDy/T/AGIjtjPn+j+1DW0c9t5i1OTWLmC5t3hie1rAFMUfqzlIi/I8&#xA;iFr+zU5dKurSJkclSXy968L3UfqWjj95a2ETcEUj4hUD+7dz9oxletPEmnwb3G3l+P0NvjE89z3n&#xA;8b/G0VbC104w3Fqoj0q9CckAoscjgcJKdhJUK3+VQ92OEVDcfSWZkco33mPtHd8Onl8FDz0x/wAM&#xA;3cQ29VSK+yKZfx9OmDUn0gd8h+v9CNMPUT3A/q/Sk19qPmVJ5AmpyQ/EeEZhtGUj1CPhZirUC06g&#xA;75qsmoygn118I97s8eHCQPQD8ZdylNqPmgWsskOryGVaemjwWYQmu6lwx7b9MhLU5eEkT390fvZR&#xA;w4OIAwFe+aW/pv8AML/lvi/6df8AmnMf85qf5w/2Lk/ltJ/NP+yZt5SudVuNIEmqSrNdeowLrwpx&#xA;FKf3YC5u9BknPHczZv8AHJ0uuhCOSoCo1+Oac5muG7FXYq7FXYq7FXYq7FXYq7FXYq7FUi846d5d&#xA;vNMik193jsbSeOQOjyR0kc+igJi+IgtLTFUh8na3pcENqtrdpPFPbxqzyzFnDRL9jlIarxYsFr8J&#xA;24nrmPImEr5g+bdwAi/n+v3ebKLnULG7t3gBekq0DqhJUkVVlA3anUFa5I5YkU1cJ7tksvtbhvbD&#xA;0WHoXxIFsA3GVLofAOKtTpJVT8VaV2plcsokK5H9LfgEoniq4dfd1QUV5c3fmfTXuFEEkVw8P1Us&#xA;Gb93ZS8pPErzdgh9zX2jiJlMk+5llnAREY7k7/j7L+xLbi78sWvm/VXsrz/T4mgmvLOSWQqbkM9S&#xA;scp4EqvGgTsTx3FMvyg1YPJphEHbr0/V8WaprdoVBLB2NKGIh0NRUUfZRt2ahyIzjrsgx323QH6V&#xA;tIFuLGdALZizf6RWJTFNvxoy7/EXXwoOuDxYjY8kwjMm4jcMb127updGFpOzekIZJ47idw7zRSuv&#xA;oBSD9vjUN7A+O1BsyiDyG/2inLllhESPKR2rzr1fsQt7q3mET3CxT2kaepJ+5ki1Go4O1ATG7IT0&#xA;II269O+LKJs/8edpjw4qFiXIb3Du8xakdX80S23Ga6sPSYkGFotTZuKkgbcioJ47CvfAYyMaJ2/z&#xA;2Xg4RLYTv342Of4i83/9WG3/AOAuP+q2Yvgj+b9/63YflsH+qH/Y/wDEvUPy9u7+68urLfWy2k/q&#xA;yAwoHAoKUPxs53+ebjQxrHVVu832pCMc1RPEKH46MlzMdc7FXYq7FXYq7FXYq7FXYq7FXYq7FUi1&#xA;/wA12ekXltZz6ffXjXLR8HtLYzxoWcgFyD8PFlr92KvPIvP3lCS2tdIvbKzW8gt0rHJeJazAKqj1&#xA;OLLHIletfDKxKI3DLwN+W/NN4NGubsO1vpsl1wND/uQtJgp7Bvgr+ORjjwnlEfM/rZyOaOxlOP2L&#xA;pNK1q32fQrYBv9+3FWIr3pOop47YJ4sA5j7WAGSXU/b+tHaFYXUWq6dNcaZFagTyok8M0bRgiCYG&#xA;NY4+TcuvJnYnalR0y6IgBUAAPx1Y8BB35oaDzLBrOqXctv5cnlie2txKNQT6kwo8p6yKVIbn/NvQ&#xA;9sjKURudk+HxdLcfL95Mxe30SaOEnaKPUIHjHjQOkn3VwcGOe/CD+PIpBnDYSlFaNA16IgxaDGQv&#xA;2TLcKSN/+KpIV/DHwMX837SiU5nnIn33+tbPo+rLZXL3WhwwwekzerDMihSEP71zylkk4jfiGoe4&#xA;JycIY4fRHn8WBiSdyhL0TmSeSO0gkRZZWq01iJv3cpPxLJB6h+xUVrtmBK+77v1Ozjr5Acvtl+tD&#xA;GeZRHbSW0aiU80cSWT0MjhSZHW3Yp/eftZCUiOn3fqY5O0jH1cP+yl+tR1DRBc3HOSCMssYNYLyz&#xA;iSi+yQovL6K5CRN8h8wsO3ssBQjH/TE/ezzyBAlvoJhRGjEc8qkNIsu4IqQ6KqkfLM7Sn0/Fxc2r&#xA;lqJcchR5MkzIanYq7FXYq7FXYq7FXYq7FXYq7FXYqw6382a75ht7PU/Jkdnd6NLO8FzNfetDIDbz&#xA;yQz8FA7GP4TTFUis/wAtPLWrvp99rOjWhurq1iP11wLqdpIolC0eVeK8oqUUqaBdqdcoMDdXTkcV&#xA;xuht9346890/v7Y6FfWt2IucEzfV7j0GflMD8SFoyxYuprSla134jMaUPDIsbeV/cz44yga+ob7/&#xA;AG7/AG+VL3v01FzDbXiaepAaRlb02QMPhBY8GkkbwB4qO5PE4eOJ2B4fs/tP47mIwzrilv3Ab/Py&#xA;+9CRXlr/AIk0K2sGRbdppDdW8R5JHNHZzIrK42YSJ/xEE7nJ45DiAjy/Sg5uOHq+v9H9v42Q8p83&#xA;DWbm61L0bW4gt4eDaaZJWaAvLyBEy+ktN2JbrQAU65ZnieYNfj5M9NOIuJHFf3/emN7Br9hCL24f&#xA;1IoSryKgEiiMbP6jlfXoK1+EtQV9sx5wlHeQv8fP72cZRybD0n8fD7Ai/wBLabfW5khmMdsorIXc&#xA;yTM3T044SW+Ll8NSOv2Qa1yfFCXX7b+z8eTjxjklyFDvqvt/SknmG61Cy0m8jmuBHcTooe0BAHoN&#xA;T4lCf7tHxCTs1fAAYBcfKyNvx172wZI/SdyOR7/x07q8yhrnzEI5blm0a+uoYjKzTxQFhwDsOZKX&#xA;I+GqHfiOh982Y0RP8UftdPLJV+kn8e9DSeYXhh4S6JqKFGEbO1uwbmF9Qg1u+pReXy3xGhJ/ih8y&#xA;x8Q/zT+PivfXpODytoOoxpEnryk28i8Y9zyYG8FFPE9sfyJ/nQ+ZT4h/mn8f5zK/Ier2mraF9ctR&#xA;IIWmkULKOJFKbU5y7f7LI5MBxHhLkaeYlGwyLIN7sVdirsVdirsVdirsVdirsVdirsVYdb+Sr/QN&#xA;Fi03yxrC6cjX8t5dTXNratzFwzO8YWCO2T7Z2NOVNq7DFVLTJdXbSbCPTLdp7i3ghkmluXiVeaoC&#xA;tPQDDkV+CmxKnfxyEgOh3939iITIlQ67G+X46oqaTU2tmW/sWikm2l1JnMiqoIYcFRC8VCKiqACl&#xA;SSd8Th4htz89j8EwPBKyfiN0ZY+W7KWxSP659YsiSyJAEEbAmrD1P3kpqetJMj4FbH8fpZmcTuB+&#xA;lD3OnWjeaNKltolhi06d4jwUAPLNaTMwPT+7TiR/rHLvDEQKG/6GkbyQdv8ApnTdYu01XUZNVvpo&#xA;LcWsNvapFE6FpvgZKkdQdzJsD7E5EjzTKVcuaIhu9TSAxappN08NuAkMKhJYqD7Jl4M7SGlKkKQP&#xA;CuQGInYkHy/t5pnIk8RFX+OilpXl2W7Y3DX1rMEAiURp9YChVABbmQvqhAFqyHb3qTV+WkPqcqWb&#xA;GfpFk8/f+geVrvMuh6bBo0tjBCGuZIpp3uWVfUWOBS7tUBQOTFY/hp9r2y6GngASR/a40pkkMgfy&#xA;/oLszvptqzuSXYwRkkk1NTx75d4su8sPDj3Bo+XfL566ZaeP9xH1/wCBw+LPvK+HHuDbeX9BY1bT&#xA;bUmlN4IztSlPs+GDxZd5Xw49wRVrZ2lpF6NpBHbxVJ9OJVRanqaKAMjKRPNkAByVcCXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYqlfmLyxo3mG0itNWhaeCGUTxosjx/GoIBPArXZj1xVil75qu/J9rDocWhy3&#xA;RtbVJEltBNLEeTmOp/dDfn8RXl0wLStd/mPqMGonT18v3Tzq0HKREuHiAm4N9oQDcCSh7g9jhShY&#xA;/Nc975j/AEdaaJdWF8biWGa/QTxwM0QarNJ9XMTglfhLq30dRMZDyO4YGAVPKPmi51rVLOxbTLqz&#xA;+qtcXdxc3MUgEkpDRkB+CRjkZiwoTtQYJSspAoK91p9j5Fa51bTdLe9jvPShkEZlluVbk7EKBHK3&#xA;pmq7AgA9silR/wCVnagmnw3knl28PryzxRwok7SfuCpqUWF/hZX2atDQ9MUoPV/PsgitpLjy3dtf&#xA;XFotxFcW8dyJIwxZQrMkQdPiWvHlSnfJRmQxMQV03mfUf05deXptMvJri9EdnJqTRySQxxTIOPxp&#xA;DEvwNPyYtTwPY4ZTvaqURp6RkEuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVJ/NWh6h&#xA;rWmraWGsXOiTLKspvbMIZeKg/B+8DLQk71BxVW8uaPPo+jW2nT6jc6tNAG9TUL1g88pZi1XKhV2r&#xA;QUHTFUyxV2KqF9by3NjcW8UzW0s0Txx3CfajZlIDr7qTUYqkPlDyhqWgy3kt/wCZNS19rkr6S37R&#xA;8IAvURrGibt3Jr0271VZLirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdiqT6r5lt9Pufq7IrvQGjTwQn4gTUCV022zDzawY5VX2gfeXMwaQ5I3+gn&#xA;7gULH5ztpOISFCWLBR9ata1UkUp6nem3bKh2gD0/2Uf1th7PI6/7GX6kq/5WtpH/ACx3H/Cf81Zj&#xA;fy1D+aXK/kTJ/OH2u/5WvpH/ACx3H/Cf81Y/y1D+aV/kTJ/OH2s3zdOldirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVYt5ke3+vOXt55vTRS7wLI3EUJoeMUo981erxcU7o/j/NLs&#xA;9JfDzA99f8UEqilsfUeNrG9Z0HJ1WGcsgYniSPq/gvfMaODvB+3/AIhyjxVfFH5j/ikgvPMmkWVy&#xA;9tdXghnjpzieGYMtQGFR6XgcxDimDRkPt/U52PTTmOKMbHvH61H/ABh5e/6uCf8AImb/AKpYPDl/&#xA;OH2/qZ/ksv8ANPzH63sedS8i7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8+&#xA;89aZYXGsiW5KIeCIGZLd6jc0/eyxNUeGYOoxxMrLuNDrRihV/bL9ALHI9M0kJxnkRI3QFgq2RBkq&#xA;exuBUccxxih1/R+ty5dox6S+2XL/AEqCv9LsAa2YtJ2JPIzCzj2+ieSuA4o9K+z9bdi7Tx/xTr3G&#xA;R/3oQf6Of/lm03/kZa/815Hwx5Nv8pYP9Ul/sv1Pfc3LyLsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirDPNUd82rEQTzwRsichGLsoTQnkfQBXsB45hZzLi2/T+hqnkIND9LGNUt&#xA;tZnt2WeOe9UMaQf6cQeDUVgHUL+2SMxZmdcr/wBM1HPMdPvSj9F3v/Vin/4G4yr1/wA372H5nJ/N&#xA;+936Lvf+rFP/AMDcY+v+b96/mcn8373uObxzXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FWB+cNca010QJ9WPwxtxuJ7eIlqMwNJlJ4/DStaV265dDScY4rPytxM06l0+xj0fmuX&#xA;1bmdbezjMIZpE+tWNKLWvAcTyoYu3t45Z/J39Ln/AEWgZeZ2+YVB5jujGwe3slER4AvdadVuKV+F&#xA;uBrt+1XrtWuR/k8fzj/pU+IfL5xSr/G8H6S/Rn1SP1ef1f1fVtvRrypX1fT40r+1XJ/yV6b4v9i1&#xA;fmBxcNfc/wD/2Q=="
      xmpGImg:width="196"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:renditionClass="proof:pdf"
    stRef:documentID="xmp.did:1b6690ed-28a8-c141-9479-b6a9cf6be651"
    stRef:instanceID="uuid:d1c078a0-2746-42b2-b0d1-25aedff8fb1e"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:softwareAgent="Adobe Illustrator CC 2017 (Macintosh)"
      stEvt:changed="/"
      stEvt:when="2018-07-27T16:02:57-07:00"
      stEvt:instanceID="xmp.iid:b7f3e520-1ffc-4a62-b006-2548c71c57bb"
      stEvt:action="saved"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="White"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="100.000000"
         xmpG:swatchName="Black"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="CMYK Red"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="CMYK Yellow"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="CMYK Green"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="CMYK Cyan"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="CMYK Blue"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="CMYK Magenta"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="90.000000"
         xmpG:mode="CMYK"
         xmpG:black="10.000000"
         xmpG:swatchName="C=15 M=100 Y=90 K=10"
         xmpG:cyan="15.000000"
         xmpG:magenta="100.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="85.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=0 M=90 Y=85 K=0"
         xmpG:cyan="0.000000"
         xmpG:magenta="90.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="95.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=0 M=80 Y=95 K=0"
         xmpG:cyan="0.000000"
         xmpG:magenta="80.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=0 M=50 Y=100 K=0"
         xmpG:cyan="0.000000"
         xmpG:magenta="50.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="85.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=0 M=35 Y=85 K=0"
         xmpG:cyan="0.000000"
         xmpG:magenta="35.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="90.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=5 M=0 Y=90 K=0"
         xmpG:cyan="5.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=20 M=0 Y=100 K=0"
         xmpG:cyan="20.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=50 M=0 Y=100 K=0"
         xmpG:cyan="50.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=75 M=0 Y=100 K=0"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="10.000000"
         xmpG:swatchName="C=85 M=10 Y=100 K=10"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="95.000000"
         xmpG:mode="CMYK"
         xmpG:black="30.000000"
         xmpG:swatchName="C=90 M=30 Y=95 K=30"
         xmpG:cyan="90.000000"
         xmpG:magenta="30.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="75.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=75 M=0 Y=75 K=0"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="45.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=80 M=10 Y=45 K=0"
         xmpG:cyan="80.000000"
         xmpG:magenta="10.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=70 M=15 Y=0 K=0"
         xmpG:cyan="70.000000"
         xmpG:magenta="15.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=85 M=50 Y=0 K=0"
         xmpG:cyan="85.000000"
         xmpG:magenta="50.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="5.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=100 M=95 Y=5 K=0"
         xmpG:cyan="100.000000"
         xmpG:magenta="95.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="25.000000"
         xmpG:mode="CMYK"
         xmpG:black="25.000000"
         xmpG:swatchName="C=100 M=100 Y=25 K=25"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=75 M=100 Y=0 K=0"
         xmpG:cyan="75.000000"
         xmpG:magenta="100.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=50 M=100 Y=0 K=0"
         xmpG:cyan="50.000000"
         xmpG:magenta="100.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="35.000000"
         xmpG:mode="CMYK"
         xmpG:black="10.000000"
         xmpG:swatchName="C=35 M=100 Y=35 K=10"
         xmpG:cyan="35.000000"
         xmpG:magenta="100.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="50.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=10 M=100 Y=50 K=0"
         xmpG:cyan="10.000000"
         xmpG:magenta="100.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="20.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=0 M=95 Y=20 K=0"
         xmpG:cyan="0.000000"
         xmpG:magenta="95.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="40.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=25 M=25 Y=40 K=0"
         xmpG:cyan="25.000000"
         xmpG:magenta="25.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="50.000000"
         xmpG:mode="CMYK"
         xmpG:black="5.000000"
         xmpG:swatchName="C=40 M=45 Y=50 K=5"
         xmpG:cyan="40.000000"
         xmpG:magenta="45.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="60.000000"
         xmpG:mode="CMYK"
         xmpG:black="25.000000"
         xmpG:swatchName="C=50 M=50 Y=60 K=25"
         xmpG:cyan="50.000000"
         xmpG:magenta="50.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="65.000000"
         xmpG:mode="CMYK"
         xmpG:black="40.000000"
         xmpG:swatchName="C=55 M=60 Y=65 K=40"
         xmpG:cyan="55.000000"
         xmpG:magenta="60.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="65.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=25 M=40 Y=65 K=0"
         xmpG:cyan="25.000000"
         xmpG:magenta="40.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="75.000000"
         xmpG:mode="CMYK"
         xmpG:black="10.000000"
         xmpG:swatchName="C=30 M=50 Y=75 K=10"
         xmpG:cyan="30.000000"
         xmpG:magenta="50.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="80.000000"
         xmpG:mode="CMYK"
         xmpG:black="25.000000"
         xmpG:swatchName="C=35 M=60 Y=80 K=25"
         xmpG:cyan="35.000000"
         xmpG:magenta="60.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="90.000000"
         xmpG:mode="CMYK"
         xmpG:black="35.000000"
         xmpG:swatchName="C=40 M=65 Y=90 K=35"
         xmpG:cyan="40.000000"
         xmpG:magenta="65.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="50.000000"
         xmpG:swatchName="C=40 M=70 Y=100 K=50"
         xmpG:cyan="40.000000"
         xmpG:magenta="70.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="80.000000"
         xmpG:mode="CMYK"
         xmpG:black="70.000000"
         xmpG:swatchName="C=50 M=70 Y=80 K=70"
         xmpG:cyan="50.000000"
         xmpG:magenta="70.000000"
         xmpG:type="PROCESS"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Grays"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="100.000000"
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="89.999400"
         xmpG:swatchName="C=0 M=0 Y=0 K=90"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="79.998800"
         xmpG:swatchName="C=0 M=0 Y=0 K=80"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="69.999700"
         xmpG:swatchName="C=0 M=0 Y=0 K=70"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="59.999100"
         xmpG:swatchName="C=0 M=0 Y=0 K=60"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="50.000000"
         xmpG:swatchName="C=0 M=0 Y=0 K=50"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="39.999400"
         xmpG:swatchName="C=0 M=0 Y=0 K=40"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="29.998800"
         xmpG:swatchName="C=0 M=0 Y=0 K=30"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="19.999700"
         xmpG:swatchName="C=0 M=0 Y=0 K=20"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="9.999100"
         xmpG:swatchName="C=0 M=0 Y=0 K=10"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="4.998800"
         xmpG:swatchName="C=0 M=0 Y=0 K=5"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:type="PROCESS"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Brights"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=0 M=100 Y=100 K=0"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=0 M=75 Y=100 K=0"
         xmpG:cyan="0.000000"
         xmpG:magenta="75.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="95.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=0 M=10 Y=95 K=0"
         xmpG:cyan="0.000000"
         xmpG:magenta="10.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="100.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=85 M=10 Y=100 K=0"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.000000"
         xmpG:mode="CMYK"
         xmpG:black="0.000000"
         xmpG:swatchName="C=100 M=90 Y=0 K=0"
         xmpG:cyan="100.000000"
         xmpG:magenta="90.000000"
         xmpG:type="PROCESS"/>
        <rdf:li
         xmpG:yellow="0.003100"
         xmpG:mode="CMYK"
         xmpG:black="0.003100"
         xmpG:swatchName="C=60 M=90 Y=0 K=0"
         xmpG:cyan="60.000000"
         xmpG:magenta="90.000000"
         xmpG:type="PROCESS"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:MaxPageSize
    stDim:w="8.500000"
    stDim:h="11.000000"
    stDim:unit="Inches"/>
   <xmpTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontType="Open Type"
      stFnt:fontFileName="Calibri.ttf"
      stFnt:fontName="Calibri"
      stFnt:fontFamily="Calibri"
      stFnt:versionString="Version 2.00"
      stFnt:fontFace="Regular"
      stFnt:composite="False"/>
     <rdf:li
      stFnt:fontType="Open Type"
      stFnt:fontFileName="Calibri Italic.ttf"
      stFnt:fontName="Calibri-Italic"
      stFnt:fontFamily="Calibri"
      stFnt:versionString="Version 2.00"
      stFnt:fontFace="Italic"
      stFnt:composite="False"/>
     <rdf:li
      stFnt:fontType="Open Type"
      stFnt:fontFileName="Calibri Bold.ttf"
      stFnt:fontName="Calibri-Bold"
      stFnt:fontFamily="Calibri"
      stFnt:versionString="Version 2.00"
      stFnt:fontFace="Bold"
      stFnt:composite="False"/>
     <rdf:li
      stFnt:fontType="TrueType"
      stFnt:fontFileName="Helvetica.dfont"
      stFnt:fontName="Helvetica"
      stFnt:fontFamily="Helvetica"
      stFnt:versionString="12.0d1e3"
      stFnt:fontFace="Regular"
      stFnt:composite="False"/>
    </rdf:Bag>
   </xmpTPg:Fonts>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Print</rdf:li>
    </rdf:Alt>
   </dc:title>
   <pdfaExtension:schemas>
    <rdf:Bag>
     <rdf:li>
      <rdf:Description
       pdfaSchema:namespaceURI="http://ns.adobe.com/pdf/1.3/"
       pdfaSchema:prefix="pdf"
       pdfaSchema:schema="Adobe PDF Schema">
      <pdfaSchema:property>
       <rdf:Seq>
        <rdf:li
         pdfaProperty:category="internal"
         pdfaProperty:description="A name object indicating whether the document has been modified to include trapping information"
         pdfaProperty:name="Trapped"
         pdfaProperty:valueType="Text"/>
       </rdf:Seq>
      </pdfaSchema:property>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       pdfaSchema:namespaceURI="http://ns.adobe.com/xap/1.0/mm/"
       pdfaSchema:prefix="xmpMM"
       pdfaSchema:schema="XMP Media Management Schema">
      <pdfaSchema:property>
       <rdf:Seq>
        <rdf:li
         pdfaProperty:category="internal"
         pdfaProperty:description="UUID based identifier for specific incarnation of a document"
         pdfaProperty:name="InstanceID"
         pdfaProperty:valueType="URI"/>
        <rdf:li
         pdfaProperty:category="internal"
         pdfaProperty:description="The common identifier for all versions and renditions of a document."
         pdfaProperty:name="OriginalDocumentID"
         pdfaProperty:valueType="URI"/>
       </rdf:Seq>
      </pdfaSchema:property>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       pdfaSchema:namespaceURI="http://www.npes.org/pdfx/ns/id/"
       pdfaSchema:prefix="pdfxid"
       pdfaSchema:schema="PDF/X ID Schema">
      <pdfaSchema:property>
       <rdf:Seq>
        <rdf:li
         pdfaProperty:category="internal"
         pdfaProperty:description="ID of PDF/X standard"
         pdfaProperty:name="GTS_PDFXVersion"
         pdfaProperty:valueType="Text"/>
       </rdf:Seq>
      </pdfaSchema:property>
      </rdf:Description>
     </rdf:li>
    </rdf:Bag>
   </pdfaExtension:schemas>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [612 792 ] >> setpagedevice
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
gsave
42.0001 649 mo
520 649 li
520 32 li
42.0001 32 li
42.0001 649 li
clp
1 lw
0 lc
1 lj
1 ml
[] 0 dsh
true sadj
123.32 172.349 mo
123.88 172.805 li
124.43 173.245 li
124.99 173.684 li
125.55 174.14 li
126.1 174.58 li
126.66 175.036 li
127.21 175.475 li
127.77 175.931 li
128.32 176.37 li
128.88 176.81 li
129.43 177.266 li
129.99 177.706 li
130.54 178.161 li
131.1 178.601 li
131.66 179.057 li
132.21 178.664 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .617 1 0 cmyk
@
115.55 143.538 mo
116.1 145.722 li
116.66 147.906 li
117.21 150.074 li
117.77 152.257 li
118.33 154.441 li
118.88 156.609 li
119.44 158.792 li
119.99 160.96 li
120.55 163.144 li
121.1 165.328 li
121.66 167.496 li
0 .32 .699 0 cmyk
@
123.32 130.515 mo
123.88 133.971 li
124.43 137.427 li
124.99 140.899 li
125.55 144.355 li
126.1 147.827 li
126.66 151.283 li
127.21 154.755 li
127.77 158.211 li
128.32 161.683 li
128.88 165.139 li
129.43 168.611 li
129.99 172.067 li
130.54 175.538 li
131.1 178.994 li
131.66 179.089 li
.023 .887 .902 0 cmyk
@
116.101 130.515 mo
116.661 130.515 li
117.211 130.515 li
117.771 130.515 li
118.331 130.515 li
118.881 130.515 li
119.441 130.515 li
0 .73 .508 0 cmyk
@
114.44 139.045 mo
114.99 139.375 li
115.55 139.689 li
116.1 140.003 li
116.66 140.317 li
117.21 140.631 li
117.77 140.946 li
118.33 141.26 li
118.88 141.574 li
119.44 141.888 li
119.99 142.203 li
120.55 142.517 li
121.1 142.831 li
121.66 143.145 li
122.21 143.46 li
122.77 145.674 li
123.32 147.889 li
123.88 150.105 li
124.43 152.319 li
124.99 154.535 li
125.55 156.734 li
126.1 158.949 li
126.66 161.164 li
127.21 163.379 li
127.77 165.594 li
128.32 167.809 li
128.88 170.024 li
129.43 172.239 li
129.99 174.439 li
130.54 176.654 li
131.1 178.869 li
131.66 179.12 li
132.21 179.105 li
.438 .273 .734 .039 cmyk
@
114.44 151.267 mo
114.99 152.178 li
115.55 153.105 li
116.1 154.016 li
116.66 154.943 li
117.21 155.854 li
117.77 156.781 li
118.33 157.692 li
118.88 158.619 li
119.44 159.53 li
119.99 160.457 li
120.55 161.368 li
121.1 162.295 li
121.66 163.206 li
122.21 164.133 li
122.77 165.044 li
123.32 165.971 li
123.88 166.882 li
124.43 167.809 li
124.99 168.72 li
125.55 169.647 li
126.1 170.558 li
126.66 171.485 li
127.21 172.396 li
127.77 173.323 li
128.32 174.25 li
128.88 175.161 li
129.43 176.088 li
129.99 176.999 li
130.54 177.926 li
131.1 178.837 li
.652 .027 .941 0 cmyk
@
123.32 141.181 mo
123.88 143.679 li
124.43 146.193 li
124.99 148.706 li
125.55 151.204 li
126.1 153.718 li
126.66 156.231 li
127.21 158.744 li
127.77 161.243 li
128.32 163.756 li
128.88 166.269 li
129.43 168.783 li
129.99 171.281 li
130.54 173.794 li
131.1 176.308 li
131.66 178.806 li
.469 .035 .531 0 cmyk
@
121.101 176.324 mo
121.661 176.449 li
122.211 176.56 li
122.771 176.685 li
123.321 176.811 li
123.881 176.921 li
124.431 177.047 li
124.991 177.172 li
125.551 177.298 li
126.101 177.408 li
126.661 177.533 li
127.211 177.659 li
127.771 177.769 li
128.321 177.895 li
128.881 178.021 li
129.431 178.146 li
129.991 178.256 li
130.541 178.382 li
131.101 178.508 li
131.661 178.617 li
132.211 178.743 li
.793 .41 .07 0 cmyk
@
.5 lw
1 lc
10 ml
63.34 181.555 mo
132.21 181.555 li
132.21 128.079 li
63.34 128.079 li
cp
.746 .676 .668 .898 cmyk
@
1 lw
0 lc
1 ml
63.3403 317.995 mo
63.8903 318.057 li
64.4503 318.136 li
65.0103 318.199 li
65.5603 318.262 li
66.1203 318.325 li
66.6703 318.388 li
67.2303 318.466 li
67.7803 318.529 li
68.3403 318.592 li
68.8903 318.655 li
69.4503 318.718 li
70.0003 318.796 li
70.5603 318.859 li
71.1203 318.922 li
71.6703 318.984 li
72.2303 319.047 li
72.7803 319.126 li
73.3403 319.189 li
73.8903 319.251 li
74.4503 319.314 li
75.0003 319.377 li
75.5603 319.456 li
76.1103 319.518 li
76.6703 319.581 li
77.2203 319.644 li
77.7803 319.707 li
78.3403 319.786 li
78.8903 319.849 li
79.4503 319.912 li
80.0003 319.974 li
80.5603 320.037 li
81.1103 320.116 li
81.6703 320.179 li
82.2203 320.241 li
82.7803 320.304 li
83.3303 320.367 li
83.8903 320.446 li
84.4503 320.508 li
85.0003 320.571 li
85.5603 320.634 li
86.1103 320.697 li
86.6703 320.775 li
87.2203 320.838 li
87.7803 320.901 li
88.3303 320.964 li
88.8903 321.027 li
89.4403 321.105 li
90.0003 321.168 li
90.5503 321.231 li
91.1103 321.294 li
91.6703 321.372 li
92.2203 321.435 li
92.7803 321.498 li
93.3303 321.561 li
93.8903 321.624 li
94.4403 321.702 li
95.0003 321.765 li
95.5503 321.828 li
96.1103 321.859 li
96.6603 321.907 li
97.2203 321.938 li
97.7703 321.969 li
98.3303 322.016 li
98.8903 322.048 li
99.4403 322.079 li
100 322.111 li
100.55 322.158 li
101.11 322.189 li
101.66 322.221 li
102.22 322.268 li
102.77 322.299 li
103.33 322.33 li
103.88 322.378 li
104.44 322.362 li
105 322.347 li
105.55 322.33 li
106.11 322.315 li
106.66 322.299 li
107.22 322.284 li
107.77 322.268 li
108.33 322.252 li
108.88 322.236 li
109.44 322.221 li
109.99 322.205 li
110.55 322.189 li
111.1 322.174 li
111.66 322.158 li
112.22 322.142 li
112.77 322.126 li
113.33 322.111 li
113.88 322.095 li
114.44 322.079 li
114.99 322.063 li
115.55 322.048 li
116.1 322.032 li
116.66 322.016 li
117.21 322.001 li
117.77 321.985 li
118.33 321.969 li
118.88 321.953 li
119.44 321.938 li
119.99 321.922 li
120.55 321.907 li
121.1 321.891 li
121.66 321.875 li
122.21 321.859 li
122.77 321.844 li
123.32 321.828 li
123.88 319.079 li
124.43 316.329 li
124.99 313.58 li
125.55 310.831 li
126.1 308.082 li
126.66 305.333 li
127.21 302.584 li
127.77 299.834 li
128.32 297.085 li
128.88 294.336 li
129.43 291.587 li
129.99 288.853 li
130.54 286.104 li
131.1 283.355 li
131.66 280.606 li
132.21 303.903 li
0 .617 1 0 cmyk
@
65.0107 304.595 mo
65.5607 304.925 li
66.1207 305.255 li
66.6707 305.6 li
67.2307 305.93 li
67.7807 306.26 li
68.3407 306.606 li
68.8907 306.936 li
69.4507 307.265 li
70.0007 307.595 li
70.5607 307.941 li
71.1207 308.271 li
71.6707 308.601 li
72.2307 308.947 li
72.7807 309.276 li
73.3407 309.606 li
73.8907 309.936 li
74.4507 310.282 li
75.0007 310.612 li
75.5607 310.942 li
76.1107 311.287 li
76.6707 311.617 li
77.2207 311.947 li
77.7807 312.277 li
78.3407 312.622 li
78.8907 312.952 li
79.4507 313.283 li
80.0007 313.628 li
80.5607 313.958 li
81.1107 314.288 li
81.6707 314.617 li
82.2207 314.963 li
82.7807 315.293 li
83.3307 315.623 li
83.8907 315.953 li
84.4507 316.299 li
85.0007 316.629 li
85.5607 316.958 li
86.1107 317.304 li
86.6707 317.634 li
87.2207 317.964 li
87.7807 318.294 li
88.3307 318.639 li
88.8907 318.969 li
89.4407 319.299 li
90.0007 319.645 li
90.5507 319.472 li
91.1107 319.299 li
91.6707 319.126 li
92.2207 318.953 li
92.7807 318.781 li
93.3307 318.608 li
93.8907 318.435 li
94.4407 318.262 li
95.0007 318.09 li
95.5507 317.917 li
96.1107 317.744 li
96.6607 317.571 li
97.2207 317.398 li
97.7707 317.225 li
98.3307 317.053 li
98.8907 316.88 li
99.4407 316.707 li
100.001 316.534 li
100.551 316.362 li
101.111 316.189 li
101.661 316.016 li
102.221 315.843 li
102.771 315.67 li
103.331 315.497 li
103.881 315.34 li
104.441 315.167 li
105.001 314.995 li
105.551 315.167 li
106.111 315.356 li
106.661 315.545 li
107.221 315.733 li
107.771 315.922 li
108.331 316.11 li
108.881 316.299 li
109.441 316.487 li
109.991 316.676 li
110.551 316.864 li
111.101 317.053 li
111.661 317.241 li
112.221 317.414 li
112.771 317.602 li
113.331 317.791 li
113.881 317.979 li
114.441 318.168 li
114.991 318.357 li
115.551 318.545 li
116.101 319.095 li
116.661 319.645 li
117.211 320.179 li
117.771 320.729 li
118.331 321.279 li
118.881 321.828 li
119.441 322.378 li
119.991 322.928 li
120.551 323.462 li
121.101 324.012 li
121.661 324.562 li
0 .32 .699 0 cmyk
@
63.3403 280.606 mo
63.8903 280.606 li
64.4503 280.606 li
65.0103 280.606 li
65.5603 280.606 li
66.1203 280.606 li
66.6703 280.606 li
67.2303 280.606 li
67.7803 280.606 li
68.3403 280.606 li
68.8903 280.606 li
69.4503 280.606 li
70.0003 280.606 li
70.5603 280.606 li
71.1203 280.606 li
71.6703 280.606 li
72.2303 280.606 li
72.7803 280.606 li
73.3403 280.606 li
73.8903 280.606 li
74.4503 280.606 li
75.0003 280.606 li
75.5603 280.606 li
76.1103 280.606 li
76.6703 280.873 li
77.2203 281.14 li
77.7803 281.407 li
78.3403 281.674 li
78.8903 281.957 li
79.4503 282.224 li
80.0003 282.491 li
80.5603 282.758 li
81.1103 283.025 li
81.6703 283.293 li
82.2203 283.575 li
82.7803 283.842 li
83.3303 284.109 li
83.8903 284.377 li
84.4503 284.644 li
85.0003 284.926 li
85.5603 285.193 li
86.1103 285.46 li
86.6703 285.728 li
87.2203 285.995 li
87.7803 286.262 li
88.3303 286.544 li
88.8903 286.246 li
89.4403 285.947 li
90.0003 285.649 li
90.5503 285.351 li
91.1103 285.052 li
91.6703 284.753 li
92.2203 284.455 li
92.7803 284.157 li
93.3303 283.874 li
93.8903 283.575 li
94.4403 283.277 li
95.0003 282.979 li
95.5503 282.68 li
96.1103 282.381 li
96.6603 282.083 li
97.2203 281.784 li
97.7703 281.486 li
98.3303 281.188 li
98.8903 280.905 li
99.4403 280.606 li
100 281.423 li
100.55 282.24 li
101.11 283.057 li
101.66 283.874 li
102.22 284.69 li
102.77 285.507 li
103.33 286.34 li
103.88 287.157 li
104.44 287.974 li
105 288.791 li
105.55 289.608 li
106.11 290.425 li
106.66 291.242 li
107.22 292.059 li
107.77 292.876 li
108.33 293.708 li
108.88 294.525 li
109.44 295.342 li
109.99 296.159 li
110.55 296.976 li
111.1 297.793 li
111.66 298.609 li
112.22 299.426 li
112.77 300.259 li
113.33 301.076 li
113.88 301.893 li
114.44 302.71 li
114.99 303.526 li
115.55 304.343 li
116.1 305.16 li
116.66 305.977 li
117.21 306.81 li
117.77 307.627 li
118.33 308.443 li
118.88 309.26 li
119.44 310.077 li
119.99 310.894 li
120.55 311.711 li
121.1 312.528 li
121.66 313.345 li
122.21 314.178 li
122.77 314.995 li
123.32 315.812 li
123.88 315.105 li
124.43 314.398 li
124.99 313.69 li
125.55 313 li
126.1 312.293 li
126.66 311.585 li
127.21 310.878 li
127.77 310.188 li
128.32 309.481 li
128.88 308.773 li
129.43 308.066 li
129.99 307.359 li
130.54 306.668 li
131.1 305.961 li
131.66 302.411 li
.023 .887 .902 0 cmyk
@
66.6704 309.245 mo
67.2304 309.81 li
67.7804 310.376 li
68.3404 310.942 li
68.8904 311.523 li
69.4504 312.089 li
70.0004 312.654 li
70.5604 313.22 li
71.1204 313.785 li
71.6704 314.35 li
72.2304 314.932 li
72.7804 315.497 li
73.3404 316.063 li
73.8904 316.629 li
74.4504 317.194 li
75.0004 317.76 li
75.5604 318.341 li
76.1104 318.907 li
76.6704 319.472 li
77.2204 320.037 li
77.7804 320.603 li
78.3404 321.169 li
78.8904 321.75 li
79.4504 322.315 li
80.0004 322.881 li
80.5604 323.447 li
81.1104 324.012 li
81.6704 323.918 li
82.2204 323.839 li
82.7804 323.745 li
83.3304 323.651 li
83.8904 323.557 li
84.4504 323.462 li
85.0004 323.384 li
85.5604 323.289 li
86.1104 323.195 li
86.6704 323.101 li
87.2204 323.007 li
87.7804 322.928 li
88.3304 322.834 li
88.8904 322.74 li
89.4404 322.645 li
90.0004 322.551 li
90.5504 322.473 li
91.1104 322.378 li
91.6704 322.284 li
92.2204 322.19 li
92.7804 322.096 li
93.3304 322.017 li
93.8904 321.923 li
94.4404 321.828 li
95.0004 321.734 li
95.5504 321.64 li
96.1104 321.561 li
96.6604 321.467 li
97.2204 321.373 li
97.7704 321.279 li
98.3304 321.184 li
98.8904 321.09 li
99.4404 321.012 li
100 320.917 li
100.55 320.823 li
101.11 320.729 li
101.66 320.635 li
102.22 320.556 li
102.77 320.462 li
103.33 320.368 li
103.88 320.273 li
104.44 320.179 li
105 320.1 li
105.55 320.006 li
106.11 319.912 li
106.66 319.818 li
107.22 319.724 li
107.77 319.645 li
108.33 319.551 li
108.88 319.456 li
109.44 319.362 li
109.99 319.268 li
110.55 319.189 li
111.1 319.095 li
111.66 319.001 li
112.22 318.907 li
112.77 318.812 li
113.33 318.734 li
113.88 318.64 li
114.44 318.545 li
114.99 318.451 li
115.55 318.357 li
116.1 318.278 li
116.66 315.812 li
117.21 313.345 li
117.77 310.879 li
118.33 308.428 li
118.88 305.962 li
119.44 303.495 li
0 .73 .508 0 cmyk
@
66.1206 306.778 mo
66.6706 306.15 li
67.2306 305.537 li
67.7806 304.908 li
68.3406 304.28 li
68.8906 303.668 li
69.4506 303.039 li
70.0006 302.411 li
70.5606 301.798 li
71.1206 301.17 li
71.6706 300.541 li
72.2306 299.929 li
72.7806 299.3 li
73.3406 298.672 li
73.8906 298.059 li
74.4506 297.431 li
75.0006 296.802 li
75.5606 296.19 li
76.1106 295.561 li
76.6706 294.933 li
77.2206 294.32 li
77.7806 293.692 li
78.3406 293.064 li
78.8906 292.451 li
79.4506 291.822 li
80.0006 291.194 li
80.5606 290.581 li
81.1106 289.953 li
81.6706 289.325 li
82.2206 288.712 li
82.7806 288.084 li
83.3306 287.455 li
83.8906 286.827 li
84.4506 286.214 li
85.0006 285.586 li
85.5606 284.957 li
86.1106 284.345 li
86.6706 283.716 li
87.2206 283.088 li
87.7806 282.475 li
88.3306 281.847 li
88.8906 281.218 li
89.4406 280.606 li
90.0006 282.067 li
90.5506 283.544 li
91.1106 285.005 li
91.6706 286.481 li
92.2206 287.942 li
92.7806 289.419 li
93.3306 290.88 li
93.8906 292.357 li
94.4406 293.818 li
95.0006 295.294 li
95.5506 296.755 li
96.1106 298.232 li
96.6606 299.693 li
97.2206 301.17 li
97.7706 302.631 li
98.3306 304.107 li
98.8906 305.569 li
99.4406 307.045 li
100.001 308.506 li
100.551 309.983 li
101.111 311.444 li
101.661 312.921 li
102.221 314.382 li
102.771 315.858 li
103.331 317.319 li
103.881 318.796 li
104.441 320.257 li
105.001 321.718 li
105.551 323.195 li
106.111 322.959 li
106.661 322.723 li
107.221 322.472 li
107.771 322.236 li
108.331 322.001 li
108.881 321.765 li
109.441 321.513 li
109.991 321.278 li
110.551 321.042 li
111.101 320.807 li
111.661 320.555 li
112.221 320.32 li
112.771 320.084 li
113.331 319.848 li
113.881 319.597 li
114.441 319.361 li
114.991 319.597 li
115.551 319.833 li
116.101 320.068 li
116.661 320.304 li
117.211 320.54 li
117.771 320.775 li
118.331 321.011 li
118.881 321.246 li
119.441 321.482 li
119.991 321.702 li
120.551 321.938 li
121.101 322.174 li
121.661 322.409 li
122.211 322.645 li
122.771 322.472 li
123.321 322.299 li
123.881 322.142 li
124.431 321.969 li
124.991 321.797 li
125.551 321.624 li
126.101 321.451 li
126.661 321.278 li
127.211 321.105 li
127.771 320.932 li
128.321 320.759 li
128.881 320.602 li
129.431 320.429 li
129.991 320.257 li
130.541 320.084 li
131.101 319.911 li
131.661 308.695 li
132.211 313.894 li
.438 .273 .734 .039 cmyk
@
63.3403 321.828 mo
63.8903 321.859 li
64.4503 321.875 li
65.0103 321.907 li
65.5603 321.938 li
66.1203 321.953 li
66.6703 321.985 li
67.2303 322.016 li
67.7803 322.048 li
68.3403 322.063 li
68.8903 322.095 li
69.4503 322.126 li
70.0003 322.142 li
70.5603 322.174 li
71.1203 322.205 li
71.6703 322.221 li
72.2303 322.252 li
72.7803 322.284 li
73.3403 322.315 li
73.8903 322.33 li
74.4503 322.362 li
75.0003 322.393 li
75.5603 322.409 li
76.1103 322.441 li
76.6703 322.472 li
77.2203 322.503 li
77.7803 322.519 li
78.3403 322.551 li
78.8903 322.582 li
79.4503 322.598 li
80.0003 322.629 li
80.5603 322.661 li
81.1103 322.676 li
81.6703 322.708 li
82.2203 322.739 li
82.7803 322.77 li
83.3303 322.786 li
83.8903 322.818 li
84.4503 322.849 li
85.0003 322.865 li
85.5603 322.896 li
86.1103 322.928 li
86.6703 322.943 li
87.2203 322.974 li
87.7803 323.006 li
88.3303 323.037 li
88.8903 323.053 li
89.4403 323.085 li
90.0003 323.116 li
90.5503 323.132 li
91.1103 323.163 li
91.6703 323.195 li
92.2203 323.226 li
92.7803 323.242 li
93.3303 323.273 li
93.8903 323.305 li
94.4403 323.32 li
95.0003 323.352 li
95.5503 323.383 li
96.1103 323.399 li
96.6603 323.431 li
97.2203 323.462 li
97.7703 323.493 li
98.3303 323.509 li
98.8903 323.54 li
99.4403 323.572 li
100 323.587 li
100.55 323.619 li
101.11 323.65 li
101.66 323.666 li
102.22 323.697 li
102.77 323.729 li
103.33 323.76 li
103.88 323.776 li
104.44 323.807 li
105 323.839 li
105.55 323.854 li
106.11 323.886 li
106.66 323.917 li
107.22 323.949 li
107.77 323.964 li
108.33 323.996 li
108.88 324.027 li
109.44 324.043 li
109.99 324.075 li
110.55 324.106 li
111.1 324.121 li
111.66 324.153 li
112.22 324.184 li
112.77 324.216 li
113.33 324.231 li
113.88 324.263 li
114.44 324.294 li
114.99 324.075 li
115.55 323.87 li
116.1 323.666 li
116.66 323.446 li
117.21 323.242 li
117.77 323.037 li
118.33 322.818 li
118.88 322.613 li
119.44 322.393 li
119.99 322.189 li
120.55 321.985 li
121.1 321.765 li
121.66 321.561 li
122.21 321.357 li
122.77 321.137 li
123.32 320.932 li
123.88 320.728 li
124.43 320.508 li
124.99 320.304 li
125.55 320.1 li
126.1 319.88 li
126.66 319.676 li
127.21 319.472 li
127.77 319.251 li
128.32 319.047 li
128.88 318.843 li
129.43 318.623 li
129.99 318.419 li
130.54 318.199 li
131.1 317.995 li
.652 .027 .941 0 cmyk
@
66.6704 294.478 mo
67.2304 295.939 li
67.7804 297.416 li
68.3404 298.893 li
68.8904 300.369 li
69.4504 301.846 li
70.0004 303.323 li
70.5604 304.784 li
71.1204 306.26 li
71.6704 307.737 li
72.2304 309.214 li
72.7804 310.69 li
73.3404 312.167 li
73.8904 313.628 li
74.4504 315.105 li
75.0004 316.582 li
75.5604 318.058 li
76.1104 319.535 li
76.6704 321.012 li
77.2204 320.776 li
77.7804 320.54 li
78.3404 320.305 li
78.8904 320.069 li
79.4504 319.849 li
80.0004 319.613 li
80.5604 319.378 li
81.1104 319.142 li
81.6704 318.907 li
82.2204 318.671 li
82.7804 318.451 li
83.3304 318.215 li
83.8904 317.979 li
84.4504 317.744 li
85.0004 317.508 li
85.5604 317.273 li
86.1104 317.053 li
86.6704 316.817 li
87.2204 316.582 li
87.7804 316.346 li
88.3304 316.11 li
88.8904 315.874 li
89.4404 315.655 li
90.0004 315.419 li
90.5504 315.184 li
91.1104 314.948 li
91.6704 314.712 li
92.2204 314.822 li
92.7804 314.916 li
93.3304 315.011 li
93.8904 315.105 li
94.4404 315.215 li
95.0004 315.309 li
95.5504 315.403 li
96.1104 315.513 li
96.6604 315.607 li
97.2204 315.702 li
97.7704 315.812 li
98.3304 315.906 li
98.8904 316 li
99.4404 316.11 li
100 316.205 li
100.55 316.299 li
101.11 316.409 li
101.66 316.503 li
102.22 316.597 li
102.77 316.707 li
103.33 316.801 li
103.88 316.895 li
104.44 315.984 li
105 315.073 li
105.55 314.162 li
106.11 313.251 li
106.66 312.34 li
107.22 311.429 li
107.77 311.586 li
108.33 311.727 li
108.88 311.884 li
109.44 312.041 li
109.99 312.183 li
110.55 312.34 li
111.1 312.481 li
111.66 312.639 li
112.22 312.795 li
112.77 312.937 li
113.33 313.094 li
113.88 313.235 li
114.44 313.393 li
114.99 313.55 li
115.55 313.691 li
116.1 313.848 li
116.66 314.005 li
117.21 314.146 li
117.77 314.304 li
118.33 314.445 li
118.88 314.602 li
119.44 314.759 li
119.99 314.901 li
120.55 315.058 li
121.1 315.199 li
121.66 315.356 li
122.21 315.513 li
122.77 315.655 li
123.32 315.812 li
123.88 316.157 li
124.43 316.503 li
124.99 316.849 li
125.55 317.194 li
126.1 317.54 li
126.66 317.885 li
127.21 318.231 li
127.77 318.577 li
128.32 318.922 li
128.88 319.268 li
129.43 319.613 li
129.99 319.975 li
130.54 320.32 li
131.1 320.666 li
131.66 321.012 li
.469 .035 .531 0 cmyk
@
63.8906 315.528 mo
64.4506 315.827 li
65.0106 316.11 li
65.5606 316.408 li
66.1206 316.691 li
66.6706 316.989 li
67.2306 317.272 li
67.7806 317.555 li
68.3406 317.853 li
68.8906 318.136 li
69.4506 318.435 li
70.0006 318.717 li
70.5606 319.016 li
71.1206 319.299 li
71.6706 319.597 li
72.2306 319.88 li
72.7806 320.162 li
73.3406 320.461 li
73.8906 320.744 li
74.4506 321.042 li
75.0006 321.325 li
75.5606 321.624 li
76.1106 321.906 li
76.6706 322.189 li
77.2206 322.487 li
77.7806 322.77 li
78.3406 323.069 li
78.8906 323.352 li
79.4506 323.65 li
80.0006 323.933 li
80.5606 324.231 li
81.1106 324.514 li
81.6706 324.797 li
82.2206 325.095 li
82.7806 325.378 li
83.3306 325.441 li
83.8906 325.488 li
84.4506 325.551 li
85.0006 325.598 li
85.5606 325.661 li
86.1106 325.708 li
86.6706 325.771 li
87.2206 325.834 li
87.7806 325.881 li
88.3306 325.944 li
88.8906 325.991 li
89.4406 326.053 li
90.0006 326.101 li
90.5506 326.164 li
91.1106 326.211 li
91.6706 326.274 li
92.2206 326.32 li
92.7806 326.383 li
93.3306 326.431 li
93.8906 326.493 li
94.4406 326.541 li
95.0006 326.603 li
95.5506 326.666 li
96.1106 326.714 li
96.6606 326.776 li
97.2206 326.823 li
97.7706 326.886 li
98.3306 326.933 li
98.8906 326.996 li
99.4406 327.043 li
100.001 327.106 li
100.551 327.153 li
101.111 327.216 li
101.661 327.263 li
102.221 327.326 li
102.771 327.373 li
103.331 327.436 li
103.881 327.499 li
104.441 327.546 li
105.001 327.609 li
105.551 327.656 li
106.111 327.719 li
106.661 327.766 li
107.221 327.829 li
107.771 327.876 li
108.331 327.939 li
108.881 327.986 li
109.441 328.049 li
109.991 328.096 li
110.551 328.159 li
111.101 328.206 li
111.661 328.269 li
112.221 328.332 li
112.771 328.379 li
113.331 328.442 li
113.881 328.488 li
114.441 328.551 li
114.991 328.599 li
115.551 328.661 li
116.101 328.709 li
116.661 328.771 li
117.211 328.819 li
117.771 328.882 li
118.331 328.928 li
118.881 328.991 li
119.441 329.038 li
119.991 329.101 li
120.551 329.164 li
121.101 329.211 li
121.661 328.834 li
122.211 328.442 li
122.771 328.065 li
123.321 327.687 li
123.881 327.295 li
124.431 326.918 li
124.991 326.525 li
125.551 326.148 li
126.101 325.771 li
126.661 325.378 li
127.211 325.001 li
127.771 324.624 li
128.321 324.231 li
128.881 323.854 li
129.431 323.462 li
129.991 323.085 li
130.541 322.708 li
131.101 322.315 li
131.661 321.938 li
132.211 321.561 li
.793 .41 .07 0 cmyk
@
.5 lw
1 lc
10 ml
63.34 331.646 mo
132.21 331.646 li
132.21 278.171 li
63.34 278.171 li
cp
.746 .676 .668 .898 cmyk
@
1 lw
0 lc
1 ml
63.3403 105.133 mo
63.8903 105.338 li
64.4503 105.526 li
65.0103 105.73 li
65.5603 105.919 li
66.1203 106.123 li
66.6703 106.311 li
67.2303 106.516 li
67.7803 106.704 li
68.3403 106.908 li
68.8903 107.097 li
69.4503 107.285 li
70.0003 107.489 li
70.5603 107.678 li
71.1203 107.883 li
71.6703 108.071 li
72.2303 108.275 li
72.7803 108.464 li
73.3403 108.668 li
73.8903 108.857 li
74.4503 109.061 li
75.0003 109.249 li
75.5603 109.453 li
76.1103 109.642 li
76.6703 109.846 li
77.2203 110.035 li
77.7803 110.239 li
78.3403 110.427 li
78.8903 110.632 li
79.4503 110.82 li
80.0003 111.024 li
80.5603 111.213 li
81.1103 111.417 li
81.6703 111.606 li
82.2203 111.81 li
82.7803 111.998 li
83.3303 112.202 li
83.8903 112.391 li
84.4503 112.595 li
85.0003 112.784 li
85.5603 112.988 li
86.1103 113.176 li
86.6703 113.381 li
87.2203 113.569 li
87.7803 113.758 li
88.3303 113.962 li
88.8903 114.151 li
89.4403 114.355 li
90.0003 114.543 li
90.5503 114.747 li
91.1103 114.936 li
91.6703 115.14 li
92.2203 115.329 li
92.7803 115.533 li
93.3303 115.721 li
93.8903 115.925 li
94.4403 116.114 li
95.0003 116.319 li
95.5503 116.507 li
96.1103 116.915 li
96.6603 117.324 li
97.2203 117.716 li
97.7703 118.125 li
98.3303 118.518 li
98.8903 118.926 li
99.4403 119.335 li
100 119.727 li
100.55 120.136 li
101.11 120.544 li
101.66 120.937 li
102.22 121.345 li
102.77 121.754 li
103.33 122.147 li
103.88 122.555 li
104.44 122.571 li
105 122.571 li
105.55 122.587 li
106.11 122.602 li
106.66 122.602 li
107.22 122.618 li
107.77 122.618 li
108.33 122.633 li
108.88 122.65 li
109.44 122.65 li
109.99 122.665 li
110.55 122.681 li
111.1 122.681 li
111.66 122.696 li
112.22 122.712 li
112.77 122.712 li
113.33 122.728 li
113.88 122.744 li
114.44 122.744 li
114.99 122.759 li
115.55 122.775 li
116.1 122.775 li
116.66 122.791 li
117.21 122.791 li
117.77 122.806 li
118.33 122.822 li
118.88 122.822 li
119.44 122.838 li
119.99 122.854 li
120.55 122.854 li
121.1 122.869 li
121.66 122.885 li
122.21 122.885 li
122.77 122.901 li
123.32 122.917 li
123.88 122.964 li
124.43 123.011 li
124.99 123.073 li
125.55 123.121 li
126.1 123.183 li
126.66 123.231 li
127.21 123.278 li
127.77 123.341 li
128.32 123.388 li
128.88 123.45 li
129.43 123.498 li
129.99 123.545 li
130.54 123.608 li
131.1 123.655 li
131.66 123.702 li
132.21 123.356 li
0 .617 1 0 cmyk
@
65.0107 102.463 mo
65.5607 102.84 li
66.1207 103.201 li
66.6707 103.563 li
67.2307 103.924 li
67.7807 104.285 li
68.3407 104.647 li
68.8907 105.008 li
69.4507 105.369 li
70.0007 105.746 li
70.5607 106.108 li
71.1207 106.469 li
71.6707 106.83 li
72.2307 107.192 li
72.7807 107.553 li
73.3407 107.914 li
73.8907 108.291 li
74.4507 108.652 li
75.0007 109.014 li
75.5607 109.375 li
76.1107 109.736 li
76.6707 110.098 li
77.2207 110.459 li
77.7807 110.82 li
78.3407 111.197 li
78.8907 111.559 li
79.4507 111.92 li
80.0007 112.281 li
80.5607 112.643 li
81.1107 113.004 li
81.6707 113.365 li
82.2207 113.742 li
82.7807 114.104 li
83.3307 114.465 li
83.8907 114.826 li
84.4507 115.188 li
85.0007 115.549 li
85.5607 115.91 li
86.1107 116.272 li
86.6707 116.649 li
87.2207 117.01 li
87.7807 117.371 li
88.3307 117.733 li
88.8907 118.094 li
89.4407 118.455 li
90.0007 118.817 li
90.5507 118.455 li
91.1107 118.094 li
91.6707 117.733 li
92.2207 117.371 li
92.7807 117.01 li
93.3307 116.649 li
93.8907 116.287 li
94.4407 115.926 li
95.0007 115.565 li
95.5507 115.204 li
96.1107 114.842 li
96.6607 114.481 li
97.2207 114.12 li
97.7707 113.758 li
98.3307 113.397 li
98.8907 113.036 li
99.4407 112.674 li
100.001 112.297 li
100.551 111.936 li
101.111 111.575 li
101.661 111.213 li
102.221 110.852 li
102.771 110.491 li
103.331 110.13 li
103.881 109.768 li
104.441 109.407 li
105.001 109.046 li
105.551 108.071 li
106.111 107.113 li
106.661 106.139 li
107.221 105.181 li
107.771 104.207 li
108.331 103.233 li
108.881 102.275 li
109.441 101.3 li
109.991 100.327 li
110.551 99.3679 li
111.101 98.3939 li
111.661 97.4199 li
112.221 96.4619 li
112.771 95.4879 li
113.331 94.5299 li
113.881 93.5559 li
114.441 92.5819 li
114.991 91.6239 li
115.551 90.6499 li
116.101 93.4619 li
116.661 96.2579 li
117.211 99.0539 li
117.771 101.866 li
118.331 104.662 li
118.881 107.474 li
119.441 110.271 li
119.991 113.083 li
120.551 115.879 li
121.101 118.691 li
121.661 121.487 li
0 .32 .699 0 cmyk
@
63.3403 75.4111 mo
63.8903 75.4111 li
64.4503 75.4111 li
65.0103 75.4111 li
65.5603 75.4111 li
66.1203 75.4111 li
66.6703 75.4111 li
67.2303 75.4111 li
67.7803 75.4111 li
68.3403 75.4111 li
68.8903 75.4111 li
69.4503 75.4111 li
70.0003 75.4111 li
70.5603 75.4111 li
71.1203 75.4111 li
71.6703 75.4111 li
72.2303 75.4111 li
72.7803 75.4111 li
73.3403 75.4111 li
73.8903 75.4111 li
74.4503 75.4111 li
75.0003 75.4111 li
75.5603 75.4111 li
76.1103 75.4111 li
76.6703 75.8191 li
77.2203 76.2281 li
77.7803 76.6361 li
78.3403 77.0451 li
78.8903 77.4531 li
79.4503 77.8621 li
80.0003 78.2861 li
80.5603 78.6941 li
81.1103 79.1031 li
81.6703 79.5111 li
82.2203 79.9201 li
82.7803 80.3281 li
83.3303 80.7371 li
83.8903 81.1451 li
84.4503 81.5541 li
85.0003 81.9621 li
85.5603 82.3861 li
86.1103 82.7941 li
86.6703 83.2031 li
87.2203 83.6111 li
87.7803 84.0201 li
88.3303 84.4281 li
88.8903 85.8731 li
89.4403 87.3031 li
90.0003 88.7481 li
90.5503 90.1941 li
91.1103 91.6231 li
91.6703 93.0691 li
92.2203 94.5141 li
92.7803 95.9431 li
93.3303 97.3891 li
93.8903 98.8341 li
94.4403 100.264 li
95.0003 101.709 li
95.5503 103.139 li
96.1103 104.583 li
96.6603 106.029 li
97.2203 107.458 li
97.7703 108.904 li
98.3303 110.349 li
98.8903 111.779 li
99.4403 113.224 li
100 113.412 li
100.55 113.601 li
101.11 113.805 li
101.66 113.994 li
102.22 114.182 li
102.77 114.37 li
103.33 114.575 li
103.88 114.764 li
104.44 114.952 li
105 115.14 li
105.55 115.345 li
106.11 115.533 li
106.66 115.722 li
107.22 115.91 li
107.77 116.099 li
108.33 116.303 li
108.88 116.492 li
109.44 116.68 li
109.99 116.869 li
110.55 117.073 li
111.1 117.261 li
111.66 117.45 li
112.22 117.638 li
112.77 117.843 li
113.33 118.031 li
113.88 118.22 li
114.44 118.408 li
114.99 118.612 li
115.55 118.801 li
116.1 118.989 li
116.66 119.178 li
117.21 119.366 li
117.77 119.571 li
118.33 119.759 li
118.88 119.948 li
119.44 120.136 li
119.99 120.34 li
120.55 120.529 li
121.1 120.717 li
121.66 120.906 li
122.21 121.11 li
122.77 121.299 li
123.32 121.487 li
123.88 121.644 li
124.43 121.801 li
124.99 121.958 li
125.55 122.116 li
126.1 122.288 li
126.66 122.445 li
127.21 122.602 li
127.77 122.76 li
128.32 122.917 li
128.88 123.074 li
129.43 123.231 li
129.99 123.388 li
130.54 123.545 li
131.1 123.702 li
131.66 123.702 li
.023 .887 .902 0 cmyk
@
66.6704 75.4111 mo
67.2304 76.3071 li
67.7804 77.2021 li
68.3404 78.0971 li
68.8904 78.9771 li
69.4504 79.8721 li
70.0004 80.7681 li
70.5604 81.6631 li
71.1204 82.5591 li
71.6704 83.4541 li
72.2304 84.3491 li
72.7804 85.2451 li
73.3404 86.1401 li
73.8904 87.0361 li
74.4504 87.9161 li
75.0004 88.8111 li
75.5604 89.7061 li
76.1104 90.6021 li
76.6704 91.4971 li
77.2204 92.3931 li
77.7804 93.2881 li
78.3404 94.1841 li
78.8904 95.0791 li
79.4504 95.9751 li
80.0004 96.8541 li
80.5604 97.7501 li
81.1104 98.6451 li
81.6704 98.9441 li
82.2204 99.2581 li
82.7804 99.5571 li
83.3304 99.8551 li
83.8904 100.154 li
84.4504 100.452 li
85.0004 100.766 li
85.5604 101.065 li
86.1104 101.363 li
86.6704 101.661 li
87.2204 101.976 li
87.7804 102.274 li
88.3304 102.573 li
88.8904 102.871 li
89.4404 103.17 li
90.0004 103.484 li
90.5504 103.783 li
91.1104 104.081 li
91.6704 104.379 li
92.2204 104.694 li
92.7804 104.992 li
93.3304 105.29 li
93.8904 105.589 li
94.4404 105.888 li
95.0004 106.202 li
95.5504 106.5 li
96.1104 106.799 li
96.6604 107.097 li
97.2204 107.395 li
97.7704 107.71 li
98.3304 108.008 li
98.8904 108.307 li
99.4404 108.605 li
100 108.919 li
100.55 109.218 li
101.11 109.516 li
101.66 109.815 li
102.22 110.113 li
102.77 110.428 li
103.33 110.726 li
103.88 111.024 li
104.44 111.323 li
105 111.621 li
105.55 111.936 li
106.11 112.234 li
106.66 112.533 li
107.22 112.831 li
107.77 113.145 li
108.33 113.444 li
108.88 113.742 li
109.44 114.041 li
109.99 114.339 li
110.55 114.653 li
111.1 114.952 li
111.66 115.25 li
112.22 115.549 li
112.77 115.863 li
113.33 116.161 li
113.88 116.46 li
114.44 116.759 li
114.99 117.057 li
115.55 117.371 li
116.1 117.67 li
116.66 117.434 li
117.21 117.198 li
117.77 116.963 li
118.33 116.711 li
118.88 116.476 li
119.44 116.24 li
0 .73 .508 0 cmyk
@
66.1206 75.4111 mo
66.6706 75.4111 li
67.2306 75.4111 li
67.7806 75.4111 li
68.3406 75.4111 li
68.8906 75.4111 li
69.4506 75.4111 li
70.0006 75.4111 li
70.5606 75.4111 li
71.1206 75.4111 li
71.6706 75.4111 li
72.2306 75.4111 li
72.7806 75.4111 li
73.3406 75.4111 li
73.8906 75.4111 li
74.4506 75.4111 li
75.0006 75.4111 li
75.5606 75.4111 li
76.1106 75.4111 li
76.6706 75.4111 li
77.2206 75.4111 li
77.7806 75.4111 li
78.3406 75.4111 li
78.8906 75.4111 li
79.4506 75.4111 li
80.0006 75.4111 li
80.5606 75.4111 li
81.1106 75.4111 li
81.6706 75.4111 li
82.2206 75.4111 li
82.7806 75.4111 li
83.3306 75.4111 li
83.8906 75.4111 li
84.4506 75.4111 li
85.0006 75.4111 li
85.5606 75.4111 li
86.1106 75.4111 li
86.6706 75.4111 li
87.2206 75.4111 li
87.7806 75.4111 li
88.3306 75.4111 li
88.8906 75.4111 li
89.4406 75.4111 li
90.0006 76.9031 li
90.5506 78.3961 li
91.1106 79.9041 li
91.6706 81.3961 li
92.2206 82.8891 li
92.7806 84.3971 li
93.3306 85.8891 li
93.8906 87.3821 li
94.4406 88.8901 li
95.0006 90.3821 li
95.5506 91.8741 li
96.1106 93.3671 li
96.6606 94.8751 li
97.2206 96.3681 li
97.7706 97.8601 li
98.3306 99.3681 li
98.8906 100.86 li
99.4406 102.353 li
100.001 103.845 li
100.551 105.353 li
101.111 106.846 li
101.661 108.338 li
102.221 109.846 li
102.771 111.339 li
103.331 112.831 li
103.881 114.324 li
104.441 115.831 li
105.001 117.324 li
105.551 118.816 li
106.111 117.717 li
106.661 116.601 li
107.221 115.486 li
107.771 114.37 li
108.331 113.271 li
108.881 112.156 li
109.441 111.04 li
109.991 109.94 li
110.551 108.825 li
111.101 107.71 li
111.661 106.61 li
112.221 105.495 li
112.771 104.379 li
113.331 103.264 li
113.881 102.164 li
114.441 101.049 li
114.991 102.384 li
115.551 103.72 li
116.101 105.055 li
116.661 106.374 li
117.211 107.71 li
117.771 109.045 li
118.331 110.38 li
118.881 111.716 li
119.441 113.051 li
119.991 114.37 li
120.551 115.706 li
121.101 117.041 li
121.661 118.376 li
122.211 119.712 li
122.771 119.932 li
123.321 120.136 li
123.881 120.356 li
124.431 120.56 li
124.991 120.78 li
125.551 121 li
126.101 121.204 li
126.661 121.424 li
127.211 121.628 li
127.771 121.849 li
128.321 122.068 li
128.881 122.272 li
129.431 122.493 li
129.991 122.697 li
130.541 122.917 li
131.101 123.137 li
131.661 123.938 li
132.211 123.89 li
.438 .273 .734 .039 cmyk
@
63.3403 91.3564 mo
63.8903 91.7174 li
64.4503 92.0634 li
65.0103 92.4084 li
65.5603 92.7544 li
66.1203 93.1154 li
66.6703 93.4614 li
67.2303 93.8074 li
67.7803 94.1524 li
68.3403 94.5134 li
68.8903 94.8594 li
69.4503 95.2054 li
70.0003 95.5504 li
70.5603 95.9124 li
71.1203 96.2574 li
71.6703 96.6034 li
72.2303 96.9484 li
72.7803 97.3104 li
73.3403 97.6554 li
73.8903 98.0014 li
74.4503 98.3624 li
75.0003 98.7084 li
75.5603 99.0534 li
76.1103 99.3994 li
76.6703 99.7604 li
77.2203 100.106 li
77.7803 100.452 li
78.3403 100.797 li
78.8903 101.159 li
79.4503 101.504 li
80.0003 101.85 li
80.5603 102.195 li
81.1103 102.557 li
81.6703 102.902 li
82.2203 103.248 li
82.7803 103.593 li
83.3303 103.955 li
83.8903 104.3 li
84.4503 104.646 li
85.0003 104.992 li
85.5603 105.353 li
86.1103 105.699 li
86.6703 106.044 li
87.2203 106.39 li
87.7803 106.751 li
88.3303 107.097 li
88.8903 107.442 li
89.4403 107.804 li
90.0003 108.149 li
90.5503 108.495 li
91.1103 108.84 li
91.6703 109.202 li
92.2203 109.547 li
92.7803 109.893 li
93.3303 110.239 li
93.8903 110.6 li
94.4403 110.946 li
95.0003 111.291 li
95.5503 111.637 li
96.1103 111.998 li
96.6603 112.344 li
97.2203 112.689 li
97.7703 113.035 li
98.3303 113.397 li
98.8903 113.742 li
99.4403 114.087 li
100 114.433 li
100.55 114.794 li
101.11 115.14 li
101.66 115.486 li
102.22 115.831 li
102.77 116.192 li
103.33 116.538 li
103.88 116.884 li
104.44 117.245 li
105 117.591 li
105.55 117.937 li
106.11 118.282 li
106.66 118.643 li
107.22 118.989 li
107.77 119.335 li
108.33 119.68 li
108.88 120.042 li
109.44 120.387 li
109.99 120.732 li
110.55 121.078 li
111.1 121.439 li
111.66 121.785 li
112.22 122.131 li
112.77 122.477 li
113.33 122.838 li
113.88 123.183 li
114.44 123.529 li
114.99 123.513 li
115.55 123.498 li
116.1 123.482 li
116.66 123.466 li
117.21 123.45 li
117.77 123.435 li
118.33 123.419 li
118.88 123.403 li
119.44 123.388 li
119.99 123.356 li
120.55 123.34 li
121.1 123.325 li
121.66 123.309 li
122.21 123.293 li
122.77 123.277 li
123.32 123.262 li
123.88 123.246 li
124.43 123.231 li
124.99 123.215 li
125.55 123.199 li
126.1 123.183 li
126.66 123.168 li
127.21 123.152 li
127.77 123.136 li
128.32 123.105 li
128.88 123.089 li
129.43 123.073 li
129.99 123.058 li
130.54 123.042 li
131.1 123.026 li
.652 .027 .941 0 cmyk
@
66.6704 102.73 mo
67.2304 103.688 li
67.7804 104.631 li
68.3404 105.573 li
68.8904 106.532 li
69.4504 107.474 li
70.0004 108.417 li
70.5604 109.375 li
71.1204 110.318 li
71.6704 111.26 li
72.2304 112.219 li
72.7804 113.161 li
73.3404 114.12 li
73.8904 115.062 li
74.4504 116.004 li
75.0004 116.963 li
75.5604 117.905 li
76.1104 118.848 li
76.6704 119.806 li
77.2204 119.916 li
77.7804 120.026 li
78.3404 120.136 li
78.8904 120.246 li
79.4504 120.356 li
80.0004 120.466 li
80.5604 120.576 li
81.1104 120.702 li
81.6704 120.812 li
82.2204 120.921 li
82.7804 121.032 li
83.3304 121.142 li
83.8904 121.251 li
84.4504 121.361 li
85.0004 121.472 li
85.5604 121.597 li
86.1104 121.707 li
86.6704 121.817 li
87.2204 121.927 li
87.7804 122.037 li
88.3304 122.147 li
88.8904 122.257 li
89.4404 122.367 li
90.0004 122.493 li
90.5504 122.603 li
91.1104 122.712 li
91.6704 122.823 li
92.2204 122.351 li
92.7804 121.896 li
93.3304 121.424 li
93.8904 120.969 li
94.4404 120.498 li
95.0004 120.026 li
95.5504 119.571 li
96.1104 119.099 li
96.6604 118.644 li
97.2204 118.172 li
97.7704 117.717 li
98.3304 117.246 li
98.8904 116.774 li
99.4404 116.319 li
100 115.848 li
100.55 115.392 li
101.11 114.92 li
101.66 114.465 li
102.22 113.994 li
102.77 113.522 li
103.33 113.067 li
103.88 112.596 li
104.44 114.276 li
105 115.942 li
105.55 117.623 li
106.11 119.304 li
106.66 120.969 li
107.22 122.65 li
107.77 122.603 li
108.33 122.571 li
108.88 122.54 li
109.44 122.493 li
109.99 122.461 li
110.55 122.43 li
111.1 122.383 li
111.66 122.351 li
112.22 122.32 li
112.77 122.272 li
113.33 122.241 li
113.88 122.21 li
114.44 122.163 li
114.99 122.131 li
115.55 122.084 li
116.1 122.053 li
116.66 122.022 li
117.21 121.974 li
117.77 121.943 li
118.33 121.911 li
118.88 121.864 li
119.44 121.833 li
119.99 121.801 li
120.55 121.754 li
121.1 121.723 li
121.66 121.691 li
122.21 121.645 li
122.77 121.613 li
123.32 121.582 li
123.88 121.676 li
124.43 121.77 li
124.99 121.88 li
125.55 121.974 li
126.1 122.068 li
126.66 122.178 li
127.21 122.272 li
127.77 122.367 li
128.32 122.477 li
128.88 122.571 li
129.43 122.666 li
129.99 122.775 li
130.54 122.87 li
131.1 122.964 li
131.66 123.074 li
.469 .035 .531 0 cmyk
@
63.8906 101.049 mo
64.4506 101.285 li
65.0106 101.521 li
65.5606 101.756 li
66.1206 101.992 li
66.6706 102.227 li
67.2306 102.463 li
67.7806 102.699 li
68.3406 102.934 li
68.8906 103.17 li
69.4506 103.405 li
70.0006 103.641 li
70.5606 103.877 li
71.1206 104.112 li
71.6706 104.348 li
72.2306 104.584 li
72.7806 104.82 li
73.3406 105.055 li
73.8906 105.275 li
74.4506 105.511 li
75.0006 105.746 li
75.5606 105.982 li
76.1106 106.217 li
76.6706 106.453 li
77.2206 106.689 li
77.7806 106.924 li
78.3406 107.16 li
78.8906 107.396 li
79.4506 107.632 li
80.0006 107.867 li
80.5606 108.103 li
81.1106 108.339 li
81.6706 108.574 li
82.2206 108.81 li
82.7806 109.046 li
83.3306 109.265 li
83.8906 109.469 li
84.4506 109.69 li
85.0006 109.894 li
85.5606 110.113 li
86.1106 110.318 li
86.6706 110.538 li
87.2206 110.742 li
87.7806 110.962 li
88.3306 111.166 li
88.8906 111.386 li
89.4406 111.591 li
90.0006 111.81 li
90.5506 112.014 li
91.1106 112.235 li
91.6706 112.454 li
92.2206 112.658 li
92.7806 112.879 li
93.3306 113.083 li
93.8906 113.303 li
94.4406 113.507 li
95.0006 113.727 li
95.5506 113.931 li
96.1106 114.151 li
96.6606 114.355 li
97.2206 114.575 li
97.7706 114.779 li
98.3306 114.999 li
98.8906 115.204 li
99.4406 115.424 li
100.001 115.628 li
100.551 115.848 li
101.111 116.052 li
101.661 116.272 li
102.221 116.492 li
102.771 116.696 li
103.331 116.916 li
103.881 117.12 li
104.441 117.34 li
105.001 117.544 li
105.551 117.764 li
106.111 117.968 li
106.661 118.188 li
107.221 118.393 li
107.771 118.612 li
108.331 118.817 li
108.881 119.037 li
109.441 119.241 li
109.991 119.461 li
110.551 119.665 li
111.101 119.885 li
111.661 120.105 li
112.221 120.309 li
112.771 120.529 li
113.331 120.733 li
113.881 120.953 li
114.441 121.157 li
114.991 121.378 li
115.551 121.582 li
116.101 121.801 li
116.661 122.006 li
117.211 122.226 li
117.771 122.43 li
118.331 122.65 li
118.881 122.854 li
119.441 123.074 li
119.991 123.278 li
120.551 123.498 li
121.101 123.702 li
121.661 123.718 li
122.211 123.734 li
122.771 123.75 li
123.321 123.765 li
123.881 123.781 li
124.431 123.797 li
124.991 123.812 li
125.551 123.828 li
126.101 123.844 li
126.661 123.86 li
127.211 123.875 li
127.771 123.891 li
128.321 123.906 li
128.881 123.923 li
129.431 123.938 li
129.991 123.954 li
130.541 123.969 li
131.101 123.985 li
131.661 124.001 li
132.211 124.017 li
.793 .41 .07 0 cmyk
@
.5 lw
1 lc
10 ml
63.34 126.452 mo
132.21 126.452 li
132.21 72.976 li
63.34 72.976 li
cp
.746 .676 .668 .898 cmyk
@
1 lw
0 lc
1 ml
123.32 223.512 mo
123.88 224.109 li
124.43 224.69 li
124.99 225.271 li
125.55 225.853 li
126.1 226.434 li
126.66 227.015 li
127.21 227.596 li
127.77 228.178 li
128.32 228.759 li
128.88 229.34 li
129.43 229.922 li
129.99 230.503 li
130.54 231.084 li
131.1 231.665 li
131.66 232.246 li
132.21 230.739 li
0 .617 1 0 cmyk
@
115.55 185.793 mo
116.1 185.793 li
116.66 185.793 li
117.21 185.793 li
117.77 185.793 li
118.33 185.793 li
118.88 185.793 li
119.44 185.793 li
119.99 185.793 li
120.55 185.793 li
121.1 185.793 li
121.66 185.793 li
0 .32 .699 0 cmyk
@
123.32 185.793 mo
123.88 189.17 li
124.43 192.532 li
124.99 195.91 li
125.55 199.288 li
126.1 202.649 li
126.66 206.027 li
127.21 209.405 li
127.77 212.767 li
128.32 216.144 li
128.88 219.522 li
129.43 222.883 li
129.99 226.261 li
130.54 229.639 li
131.1 233.001 li
131.66 231.068 li
.023 .887 .902 0 cmyk
@
116.101 211.447 mo
116.661 212.782 li
117.211 214.102 li
117.771 215.437 li
118.331 216.773 li
118.881 218.092 li
119.441 219.427 li
0 .73 .508 0 cmyk
@
114.44 216.191 mo
114.99 217.181 li
115.55 218.155 li
116.1 219.145 li
116.66 220.134 li
117.21 221.124 li
117.77 222.098 li
118.33 223.087 li
118.88 224.077 li
119.44 225.067 li
119.99 226.041 li
120.55 227.031 li
121.1 228.021 li
121.66 228.994 li
122.21 229.984 li
122.77 230.141 li
123.32 230.298 li
123.88 230.456 li
124.43 230.612 li
124.99 230.754 li
125.55 230.911 li
126.1 231.068 li
126.66 231.225 li
127.21 231.382 li
127.77 231.539 li
128.32 231.696 li
128.88 231.854 li
129.43 231.995 li
129.99 232.152 li
130.54 232.309 li
131.1 232.466 li
131.66 234.399 li
132.21 234.304 li
.438 .273 .734 .039 cmyk
@
114.44 223.731 mo
114.99 224.014 li
115.55 224.297 li
116.1 224.58 li
116.66 224.862 li
117.21 225.145 li
117.77 225.428 li
118.33 225.71 li
118.88 225.993 li
119.44 226.276 li
119.99 226.559 li
120.55 226.842 li
121.1 227.125 li
121.66 227.407 li
122.21 227.69 li
122.77 227.973 li
123.32 228.255 li
123.88 228.538 li
124.43 228.821 li
124.99 229.104 li
125.55 229.387 li
126.1 229.669 li
126.66 229.952 li
127.21 230.235 li
127.77 230.518 li
128.32 230.8 li
128.88 231.083 li
129.43 231.366 li
129.99 231.649 li
130.54 231.932 li
131.1 232.214 li
.652 .027 .941 0 cmyk
@
123.32 228.916 mo
123.88 229.167 li
124.43 229.418 li
124.99 229.686 li
125.55 229.937 li
126.1 230.204 li
126.66 230.456 li
127.21 230.722 li
127.77 230.974 li
128.32 231.241 li
128.88 231.492 li
129.43 231.759 li
129.99 232.011 li
130.54 232.278 li
131.1 232.529 li
131.66 232.796 li
.469 .035 .531 0 cmyk
@
121.101 215.107 mo
121.661 216.003 li
122.211 216.882 li
122.771 217.762 li
123.321 218.642 li
123.881 219.537 li
124.431 220.417 li
124.991 221.297 li
125.551 222.176 li
126.101 223.072 li
126.661 223.952 li
127.211 224.832 li
127.771 225.711 li
128.321 226.607 li
128.881 227.486 li
129.431 228.366 li
129.991 229.261 li
130.541 230.141 li
131.101 231.021 li
131.661 231.9 li
132.211 232.796 li
.793 .41 .07 0 cmyk
@
.5 lw
1 lc
10 ml
63.34 236.833 mo
132.21 236.833 li
132.21 183.357 li
63.34 183.357 li
cp
.746 .676 .668 .898 cmyk
@
1 lw
0 lc
1 ml
63.3403 336.175 mo
63.8903 336.473 li
64.4503 336.772 li
65.0103 337.07 li
65.5603 337.369 li
66.1203 337.667 li
66.6703 337.966 li
67.2303 338.264 li
67.7803 338.563 li
68.3403 338.861 li
68.8903 339.159 li
69.4503 339.458 li
70.0003 339.757 li
70.5603 340.055 li
71.1203 340.354 li
71.6703 340.652 li
72.2303 340.95 li
72.7803 341.249 li
73.3403 341.548 li
73.8903 341.846 li
74.4503 342.144 li
75.0003 342.443 li
75.5603 342.741 li
76.1103 343.04 li
76.6703 343.339 li
77.2203 343.637 li
77.7803 343.935 li
78.3403 344.234 li
78.8903 344.532 li
79.4503 344.831 li
80.0003 345.129 li
80.5603 345.428 li
81.1103 345.726 li
81.6703 346.025 li
82.2203 346.323 li
82.7803 346.622 li
83.3303 346.92 li
83.8903 347.218 li
84.4503 347.517 li
85.0003 347.816 li
85.5603 348.114 li
86.1103 348.412 li
86.6703 348.711 li
87.2203 349.009 li
87.7803 349.308 li
88.3303 349.607 li
88.8903 349.905 li
89.4403 350.203 li
90.0003 350.502 li
90.5503 350.8 li
91.1103 351.099 li
91.6703 351.397 li
92.2203 351.696 li
92.7803 351.994 li
93.3303 352.293 li
93.8903 352.592 li
94.4403 352.89 li
95.0003 353.188 li
95.5503 353.487 li
96.1103 353.612 li
96.6603 353.722 li
97.2203 353.848 li
97.7703 353.974 li
98.3303 354.099 li
98.8903 354.209 li
99.4403 354.335 li
100 354.461 li
100.55 354.587 li
101.11 354.696 li
101.66 354.822 li
102.22 354.948 li
102.77 355.058 li
103.33 355.183 li
103.88 355.309 li
104.44 355.404 li
105 355.498 li
105.55 355.608 li
106.11 355.702 li
106.66 355.796 li
107.22 355.89 li
107.77 356 li
108.33 356.094 li
108.88 356.189 li
109.44 356.283 li
109.99 356.377 li
110.55 356.487 li
111.1 356.582 li
111.66 356.676 li
112.22 356.77 li
112.77 356.88 li
113.33 356.974 li
113.88 357.069 li
114.44 357.163 li
114.99 357.273 li
115.55 357.367 li
116.1 357.461 li
116.66 357.555 li
117.21 357.65 li
117.77 357.76 li
118.33 357.854 li
118.88 357.948 li
119.44 358.043 li
119.99 358.153 li
120.55 358.247 li
121.1 358.341 li
121.66 358.435 li
122.21 358.545 li
122.77 358.639 li
123.32 358.734 li
123.88 358.247 li
124.43 357.76 li
124.99 357.273 li
125.55 356.786 li
126.1 356.315 li
126.66 355.827 li
127.21 355.341 li
127.77 354.853 li
128.32 354.366 li
128.88 353.88 li
129.43 353.392 li
129.99 352.905 li
130.54 352.419 li
131.1 351.947 li
131.66 351.46 li
132.21 362.991 li
0 .617 1 0 cmyk
@
65.0107 336.175 mo
65.5607 336.316 li
66.1207 336.458 li
66.6707 336.614 li
67.2307 336.756 li
67.7807 336.898 li
68.3407 337.039 li
68.8907 337.18 li
69.4507 337.321 li
70.0007 337.463 li
70.5607 337.604 li
71.1207 337.746 li
71.6707 337.903 li
72.2307 338.044 li
72.7807 338.186 li
73.3407 338.327 li
73.8907 338.468 li
74.4507 338.61 li
75.0007 338.751 li
75.5607 338.893 li
76.1107 339.034 li
76.6707 339.175 li
77.2207 339.332 li
77.7807 339.474 li
78.3407 339.615 li
78.8907 339.757 li
79.4507 339.898 li
80.0007 340.039 li
80.5607 340.181 li
81.1107 340.322 li
81.6707 340.464 li
82.2207 340.621 li
82.7807 340.762 li
83.3307 340.904 li
83.8907 341.045 li
84.4507 341.186 li
85.0007 341.327 li
85.5607 341.469 li
86.1107 341.61 li
86.6707 341.752 li
87.2207 341.893 li
87.7807 342.05 li
88.3307 342.192 li
88.8907 342.333 li
89.4407 342.474 li
90.0007 342.616 li
90.5507 342.553 li
91.1107 342.506 li
91.6707 342.443 li
92.2207 342.38 li
92.7807 342.333 li
93.3307 342.27 li
93.8907 342.207 li
94.4407 342.144 li
95.0007 342.097 li
95.5507 342.034 li
96.1107 341.971 li
96.6607 341.925 li
97.2207 341.862 li
97.7707 341.799 li
98.3307 341.752 li
98.8907 341.689 li
99.4407 341.626 li
100.001 341.579 li
100.551 341.516 li
101.111 341.453 li
101.661 341.406 li
102.221 341.343 li
102.771 341.28 li
103.331 341.217 li
103.881 341.171 li
104.441 341.108 li
105.001 341.045 li
105.551 340.793 li
106.111 340.542 li
106.661 340.275 li
107.221 340.024 li
107.771 339.772 li
108.331 339.505 li
108.881 339.254 li
109.441 339.003 li
109.991 338.751 li
110.551 338.484 li
111.101 338.233 li
111.661 337.981 li
112.221 337.715 li
112.771 337.463 li
113.331 337.212 li
113.881 336.945 li
114.441 336.693 li
114.991 336.442 li
115.551 336.175 li
116.101 336.536 li
116.661 336.882 li
117.211 337.243 li
117.771 337.604 li
118.331 337.95 li
118.881 338.311 li
119.441 338.657 li
119.991 339.018 li
120.551 339.38 li
121.101 339.725 li
121.661 340.087 li
0 .32 .699 0 cmyk
@
63.3403 344.47 mo
63.8903 344.109 li
64.4503 343.763 li
65.0103 343.402 li
65.5603 343.04 li
66.1203 342.679 li
66.6703 342.318 li
67.2303 341.956 li
67.7803 341.595 li
68.3403 341.234 li
68.8903 340.872 li
69.4503 340.511 li
70.0003 340.15 li
70.5603 339.788 li
71.1203 339.427 li
71.6703 339.066 li
72.2303 338.704 li
72.7803 338.343 li
73.3403 337.982 li
73.8903 337.621 li
74.4503 337.26 li
75.0003 336.898 li
75.5603 336.537 li
76.1103 336.176 li
76.6703 336.285 li
77.2203 336.38 li
77.7803 336.474 li
78.3403 336.568 li
78.8903 336.662 li
79.4503 336.772 li
80.0003 336.866 li
80.5603 336.961 li
81.1103 337.055 li
81.6703 337.165 li
82.2203 337.26 li
82.7803 337.354 li
83.3303 337.448 li
83.8903 337.558 li
84.4503 337.652 li
85.0003 337.746 li
85.5603 337.841 li
86.1103 337.95 li
86.6703 338.045 li
87.2203 338.139 li
87.7803 338.233 li
88.3303 338.327 li
88.8903 339.632 li
89.4403 340.935 li
90.0003 342.223 li
90.5503 343.528 li
91.1103 344.816 li
91.6703 346.119 li
92.2203 347.424 li
92.7803 348.712 li
93.3303 350.015 li
93.8903 351.303 li
94.4403 352.608 li
95.0003 353.896 li
95.5503 355.199 li
96.1103 356.504 li
96.6603 357.792 li
97.2203 359.095 li
97.7703 360.384 li
98.3303 361.688 li
98.8903 362.976 li
99.4403 364.28 li
100 363.667 li
100.55 363.054 li
101.11 362.442 li
101.66 361.829 li
102.22 361.217 li
102.77 360.604 li
103.33 359.991 li
103.88 359.378 li
104.44 358.766 li
105 358.153 li
105.55 357.54 li
106.11 356.928 li
106.66 356.315 li
107.22 355.702 li
107.77 355.09 li
108.33 354.477 li
108.88 353.865 li
109.44 353.252 li
109.99 352.639 li
110.55 352.026 li
111.1 351.414 li
111.66 350.801 li
112.22 350.188 li
112.77 349.575 li
113.33 348.963 li
113.88 348.35 li
114.44 347.738 li
114.99 347.125 li
115.55 346.512 li
116.1 345.9 li
116.66 345.287 li
117.21 344.674 li
117.77 344.062 li
118.33 343.449 li
118.88 342.836 li
119.44 342.223 li
119.99 341.595 li
120.55 340.983 li
121.1 340.37 li
121.66 339.757 li
122.21 339.144 li
122.77 338.532 li
123.32 337.919 li
123.88 338.94 li
124.43 339.946 li
124.99 340.951 li
125.55 341.956 li
126.1 342.962 li
126.66 343.967 li
127.21 344.973 li
127.77 345.994 li
128.32 346.999 li
128.88 348.005 li
129.43 349.01 li
129.99 350.015 li
130.54 351.021 li
131.1 352.026 li
131.66 340.684 li
.023 .887 .902 0 cmyk
@
66.6704 336.175 mo
67.2304 337.604 li
67.7804 339.018 li
68.3404 340.432 li
68.8904 341.846 li
69.4504 343.276 li
70.0004 344.689 li
70.5604 346.103 li
71.1204 347.533 li
71.6704 348.946 li
72.2304 350.361 li
72.7804 351.79 li
73.3404 353.204 li
73.8904 354.618 li
74.4504 356.048 li
75.0004 357.461 li
75.5604 358.875 li
76.1104 360.289 li
76.6704 361.718 li
77.2204 363.133 li
77.7804 364.546 li
78.3404 365.976 li
78.8904 367.39 li
79.4504 368.803 li
80.0004 370.233 li
80.5604 371.647 li
81.1104 373.061 li
81.6704 372.904 li
82.2204 372.731 li
82.7804 372.574 li
83.3304 372.417 li
83.8904 372.244 li
84.4504 372.087 li
85.0004 371.93 li
85.5604 371.757 li
86.1104 371.6 li
86.6704 371.427 li
87.2204 371.27 li
87.7804 371.113 li
88.3304 370.94 li
88.8904 370.783 li
89.4404 370.626 li
90.0004 370.453 li
90.5504 370.296 li
91.1104 370.123 li
91.6704 369.966 li
92.2204 369.809 li
92.7804 369.636 li
93.3304 369.479 li
93.8904 369.306 li
94.4404 369.149 li
95.0004 368.992 li
95.5504 368.819 li
96.1104 368.662 li
96.6604 368.505 li
97.2204 368.332 li
97.7704 368.175 li
98.3304 368.002 li
98.8904 367.845 li
99.4404 367.688 li
100 367.515 li
100.55 367.358 li
101.11 367.201 li
101.66 367.029 li
102.22 366.871 li
102.77 366.698 li
103.33 366.541 li
103.88 366.384 li
104.44 366.212 li
105 366.054 li
105.55 365.882 li
106.11 365.724 li
106.66 365.568 li
107.22 365.395 li
107.77 365.237 li
108.33 365.08 li
108.88 364.907 li
109.44 364.751 li
109.99 364.578 li
110.55 364.421 li
111.1 364.263 li
111.66 364.091 li
112.22 363.934 li
112.77 363.777 li
113.33 363.604 li
113.88 363.446 li
114.44 363.274 li
114.99 363.117 li
115.55 362.96 li
116.1 362.787 li
116.66 362.535 li
117.21 362.3 li
117.77 362.049 li
118.33 361.797 li
118.88 361.546 li
119.44 361.294 li
0 .73 .508 0 cmyk
@
66.1206 351.853 mo
66.6706 351.539 li
67.2306 351.225 li
67.7806 350.926 li
68.3406 350.612 li
68.8906 350.298 li
69.4506 349.999 li
70.0006 349.686 li
70.5606 349.387 li
71.1206 349.073 li
71.6706 348.758 li
72.2306 348.46 li
72.7806 348.146 li
73.3406 347.832 li
73.8906 347.533 li
74.4506 347.219 li
75.0006 346.905 li
75.5606 346.606 li
76.1106 346.292 li
76.6706 345.994 li
77.2206 345.679 li
77.7806 345.365 li
78.3406 345.067 li
78.8906 344.752 li
79.4506 344.438 li
80.0006 344.14 li
80.5606 343.826 li
81.1106 343.527 li
81.6706 343.213 li
82.2206 342.899 li
82.7806 342.6 li
83.3306 342.286 li
83.8906 341.972 li
84.4506 341.673 li
85.0006 341.359 li
85.5606 341.045 li
86.1106 340.747 li
86.6706 340.433 li
87.2206 340.134 li
87.7806 339.82 li
88.3306 339.505 li
88.8906 339.207 li
89.4406 338.893 li
90.0006 339.772 li
90.5506 340.637 li
91.1106 341.516 li
91.6706 342.396 li
92.2206 343.276 li
92.7806 344.14 li
93.3306 345.02 li
93.8906 345.899 li
94.4406 346.779 li
95.0006 347.643 li
95.5506 348.523 li
96.1106 349.402 li
96.6606 350.267 li
97.2206 351.146 li
97.7706 352.026 li
98.3306 352.906 li
98.8906 353.77 li
99.4406 354.649 li
100.001 355.529 li
100.551 356.409 li
101.111 357.273 li
101.661 358.153 li
102.221 359.033 li
102.771 359.896 li
103.331 360.776 li
103.881 361.656 li
104.441 362.536 li
105.001 363.4 li
105.551 364.279 li
106.111 364.248 li
106.661 364.201 li
107.221 364.169 li
107.771 364.138 li
108.331 364.091 li
108.881 364.06 li
109.441 364.012 li
109.991 363.981 li
110.551 363.95 li
111.101 363.902 li
111.661 363.871 li
112.221 363.84 li
112.771 363.792 li
113.331 363.761 li
113.881 363.714 li
114.441 363.683 li
114.991 363.148 li
115.551 362.614 li
116.101 362.096 li
116.661 361.561 li
117.211 361.028 li
117.771 360.494 li
118.331 359.959 li
118.881 359.425 li
119.441 358.891 li
119.991 358.373 li
120.551 357.838 li
121.101 357.304 li
121.661 356.77 li
122.211 356.236 li
122.771 356.409 li
123.321 356.582 li
123.881 356.754 li
124.431 356.912 li
124.991 357.084 li
125.551 357.257 li
126.101 357.43 li
126.661 357.603 li
127.211 357.776 li
127.771 357.933 li
128.321 358.105 li
128.881 358.278 li
129.431 358.451 li
129.991 358.624 li
130.541 358.781 li
131.101 358.954 li
131.661 345.931 li
132.211 367.374 li
.438 .273 .734 .039 cmyk
@
63.3403 379.314 mo
63.8903 378.921 li
64.4503 378.513 li
65.0103 378.12 li
65.5603 377.711 li
66.1203 377.303 li
66.6703 376.911 li
67.2303 376.502 li
67.7803 376.109 li
68.3403 375.701 li
68.8903 375.293 li
69.4503 374.899 li
70.0003 374.491 li
70.5603 374.099 li
71.1203 373.69 li
71.6703 373.282 li
72.2303 372.889 li
72.7803 372.481 li
73.3403 372.087 li
73.8903 371.679 li
74.4503 371.271 li
75.0003 370.878 li
75.5603 370.47 li
76.1103 370.077 li
76.6703 369.668 li
77.2203 369.26 li
77.7803 368.867 li
78.3403 368.459 li
78.8903 368.05 li
79.4503 367.658 li
80.0003 367.249 li
80.5603 366.856 li
81.1103 366.448 li
81.6703 366.04 li
82.2203 365.647 li
82.7803 365.238 li
83.3303 364.846 li
83.8903 364.437 li
84.4503 364.029 li
85.0003 363.636 li
85.5603 363.228 li
86.1103 362.835 li
86.6703 362.426 li
87.2203 362.018 li
87.7803 361.625 li
88.3303 361.217 li
88.8903 360.824 li
89.4403 360.416 li
90.0003 360.007 li
90.5503 359.614 li
91.1103 359.206 li
91.6703 358.813 li
92.2203 358.405 li
92.7803 357.996 li
93.3303 357.604 li
93.8903 357.195 li
94.4403 356.802 li
95.0003 356.394 li
95.5503 355.985 li
96.1103 355.593 li
96.6603 355.184 li
97.2203 354.792 li
97.7703 354.383 li
98.3303 353.975 li
98.8903 353.582 li
99.4403 353.173 li
100 352.781 li
100.55 352.372 li
101.11 351.964 li
101.66 351.571 li
102.22 351.163 li
102.77 350.77 li
103.33 350.361 li
103.88 349.953 li
104.44 349.56 li
105 349.152 li
105.55 348.759 li
106.11 348.351 li
106.66 347.942 li
107.22 347.549 li
107.77 347.141 li
108.33 346.748 li
108.88 346.34 li
109.44 345.931 li
109.99 345.539 li
110.55 345.13 li
111.1 344.737 li
111.66 344.329 li
112.22 343.92 li
112.77 343.528 li
113.33 343.119 li
113.88 342.727 li
114.44 342.318 li
114.99 343.009 li
115.55 343.685 li
116.1 344.376 li
116.66 345.067 li
117.21 345.743 li
117.77 346.434 li
118.33 347.125 li
118.88 347.801 li
119.44 348.492 li
119.99 349.183 li
120.55 349.858 li
121.1 350.55 li
121.66 351.241 li
122.21 351.932 li
122.77 352.608 li
123.32 353.299 li
123.88 353.99 li
124.43 354.666 li
124.99 355.357 li
125.55 356.048 li
126.1 356.724 li
126.66 357.415 li
127.21 358.106 li
127.77 358.782 li
128.32 359.473 li
128.88 360.164 li
129.43 360.839 li
129.99 361.531 li
130.54 362.222 li
131.1 362.897 li
.652 .027 .941 0 cmyk
@
66.6704 358.624 mo
67.2304 359.189 li
67.7804 359.755 li
68.3404 360.321 li
68.8904 360.886 li
69.4504 361.452 li
70.0004 362.017 li
70.5604 362.583 li
71.1204 363.148 li
71.6704 363.714 li
72.2304 364.295 li
72.7804 364.861 li
73.3404 365.426 li
73.8904 365.992 li
74.4504 366.557 li
75.0004 367.123 li
75.5604 367.688 li
76.1104 368.254 li
76.6704 368.819 li
77.2204 368.898 li
77.7804 368.961 li
78.3404 369.04 li
78.8904 369.103 li
79.4504 369.181 li
80.0004 369.259 li
80.5604 369.322 li
81.1104 369.401 li
81.6704 369.464 li
82.2204 369.542 li
82.7804 369.605 li
83.3304 369.684 li
83.8904 369.747 li
84.4504 369.825 li
85.0004 369.903 li
85.5604 369.966 li
86.1104 370.045 li
86.6704 370.108 li
87.2204 370.186 li
87.7804 370.249 li
88.3304 370.328 li
88.8904 370.406 li
89.4404 370.469 li
90.0004 370.547 li
90.5504 370.61 li
91.1104 370.689 li
91.6704 370.752 li
92.2204 370.186 li
92.7804 369.621 li
93.3304 369.055 li
93.8904 368.49 li
94.4404 367.924 li
95.0004 367.358 li
95.5504 366.793 li
96.1104 366.228 li
96.6604 365.662 li
97.2204 365.096 li
97.7704 364.515 li
98.3304 363.95 li
98.8904 363.384 li
99.4404 362.818 li
100 362.253 li
100.55 361.687 li
101.11 361.122 li
101.66 360.556 li
102.22 359.991 li
102.77 359.425 li
103.33 358.86 li
103.88 358.294 li
104.44 358.247 li
105 358.216 li
105.55 358.168 li
106.11 358.137 li
106.66 358.105 li
107.22 358.059 li
107.77 358.137 li
108.33 358.216 li
108.88 358.294 li
109.44 358.373 li
109.99 358.451 li
110.55 358.53 li
111.1 358.608 li
111.66 358.687 li
112.22 358.766 li
112.77 358.844 li
113.33 358.922 li
113.88 359.001 li
114.44 359.08 li
114.99 359.158 li
115.55 359.237 li
116.1 359.315 li
116.66 359.394 li
117.21 359.472 li
117.77 359.551 li
118.33 359.629 li
118.88 359.708 li
119.44 359.787 li
119.99 359.865 li
120.55 359.944 li
121.1 360.022 li
121.66 360.101 li
122.21 360.179 li
122.77 360.258 li
123.32 360.336 li
123.88 359.865 li
124.43 359.394 li
124.99 358.922 li
125.55 358.451 li
126.1 357.964 li
126.66 357.493 li
127.21 357.021 li
127.77 356.55 li
128.32 356.079 li
128.88 355.608 li
129.43 355.137 li
129.99 354.665 li
130.54 354.194 li
131.1 353.723 li
131.66 353.251 li
.469 .035 .531 0 cmyk
@
63.8906 371.694 mo
64.4506 371.569 li
65.0106 371.459 li
65.5606 371.348 li
66.1206 371.238 li
66.6706 371.129 li
67.2306 371.019 li
67.7806 370.893 li
68.3406 370.783 li
68.8906 370.673 li
69.4506 370.563 li
70.0006 370.453 li
70.5606 370.327 li
71.1206 370.217 li
71.6706 370.108 li
72.2306 369.997 li
72.7806 369.887 li
73.3406 369.777 li
73.8906 369.652 li
74.4506 369.542 li
75.0006 369.432 li
75.5606 369.322 li
76.1106 369.212 li
76.6706 369.086 li
77.2206 368.976 li
77.7806 368.866 li
78.3406 368.756 li
78.8906 368.647 li
79.4506 368.536 li
80.0006 368.411 li
80.5606 368.301 li
81.1106 368.191 li
81.6706 368.081 li
82.2206 367.971 li
82.7806 367.861 li
83.3306 368.096 li
83.8906 368.348 li
84.4506 368.584 li
85.0006 368.835 li
85.5606 369.086 li
86.1106 369.322 li
86.6706 369.573 li
87.2206 369.825 li
87.7806 370.06 li
88.3306 370.312 li
88.8906 370.547 li
89.4406 370.798 li
90.0006 371.05 li
90.5506 371.286 li
91.1106 371.537 li
91.6706 371.788 li
92.2206 372.024 li
92.7806 372.276 li
93.3306 372.511 li
93.8906 372.762 li
94.4406 373.014 li
95.0006 373.249 li
95.5506 373.501 li
96.1106 373.752 li
96.6606 373.987 li
97.2206 374.239 li
97.7706 374.475 li
98.3306 374.726 li
98.8906 374.977 li
99.4406 375.213 li
100.001 375.465 li
100.551 375.715 li
101.111 375.951 li
101.661 376.203 li
102.221 376.438 li
102.771 376.69 li
103.331 376.941 li
103.881 377.177 li
104.441 377.428 li
105.001 377.679 li
105.551 377.915 li
106.111 378.166 li
106.661 378.402 li
107.221 378.653 li
107.771 378.905 li
108.331 379.14 li
108.881 379.392 li
109.441 379.643 li
109.991 379.879 li
110.551 380.13 li
111.101 380.366 li
111.661 380.617 li
112.221 380.868 li
112.771 381.104 li
113.331 381.356 li
113.881 381.607 li
114.441 381.842 li
114.991 382.094 li
115.551 382.329 li
116.101 382.581 li
116.661 382.832 li
117.211 383.068 li
117.771 383.319 li
118.331 383.57 li
118.881 383.806 li
119.441 384.057 li
119.991 384.293 li
120.551 384.545 li
121.101 384.796 li
121.661 383.507 li
122.211 382.204 li
122.771 380.916 li
123.321 379.628 li
123.881 378.339 li
124.431 377.051 li
124.991 375.763 li
125.551 374.475 li
126.101 373.187 li
126.661 371.898 li
127.211 370.61 li
127.771 369.306 li
128.321 368.018 li
128.881 366.73 li
129.431 365.442 li
129.991 364.153 li
130.541 362.865 li
131.101 361.577 li
131.661 360.289 li
132.211 359.001 li
.793 .41 .07 0 cmyk
@
.5 lw
1 lc
10 ml
63.34 387.215 mo
132.21 387.215 li
132.21 333.74 li
63.34 333.74 li
cp
.746 .676 .668 .898 cmyk
@
.723 .664 .648 .777 cmyk
%ADOBeginSubsetFont: SAAAAA+Calibri-Bold Initial
ct_T42Dict begin
-0.492 -0.191 1.238 0.949
 256 array 0 1 255 {1 index exch /.notdef put} for  /SAAAAA+Calibri-Bold
Type42DictBegin
[<00010000000b000b000b000b6376742026f12f5c000000bc000005f46670
676da1ea42ac000006b000000913676c7966cab3a590000026000000165c
68656164c71fcad500000fc400000036686865610d9a06ca00000ffc0000
0024686d74784c37065a000010200000004c6c6f636135f23ca10000106c
000000286d6178700cb202cc00001094000000206e616d657a54def70000
10b4000000287072657011c2f8a6000010dc000015226764697200000000
00000000000000000000079e0000fe930000000000000000000000810081
009c00ab00b500ba00c100ca00d300f3010a0060008500bf00e300ea00f2
00fb010001070115011c0129000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe83056d
000d03c0000600170000fffaffe9fea9ffe90000050e000600170000fffa
ffe9fe93050e00170426000600170000fffaffe9ff12ffed050e00170426
000600170000fffaffe9fe93feb8fece060b0010050e0006001002cbfffa
fff001edfffa023f00060010ff36fffafff00287000600100000fffafff0
079efeaffe9f00000000000000000000000000700072007500780079007a
007b007d007e007f008300860087008800890085007f0086008b008c008d
008e008f0090009100920093009400950096009700980099009a009b009c
009d009e009f009200930094009b009c009e009e00960099009a009d009e
00a200a600a900ac00a200a300a400a500a700a800a900aa00ab00ac00ae
00a300a500a700a800aa00ab00ac00ad00ae00a000a100a300a600a700a9
00aa00ac00ad00af00af00b000b100b200b300b400b500af00af00b000b2
00b300b400b500b800c000b600b700b800b900ba00bb00bc00bd00be00bf
00c000c100c200b900ba00bc00bd00bf00c000c100c200b600b700b800b9
00ba00bb00bc00bd00be00bf00c000c100c200c000c100c200c300c400c5
00c600c700c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c7
00c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c500c800c900ca00cb00ce00cf00d000d1
00d200d300d400d500d600d700d900db00de00df00e000e200e300ec00d0
00d100d200d300d400d500d600d700d800d900da00db00dd00de00df00e0
00e100e300e500e900ec00ed00d100d300d400d500d800d900da00dc00e0
00e100e800d000d100d400d600e000e4010800f5010200fb00ff0108008f
009000960092009300990090009100970098009a009d00a400a600a700a8
00a900af009a00a200a300a700a900aa00ab00ac00ad00b000ad009b00aa
00ab00ad00b0009a00aa00ac00ad00ae00af00b100b900bb00bc00bd00be
00c100c200c300c400c500c600c700c800c900ca00cb00ce00b300b400b5
00b600b700b800bc00c200c500c800ca00cb00cd00ce00cf00d000c700b7
00b800b900bb00bc00be00c600c700c800c900cb00cf00d000b200b600b7
00c200c400c500c600c700cb00cc00cd00ce00cf00d000d100d400d500d7
00d800d900da00db00dc00de00df00e000e200e300e500e600d100d300d6
00d700d800da00db00dc00dd00de00df00e000e100e200e300e400e500d1
00d200d400d500da00db00dd00de00df00e000e100e200e600d200d300d4
00d700d800dd00de00e000e100e200e300e400e500e600d200da00e100e9
00ea00ec00e800e900ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e7
00e900ea00ec00ed00ee00ef00f500ee00ef00f000f100f200f300f400f5
00f600ee00f000f200ef00f000f100f200f300f400f500f600ee00ef00f0
00f100f200f300f400f500f600f700f700f800f900fa00fb00fc00fd00f7
00f800f900fa00fb00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff
010001010102010300fe010001010102010300fe00ff0100010101020103
01020103010401050106010701080109010a010c010d010e010f01100107
010401050106010701080109010a010b010d010e010f0110011101040105
0106010701080109010a010b010c010d010e010f01100111010401050106
01070109010e010f011201130114011501170118011a011b011c011d011e
011f01210122011201130114011501170119011b011c011d011e01200121
0123012401250113011401150116011701180119011a011b011c011d011f
01200117011c011d011e012001210129013001770129012b012e012f0130
01310134013501370139012b012d013001320134013a012e01300134013a
014240465f5e5d5c5b5a59585554535251504f4e4d4c4b4a494847464544
434241403f3e3d3c3b3a39383736352f2e2d2c2826252423221f18141110
0f0d0b0a090807060504030201002c4523466020b02660b004262348482d
2c452346236120b02661b004262348482d2c45234660b0206120b04660b0
04262348482d2c4523462361b0206020b02661b02061b004262348482d2c
45234660b0406120b06660b004262348482d2c4523462361b0406020b026
61b04061b004262348482d2c0110203c003c2d2c20452320b0cd442320b8
015a51582320b08d44235920b0ed51582320b04d44235920b00426515823
20b00d44235921212d2c20204518684420b001602045b04676688a456044
2d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101
283e01b0282370b10228453ab10200080d2d2c2045b00325456164b05051
5845441b2121592d2c2045b0004360442d2c01b00643b00743650a2d2c20
69b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0036159
2d2c8a03458a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b0
2b23442d2c4b525845441b2121592d2c01b005251023208af500b0016023
edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500ed
ec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c00b007
43b006430b2d2c21210c6423648bb84000622d2c21b08051580c6423648b
b82000621bb200402f2b59b002602d2c21b0c051580c6423648bb8155562
1bb200802f2b59b002602d2c0c6423648bb84000626023212d2c45234560
23456023456023766818b08062202d2cb00426b00426b00425b004254523
4520b003266062636820b0032661658a2344442d2c2045b0005458b04044
2045b04061441b2121592d2c45b1302f4523456160b0016069442d2c4b51
58b02f2370b01423421b2121592d2c4b515820b0032545695358441b2121
591b2121592d2c45b01443b0006063b0016069442d2cb02f45442d2c4523
20458a60442d2c45234560442d2c4b235158b90033ffe0b134201bb33300
34005944442d2cb0164358b00326458a586466b01f601b64b02060662058
1b21b04059b001615923586559b02923442310b029e01b2121212121592d
2cb0164358b004254564b020606620581b21b04059b0016123586559b029
2344b00425b00725082058021b0359b0052510b004252046b0042523423c
b0072510b006252046b00425b0016023423c2058011b0059b0052510b004
25b029e0b0072510b00625b029e0b00425b00725082058021b0359b00425
b003254348b00625b00325b0016043481b2159212121212121212d2cb016
4358b004254564b020606620581b21b04059b0016123581b6559b0292344
b00525b00825082058021b0359b0042510b005252046b0042523423cb004
25b0072508b0072510b006252046b00425b0016023423c2058011b0059b0
042510b00525b029e0b02920456544b0072510b00625b029e0b00525b008
25082058021b0359b00525b003254348b00425b0072508b00625b00325b0
016043481b2159212121212121212d2c02b00425202046b004252342b005
2508b003254548212121212d2c02b0032520b0042508b002254348212121
2d2c452320451820b00050205823652359236820b040505821b040592358
65598a60442d2c4b53234b515a5820458a60441b2121592d2c4b54582045
8a60441b2121592d2c4b53234b515a58381b2121592d2cb000214b545838
1b2121592d2cb002435458b0462b1b21212121592d2cb002435458b0472b
1b212121592d2cb002435458b0482b1b21212121592d2cb002435458b049
2b1b212121592d2c208a08234b538a4b515a5823381b2121592d2c0020b2
00400325b0062649618b3812342d2c014623466023466123201020468a61
b8ff80628ab140408a704560683a2d2c208a2349648a2353583c1b21592d
2c4b52587d1b7a592d2cb012004b014b54422d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b2020202436042b12401885458b2022002436042004b014b
5258b2020802436042591bb940000080885458b202040243604259b94000
008063b80100885458b202080243604259b94000010063b80200885458b2
02100243604259b94000020063b80400885458b202400243604259595959
592d2c451868234b51582320452064b04050587c59688a6059442d2cb000
16b00225b0022501b001233e00b002233eb10102060cb00a236542b00b23
4201b001233f00b002233fb10102060cb006236542b0072342b00116012d
2c20b82000628a6023622d2cb0072558001b0159b0042510b00325b00225
20b8ffff545821cd1bed5921b006255cb006255a58b0092b5920b005254a
b0042547b004254760b0062547b0806361b00225b0005558b00325b00725
496359b0082558001b0159b00425b0062549b009255cb009255a58b0092b
59b0072546b0806361b0032520b0005558631b2159612320b0005558b080
631b21b08059b0592bb006255c586959b00425202010b00048233ab00626
58001b0159b0052658b003252f598a12233221212d2cb00625b00a2587b0
0625b009254ab0005358b00625b00a251bb00925b0072559b00225b00225
070cb005256323b00625636020b94000040063535821b00426b00426b00a
1bb94000040063655158b0042665b0042665b00a1bb00426b00426b000b0
0325b003250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507
595920b0005558b00525b0052587b00725b007250bb0092510b00b25b009
2620b8ffff545821cd1bed59b00525b0052507b00825b00b254923b00625
b0062587b00a2510b00b25c15920b00051b800522378b00161b00225b007
25b0072507b00a25b00d254961b08062b00525b005250bb00a252338b006
25b0062587b00825b008250bb00a2510b00b25c4b00625b0062507b00925
b00c2549b0032554b8ffa723792121212121212121212121212d2c23b000
5458b9400000001bb900004000598ab0005458b9400000001bb900004000
59b05b2b2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a
8a080d8ab0005458b9400000001bb90000400059b05b2b2d2cb00426b004
26080db00426b00426080db05b2b2d000001000000020000e2d05b145f0f
3cf50019080000000000bbeb7ccc00000000c33ba7e6fc0ffe7309ea079e
00010009000200000000000000010000079efdda00000a7bfc0ffe6109ea
000100000000000000000000000000000013040e000004d90017043c004f
0362008d06fe008d03d3003303f30047044b007e03590048044b004b0407
004a01f7006b044b007e044d0048044b007e02d8007e03310049044b0079
03ca00160000009e014d01e0022f02f30373045f05010597063306ff0754
07db084e08f0096f0a420abe0b2e00010000001300ad000700ac00070002
0010002f006000000c1c0141000400010000000100120001000000000006
00130000415754545a4a2b43616c696272692d426f6c64000000b10903b8
02f9b21e1d1fb802f8b21e2b1fb802f7b21e2c1fb802f6b21e2c1fb802f5
b21e2c1fb802f4b21e2b1fb802f3b21e2c1fb802f2b21e2c1fb802f1b21e
2c1fb802f0b21e2c1fb802efb21e2c1fb802eeb21e2b1fb802edb21e2b1f
b802ecb21e2c1fb802ebb21e2c1fb802eab21e2c1fb802e9b21e2c1fb802
e8b21e2c1fb802e7b21e2c1fb802e6b21e2c1fb802e5b21e2c1fb802e4b2
1e091fb802e3b21e2c1fb802e2b21e2c1fb802e1b21d121fb802e0b21d19
1fb802dfb21d2f1fb802deb21d2f1fb802ddb21d2f1fb802dcb21d2f1fb8
02dbb21d191fb802dab21d2f1fb802d9b21d2f1fb802d8b21d2f1fb802d7
b21d2f1fb802d6b21d2f1fb802d5b21d2f1fb802d4b21d2f1fb802d3b21d
2f1fb802d2b21d2f1fb802d1b21d2f1fb802d0b21d2f1fb802cfb21d2f1f
b802ceb21d121fb802cdb21d121fb802ccb21d121fb802cbb21d121fb802
cab21d191fb802c9b21d2f1fb802c8b21d2f1fb802c7b21d2f1fb802c6b2
1d2f1fb802c5b21d2f1fb802c4b21d2f1fb802c3b21d2f1fb802c2b21d2f
1fb802c1b21d2f1fb802c0b21d2f1fb802bfb21d121fb802beb21d121fb8
02bdb21d2f1fb802bcb21d2f1fb802bbb21d2f1fb802bab21d2f1fb802b9
b21d2f1fb802b8b21d2f1fb802b7b21d2f1fb802b6b21d2f1fb802b5b21d
2f1fb802b4b21d2f1fb802b3b21d2f1fb802b2b21d2f1fb802b1b21c321f
b802b0b21c321fb802afb21c331fb802aeb21c331fb802adb21c331fb802
acb21c331fb802abb21c331fb802aab21c311fb802a9b21c311fb802a8b2
1c321fb802a7b21c321fb802a6b21c321fb802a5b21c321fb802a4b21c32
1fb802a3b21c321fb802a2b21c331fb802a1b21c331fb802a0b21c331fb8
029fb21c331fb8029eb21c331fb8029db21c331fb8029cb21c311fb8029b
b21c311fb8029ab21c321fb80299b21c321fb80298b21c321fb80297b21c
321fb80296b21c321fb80295b21c331fb80294b21c331fb80293b21c331f
b80292b21c331fb80291b21c331fb80290b21c331fb8028fb21c331fb802
8eb21c311fb8028db21c321fb8028cb21c321fb8028bb21c321fb8028ab2
1c321fb80289b21c321fb80288b21c331fb80287b21c331fb80286b21c33
1fb80285b21c331fb80284b21c331fb80283b21c331fb80282b21b341fb8
0281b21b341fb80280b21b341fb8027fb21b341fb8027eb21b341fb8027d
b21b341fb8027cb21b341fb8027bb21b341fb8027ab21b341fb80279b21b
341fb80278b21b341fb80277b21b341fb80276b21b341fb80275b21b341f
b80274b21b341fb80273b21b341fb80272b21b341fb80271b21b341fb802
70b21b341fb8026fb21a351fb8026eb21a351fb8026db21a351fb8026cb2
1a351fb8026bb21a351fb8026ab21a351fb80269b21a351fb80268b21a35
1fb80267b21a351fb80266b21a351fb80265b21a351fb80264b21a351fb8
0263b21a351fb80262b21a351fb80261b21a351fb80260b21a351fb8025f
b21a351fb8025eb21a351fb8025db21a351fb8025cb21a351fb8025bb21a
351fb8025ab21a351fb80259b219371fb80258b219371fb80257b219371f
b80256b219371fb80255b219371fb80254b219371fb80253b219371fb802
52b219371fb80251b219371fb80250b219371fb8024fb219371fb8024eb2
19371fb8024db219371fb8024cb219371fb8024bb219371fb8024ab21937
1fb80249b219371fb80248b219371fb80247b219371fb80246b219371fb8
0245b219371fb80244b219371fb80243b219371fb80242b219371fb80241
b219371fb80240b219371fb8023fb219371fb8023eb219371fb8023db219
371fb8023cb219371fb8023bb219371fb8023ab219371fb80239b218391f
b80238b218391fb80237b218391fb80236b218391fb80235b218391fb802
34b218391fb80233b218391fb80232b218391fb80231b218391fb80230b2
18391fb8022fb218391fb8022eb218391fb8022db218391fb8022cb21839
1fb8022bb218391fb8022ab218391fb80229b218391fb80228b218391fb8
0227b218391fb80226b218391fb80225b2173b1fb80224b2173b1fb80223
b217321fb80222b2173a1fb80221b2173b1fb80220b2173b1fb8021fb217
3b1fb8021eb2173b1fb8021db2173b1fb8021cb2173b1fb8021bb2173b1f
b8021ab2173b1fb80219b2173b1fb80218b2173b1fb80217b2173b1fb802
16b2173b1fb80215b217321fb80214b2173a1fb80213b2173b1fb80212b2
173b1fb80211b2173b1fb80210b2173b1fb8020fb2173b1fb8020eb2173b
1fb8020db2173b1fb8020cb2173b1fb8020bb2173b1fb8020ab2173b1fb8
0209b217321fb80208b217321fb80207b2173b1fb80206b2173b1fb80205
b2173b1fb80204b2173b1fb80203b2173b1fb80202b2173b1fb80201b217
3b1fb80200b2173b1fb801ffb2173b1fb801feb2173b1fb801fdb2173b1f
b801fcb2173b1fb801fbb2173b1fb801fab2173b1fb801f9b2173b1fb801
f8b2173b1fb801f7b217321fb801f6b2173a1fb801f5b2173b1fb801f4b2
173b1fb801f3b2173b1fb801f2b2173b1fb801f1b2173b1fb801f0b2173b
1fb801efb2173b1fb801eeb2173b1fb801edb2173b1fb801ecb2173b1fb8
01ebb2173b1fb801eab2173b1fb801e9b2173b1fb801e8b2173b1fb801e7
b217321fb801e6b216231fb801e5b216231fb801e4b216371fb801e3b216
371fb801e2b216381fb801e1b216381fb801e0b216431fb801dfb216441f
b801deb216441fb801ddb216441fb801dcb216451fb801dbb216461fb801
dab216461fb801d9b216461fb801d8b216231fb801d7b216231fb801d6b2
16381fb801d5b216431fb801d4b216431fb801d3b216431fb801d2b21644
1fb801d1b216461fb801d0b216461fb801cfb216461fb801ceb216461fb8
01cdb216461fb801ccb216461fb801cbb216431fb801cab216231fb801c9
b216231fb801c8b216371fb801c7b216371fb801c6b216381fb801c5b216
421fb801c4b216431fb801c3b216441fb801c2b216451fb801c1b216461f
b801c0b216461fb801bfb216461fb801beb216461fb801bdb216461fb801
bcb216461fb801bbb216461fb801bab216371fb801b9b216381fb801b8b2
16421fb801b7b216431fb801b6b216431fb801b5b216431fb801b4b21644
1fb801b3b216441fb801b2b216441fb801b1b216451fb801b0b216451fb8
01afb216451fb801aeb216461fb801adb216461fb801acb216461fb801ab
b216461fb801aab216461fb801a9b215341fb801a8b215411fb801a7b215
411fb801a6b2154d1fb801a5b2154e1fb801a4b2154f1fb801a3b215521f
b801a2b215401fb801a1b2154d1fb801a0b2154e1fb8019fb2154f1fb801
9eb215521fb8019db2154d1fb8019cb215401fb8019bb2154d1fb8019ab2
154e1fb80199b2154e1fb80198b2154f1fb80197b2154f1fb80196b21550
1fb80195b215521fb80194b215521fb80193b215521fb80192b215411fb8
0191b2154f1fb80190b215501fb8018fb215501fb8018eb215511fb8018d
b215521fb8018cb215521fb8018bb215521fb8018ab214581fb80189b214
591fb80188b2145c1fb80187b2145d1fb80186b2144a1fb80185b2145b1f
b80184b2145c1fb80183b214591fb80182b2145d1fb8018140af145d1ff0
0f451fef0e481fe00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561fb20b56
1fb10b561fb00b561faf0b561fae0b561fad0b561fac0b561fab0b561faa
0b561fa90b561fa80b561fa70b561fa60b561fa50b561fa40b561fa30b56
1fa20b561fa10b561fa00b561f9f0b561f9e0a681f9a0a681f990a681f98
0a681f970a681f960a681f950a681f940a681f930a681f920a681f910a68
1f9009681f8f09681f8e09681f8d09681f8c09681fb8017fb213321fb801
7eb212371fb80174b212371fb80173b211421fb80172b211421fb80171b2
11421fb80170b211421fb8016fb211421fb8016eb211421fb8016db21142
1fb8016cb211421fb8016bb211421fb8016ab211421fb8013cb211421fb8
013bb210421fb8013ab210421fb80139b210421fb80138b210421fb80137
b210421fb80136b210421fb80135b210421fb80134b210421fb80133b210
421fb80132b20f451fb80131b20f451fb80130b20f451fb80112b20f451f
b80111b20f451fb80110b20f451fb8010fb20f451fb8010eb20f451fb801
0db20e481fb8010cb20e481fb8010bb20e481fb8010ab20e481fb80109b2
0e481fb80108b20e481fb80107b20d4a1fb80106405b0d4a1fee0d4a1fed
0d4a1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf0c4e1fde0c4e1fdd0c4e
1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd80b561fd70b561fbe0b561fbd
0b561fbc0b561fbb0b561fba0b561f9d0a681f9c0a681fb80180b213321f
b8017ab211401fb80179b211421fb80178b211421fb80177b211421fb801
76b211421fb80175b211421fb80143b211421fb80142b210421fb80141b2
10421fb80140b210421fb8013fb210421fb8013eb210421fb8013db20f45
1fb80115b20f451fb80114b20f451fb80113b20f451fb8017bb213321fb8
0153b212371fb80152b211401fb80151b211401fb80150b211401fb8014f
b211401fb8014eb211401fb8014db211401fb8014cb211401fb8014bb211
401fb8014ab211401fb80149b211401fb80148b211401fb80147b211401f
b80146b211401fb80145b211401fb80144b211401fb80122b211401fb801
21b210421fb80120b210421fb8011fb210421fb8011eb210421fb8011db2
10421fb8011cb210421fb8011bb210421fb8011ab210421fb80119b21042
1fb80118b20f451fb80117b20f451fb80116409b0f451ffd0f451ffc0f45
1ffb0f451ffa0f451ff90e481ff80e481ff70e481ff60e481ff50e481ff4
0e481ff30d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a1fe50d4a1fe40d4a
1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb0c4e1fca0c4e1fc9
0c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e1fc30c4e1fb80c4e
1fb70b561fb60b561fb50b561fb40b561fb30b561f9b0a681fb8017db212
371fb8017cb212371fb80169b2112e1fb80168b2112e1fb80167b211401f
b80166b211401fb80165b211401fb80164b211401fb80163b211401fb801
62b211401fb80161b211401fb80160b211401fb8015fb211401fb8015eb2
11401fb8015db211401fb8015cb211401fb8015bb211401fb8015ab21140
1fb80159b211401fb80158b211401fb80157b211401fb80156b211401fb8
0155b211401fb80154b211401fb8012fb211401fb8012eb210421fb8012d
b210421fb8012cb210421fb8012bb210421fb8012ab210421fb80129b210
421fb80128b210421fb80127b210421fb80126b210421fb80125b20f451f
b80124b20f451fb80123b20f451fb80105b20f451fb80104b20f451fb801
03b20f451fb80102b20f451fb80101b20e481fb8010040a20e481fff0e48
1ffe0e481fe80c4e1fd60c4e1fd50c4e1fd40c4e1fd30c4e1fd20c4e1fd1
0c4e1fd00c4e1fcf0c4e1fce0b561fb90b561f8503251f84032e1f83012e
1f8248805581ab80557f487d557eab7d550b7d3b7d4b7d030b7d1b7d4b7d
7b7dab7ddb7d067c487a557bab7a55047a147a020a7948775578ab77550b
77010c764875555475e475f4750314755475647574759475d475e47507a4
75b475c47503b8ffc0401275383b46807590750214757475020075010fb8
ffc04021750b0e467448725573ab725504723472023be47201d072010220
72014072507202b8ffc0b372242846b8ffc040ff72161a46007220723072
0371486f5570ab6f556e486d55cf6d016b032e1f6a03251f692e675568ab
6755662e645565ab6455632e6255612e60555f2e5d555eab5d555c2e5a55
5bab5a55592e58555703251f562e545555ab5455532e515552ab51554f2e
4e554e03251f4d2e4b554cab4b554a2e485549ab4855504801472e465545
03361f001f01001e01001e701e801ef01e040b601d701d02701de01df01d
03701cf01c027f1b010f1a7f1a8f1a030f1a8f1a020f1a8f1a020f191f19
8f199f19af19050f198f199f19030c7012801202701180110230114011d0
11e011040011a011020f8f0f9f0faf0f034f0f5f0fef0fff0f04af0f01af
0ebf0ecf0e4060034f0e5f0e6f0e030f0eaf0ebf0e0310400e2e31460f0d
1f0d2f0d033c2f0d3f0d4f0d038f0d01400d2e3246400d2427463f0c4f0c
5f0c039f0c01400c262946ef0aff0a02400a242746ef09ff0902ff090100
03012001010001100120010308b8ffc0b401151f4603bc01000100000500
010190b154532b2b4bb807ff524bb009505bb00188b02553b00188b04051
5ab00688b000555a5b58b101018e59b101024354b0144b515a58b101018e
59858d8d001d424bb01d5358b203a0a01d42594bb0805358b20340401d42
594bb0ff5358b20300001d42592b5e73757373742b732b73742b2b73745e
732b5e7374757374755e73747573015e7374737475757473745e73747300
2b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b
2b732b2b73755f75755e732b2b2b5e7373732b7374752b5e732b2b5e732b
2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b185f5e000000>
[5725 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 1510 5 <00010033000003a8050e00290083b10102435558b9001002e5b620162016
200026b802eab2092211b8ffe8b40b0f014c11b80155400a1b510c27180b
0f014c27b80157b240055400183f1a4ded2b323fed2b32012fedcd39392f
2f10ed31301bb12211b8ffe8b40b0f014c11b80155400a1b510c27180b0f
014c27b80157b240055400183f1a4ded2b323fed2b3231305925140e0223
2122263535343e02370121222e0235343e02332132161515140e02070121
321603a8050a0f09fd05282b050c171101f6fe0e0c110b05050b110c02cb
2927050d1611fe12021d1314681d28190a2e2c2c142122281c031c0b1828
1c1e29190a2a26311b2725271bfcef30>SAAAAA+Calibri-Bold AddT42Char 
1 3582 11 <0002006bfffa018d054e001500210045b10102435558bf001602bf001c00
150260000a001f017bb540191049054c00183f3fd61a4ded012fedd4ed31
301bb9001f017bb540191049054c00183f3fd61a4ded31305925140e0223
222e023511343e0233321e0215131406232226353436333216017a0c1d30
2525301d0c0c1d302525301d0c133e54553b3d55543c220a0f0a05050a0f
0a037a0a0f0b06060b0f0a01304c3a38494c3b39>SAAAAA+Calibri-Bold AddT42Char 
1 3752 12 <0001007efffa03d203d700320081b10102435558b12a13bb0260001e000b
025fb2001e10b8fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d
4a2a192449194c054c00183f3f3f12393f1a4ded2b2b012fd4ed10ed3931
301bb90010fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d4a2a
192449194c054c00183f3f3f12393f1a4ded2b2b31305925140e0223222e
023511342e022322060711140e0223222e023511343e0233321e02151536
3633321e021503d20c1c312425311c0c132439263062350c1d302525301d
0c0a1a291f202a170a4a99535b7d4d22220a0f0a05050a0f0a01fd414a35
1d4643fdaf0a0f0a05050a0f0a037c0a0f0a05050a0f0a6750503c678a61
>SAAAAA+Calibri-Bold AddT42Char 
1 2562 8 <00010048ffea032103d60035009db10102435558b21c0027be0274000e00
18011f001f0024ffe8b40b0f014c24b8011fb2134a04ba01480031ffc040
0b0b014d312c180b0f014c2cb80146b240094d00183f1a4dfd2bd42bed3f
fd2bd4ed012fedc43231301bbc0018011f001f0024ffe8b40b0f014c24b8
011fb2134a04ba01480031ffc0400b0b014d312c180b0f014c2cb80146b2
40094d00183f1a4dfd2bd42bed3ffd2bd4ed31305925140e0623222e0235
343e0233321e0615140623222e0223220615141e0233323e0233321e0203
21030507183a4a572e679f6c374378a462284d4335160905031410112634
483262681a334d33344b38260d090c0704b01a23180f17211a10407db474
86c3803e0e181e160f1823193a2f1c221c9792486e4a251f261f0a1b2a00
>SAAAAA+Calibri-Bold AddT42Char 
1 1118 4 <0001008dfffa0671050e003c00d9b10102435558400b0d3030172f2f0a2e
18181ab80264b424310c0c0ab80264b700243651190c0b18bb012d004000
2efff0b41023024c31b8fff040201023024c17101023024c0d101023024c
0d172f30312e061f28511f551255055500183f3f3f3f1217392b2b2b2b1a
4ded3232323f012fd4ed32113310ed32113311393d2f3333113331301bb5
3651190c0b18bb012d0040002efff0b41023024c31b8fff040201023024c
17101023024c0d101023024c0d172f30312e061f28511f55125505550018
3f3f3f3f1217392b2b2b2b1a4ded3232323f31305925140e0223222e0235
1123010e0323222e0227012311140e0223222e02351134363333321e0217
0133013e033333321e021506710b1d302524301c0c02fe8904121f302222
301f1203fe96020b1e2f2524301d0b362dac2e4230200c01180401220d1f
293825b11b27190d240a100a06060a100a041dfbe40d110a03050b100b04
1cfbe30a100a06060a100a048133360f23392afcfd03012a3a240f0e1b27
1900>SAAAAA+Calibri-Bold AddT42Char 
1 3174 10 <0002004affe903b603d7002b00340105b10102435558b31313212cb80243
b22b3404b80272400a21032c132c021b2cc304b8ffc040170d014d000410
04024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ffe84020
0d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d09f940
1c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed5e5d
012fed32dded12392f31301b4009032c132c021b2cc304b8ffc040170d01
4d00041004024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8
ffe840200d014d2fe4264a18f6000e100e0211030e09180c014d09180f01
4d09f9401c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d
2bed5e5d3130590114062321141e0233323e0233321e0215140e0623222e
0235343e0233321e021527362623220e020703b62924fde11b3b5d414264
49300f090c08030204080d3a5a744277b3783b3e76a96a709f6630f4035b
5f30472f190201fa2e2c395d412213171307122119161f160f0e1817113c
7aba7d77bf85464275a05e206a79243d532f>SAAAAA+Calibri-Bold AddT42Char 
1 4576 15 <0001007efffa02bb03d700330070b10102435558b1260fb80260400c001a
0f0a1f0a2f0a030d030ab8ffe8b30b014d0ab80153400a402b4a260f1520
49154c00183f3f1239393f1a4ded2b5f5e5d012fc4ed3931301bb9000aff
e8b30b014d0ab80153400a402b4a260f152049154c00183f3f1239393f1a
4ded2b31305901140e0223222e0223220e020711140e0223222e02351134
3e0233321e0215153e0333321e0602bb04080d0a0814191e12152a2d311c
0c1d302525301d0c0a1a291f202a170a233e38381c0d1e20180b05040203
4b242e1a0a07080711243c2cfdd40a0f0a05050a0f0a037c0a0f0a05050a
0f0a6f3241260f0307090a0c152a>SAAAAA+Calibri-Bold AddT42Char 
1 5252 17 <00010079ffe903cc03c60032006bb10102435558b10b27bb025e0000001f
025f400f132d49270b05194924180b0f014c24b8014db4400e4d054c0018
3f3f1a4ded2b3f1239393f012fedd4ed3931301b400e2d49270b05194924
180b0f014c24b8014db4400e4d054c00183f3f1a4ded2b3f1239393f3130
5925140e0223222e023535060623222e023511343e0233321e021511141e
023332363711343e0233321e021503cc0a19291f2129180a4a99525c7d4d
210b1d312425301d0c122539263061370b1d302525301c0c220a0f0a0505
0a0f0a6750503c68896602220a0f0a05050a0f0afe08464a351d46430251
0a0f0a05050a0f0a>SAAAAA+Calibri-Bold AddT42Char 
1 5500 18 <00010016fe9503b403c600240068b10102435558b60109090e001a1bb802
42b640241a200a1a18b80273400f400e1a1f49190a13490a4b044f004b00
183f3f3f3f12393f01192f18d41a4ded12391a10dd1aed123912392fcd31
301b400c1f49190a13490a4b044f004b00183f3f3f3f12393f3130592103
060623222e023713262627012634363633321e02171333133e0233321616
140702836c09504d2830180207770d1505fecd0d18392f2b321c0e07d203
c006132c372b391b08fec4191607101811012b06190e033423251508030c
1917fdab02611a11080816251900>SAAAAA+Calibri-Bold AddT42Char 
1 960 3 <0001008d000003540514001a004bb10102435558b900150294400b00090f
5215180b0f014c15b8015db240065400183f1a4ded2b3f012fcded31301b
40090f5215180b0f014c15b8015db240065400183f1a4ded2b3f31305925
140e02232122263511343e0233321e02151121321e020354050a0f0afdaf
212d0d1e332627321e0d01970a0f0a056e1e291b0c272c04970a100a0606
0a100afbef0b1929>SAAAAA+Calibri-Bold AddT42Char 
1 1766 6 <00020047ffe9037603d7003300400129b10102435558b2091734b8025bb4
002727003ab80245401011031701f3170117b80c3401fc340134b8ffc040
090c0d014c34342e412ab80118401be02201037d228d2202402250226022
030f221f22020c042222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a
3db8ffe8400910014d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f
5f5e5d5d5d5f5ded1112392f2b5d71ed5d71012fedc4392f10ed32393130
1b400f031701f3170117b80c3401fc340134b8ffc040090c0d014c34342e
412ab80118401be02201037d228d2202402250226022030f221f22020c04
2222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a3db8ffe840091001
4d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f5f5e5d5d5d5f5ded
1112392f2b5d71ed5d7131305925140606232226263535060623222e0235
343e02333335342e0223220e0223222e0235343e0433321e02150723220e
02151416333236370376142b2a2d2911378d56477757303d79b477571127
41303f634c33100b110b060a1c465e6f3b6995602cf7603d563619473f35
592e1f0e100707100e473b4225496c484e734b24362a3f2a141c221c0e1a
26171f241d231e132955865cda122433213840363400>SAAAAA+Calibri-Bold AddT42Char 
1 2862 9 <0002004bffe903cc056d002600390095b10102435558b20b1b39bb025e00
00002f0272400a1321460b39271b040e2ab8ffe8b40b0f014c2ab8014940
09184a34180b0f014c34b80149b4400e4d054c00183f3f1a4ded2b3fed2b
1217393f012fedd4ed323931301b400921460b39271b040e2ab8ffe8b40b
0f014c2ab801494009184a34180b0f014c34b80149b4400e4d054c00183f
3f1a4ded2b3fed2b1217393f31305925140e0223222e023535060623222e
0235343e023332161711343e0233321e021503262623220e0215141e0233
323e023703cc0a18291e2028190b45975c668d59283362925f4b7a3c0b1d
302525301c0cfa36633631472b15122944341a31333620220b0f0a04040a
0f0b634a524f86b36377be86483d3b01e30a100b06060b100afd34444831
526535386a53320f22372800>SAAAAA+Calibri-Bold AddT42Char 
1 666 2 <0001004fffeb040c05230039008bb10102435558b21c002bbe02c7000e00
18016100210026ffe8b40b0f014c26b80160b2135304b8015ab73530180b
0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed012fedd4c4
31301bbc0018016100210026ffe8b40b0f014c26b80160b2135304b8015a
b73530180b0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed
31305925140e0623222e02353412363633321e0615140e0223222e022322
0e0215141e0233323e0233321e02040c03060a163f5b754485d69650589e
dd85366455441b0a0603040a0e090f2e4965464d79552c2f577b4d466649
2f0d0a0c0804c4192319121724211652a3f4a2a50100ae5a121d261b121c
261c1e2a1a0c232b233f75a66872a76c3521282008182b00>SAAAAA+Calibri-Bold AddT42Char 
1 4022 13 <00020048ffe9040403d7001300270071b10102435558bf00140275000000
1e0275000a0019ffe8b40b0f014c19b8011a40090f4a23180b0f014c23b8
011cb240054d00183f1a4ded2b3fed2b012fedd4ed31301bb90019ffe8b4
0b0f014c19b8011a40090f4a23180b0f014c23b8011cb240054d00183f1a
4ded2b3fed2b31305901140e0223222e0235343e0233321e0205342e0223
220e0215141e0233323e0204043c7ab87b77b074383d7ab77b78b07338fe
fd1532533f3854361b1631543e3954361a01e972bc884a427eb87672bd87
4a417eb881426f522e294f6f47426f522d294e6f>SAAAAA+Calibri-Bold AddT42Char 
1 4252 14 <0002007efe95040003d7002a003d0096b10102435558b221360abb026000
15002b0285400900150a363521040530b8ffe8b40b0f014c30b8014b400d
264a1b49104f39180b0f014c39b8014ab240054d00183f1a4ded2b3f3f3f
ed2b121739012fd4ed10ed323931301bb60a363521040530b8ffe8b40b0f
014c30b8014b400d264a1b49104f39180b0f014c39b8014ab240054d0018
3f1a4ded2b3f3f3fed2b12173931305901140e0223222e022711140e0223
222e023511343e0233321e0215153e0333321e0205342e0223220e020711
161633323e0204003362925e27413d3c200c1d302525301d0c0a19291f1e
29190a274b4e532f628a5728fefa11294332193133361e35603431452c15
01ed77bf86480f1f2e1ffe5c0a100b06060b100a04de0a0f0a05050a0f0a
69283d29144d86b277396952310f223628feda4349325166>SAAAAA+Calibri-Bold AddT42Char 
1 316 1 <00020017fffa04c305140022002600e1b10102435558b90024ffe8b40b0f
014c23b8ffe8401e0b0f014c250c0d23180d0016010e16260b0a23220a00
2004230111232625b8012a401e400b000c0112030c0c271d2423231e0a0d
160023221807121d521255055500183f3f3f1217393811331112392f5f5e
5d331a4ded3201192f5e5d1a18cd32337d87c4c40118c45e5d32337d87c4
c43130002b2b1bb90024ffe8b40b0f014c23b8ffe8b50b0f014c2625b801
2a401e400b000c0112030c0c271d2423231e0a0d160023221807121d5212
55055500183f3f3f1217393811331112392f5f5e5d331a4ded3231302b2b
59251616060623222e02270321070e03232226263637013e0333321e0217
0723032104b10c0616383133391e0c0457fe1a52040d1d352b2e3414060c
018f0610233e333b46271106c201b7016f62242a15050309100d0104fd0e
130b0406172a23047c11150b03030b1613c6fdda>SAAAAA+Calibri-Bold AddT42Char 
1 4830 16 <00010049ffe902f203d7004900e9b10102435558b90041022eb524322432
0c1bb802444022000c042e012ee4370b0a010ae71137400b014d10372037
020337113711160f3c013cb8fff0401b0b0f014c3ce4411b05294a16100c
0d014c001601100416f240054d00183f1a4ded5f5e5d2b3f123939ed2b5d
1139392f2f5f5d2b10ed5d10ed5d012fd4ed1239392f2fed31301b402004
2e012ee4370b0a010ae71137400b014d10372037020337113711160f3c01
3cb8fff0401b0b0f014c3ce4411b05294a16100c0d014c001601100416f2
40054d00183f1a4ded5f5e5d2b3f123939ed2b5d1139392f2f5f5d2b10ed
5d10ed5d31305901140e0223222e0435343e0233321e0233323e0235342e
0635343e0233321e0615140e0223222e0223220e0215141e0602f239688e
53325b4830160c04080c090b2b40553622352714253d4d514d3d25325e87
542a4f402c1308040303070c080926394b3022322010263e4f514f3e2601
1e4c744e270f1718152d2c1d231507191e1a0e1a281a1e2b201c222c405a
3f406b4c2a0c12150f0f151f171b2214071518150e1a23141f2a201c212c
4059>SAAAAA+Calibri-Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>SAAAAA+Calibri-Bold AddT42Char 
SAAAAA+Calibri-Bold /CharStrings get begin
/g5 5 def
/g11 11 def
/g12 12 def
/g8 8 def
/g4 4 def
/g10 10 def
/g15 15 def
/g17 17 def
/g18 18 def
/g3 3 def
/g6 6 def
/g9 9 def
/g2 2 def
/g13 13 def
/g14 14 def
/g1 1 def
/g16 16 def
end
SAAAAA+Calibri-Bold /Encoding get
dup 33 /g5 put
dup 34 /g11 put
dup 35 /g12 put
dup 36 /g8 put
dup 37 /g4 put
dup 38 /g10 put
dup 39 /g15 put
dup 40 /g17 put
dup 41 /g18 put
dup 42 /g3 put
dup 43 /g6 put
dup 44 /g9 put
dup 45 /g2 put
dup 46 /g13 put
dup 47 /g14 put
dup 48 /g1 put
dup 49 /g16 put
pop
end
%ADOEndSubsetFont
/HFKGMA+Calibri-Bold /SAAAAA+Calibri-Bold findfont ct_VMDictPut/HFKGMA+Calibri-Bold*1 [33{/.notdef}rp /g5 /g11 /g12 /g8 /g4 /g10 /g15 /g17 /g18 /g3 /g6 /g9 /g2 /g13 /g14 /g1 /g16 206{/.notdef}rp]HFKGMA+Calibri-Bold nfHFKGMA+Calibri-Bold*1 [8 0 0 -8 0 0 ]msf67.3403 342.272 mo(!"#$)[3.82397 1.96802 4.29602 0 ]xsh67.3403 191.888 mo(%&'$\('\))[6.99194 4.02405 2.83997 3.34399 4.29602 2.83997 0 ]xsh67.3403 81.4885 mo(*&+,)[3.38403 4.02405 3.95203 0 ]xsh67.3403 286.68 mo(-.//&')[4.23206 4.30396 4.29602 4.29602 4.02405 0 ]xsh67.3403 136.584 mo(0'1&#"$)[4.84802 2.83997 3.19202 4.02405 4.29602 1.96802 0 ]xsh0 lc
79.4507 384.993 mo
79.4507 387.216 li
.691 .629 .617 .582 cmyk
@
96.1104 384.993 mo
96.1104 387.216 li
@
112.771 384.993 mo
112.771 387.216 li
@
129.431 384.993 mo
129.431 387.216 li
@
.652 .578 .566 .363 cmyk
%ADOBeginSubsetFont: WAAAAA+Calibri Initial
ct_T42Dict begin
-0.473 -0.191 1.211 0.949
 256 array 0 1 255 {1 index exch /.notdef put} for  /WAAAAA+Calibri
Type42DictBegin
[<00010000000b000b000b000b63767420af93b7f9000000bc0000050a6670
676df6f64d0c000005c80000091a676c796612ae800d0000348000002da2
68656164a22a665100000ee400000036686865610d8806dd00000f1c0000
0024686d74789b370f9900000f40000000a06c6f6361ecd9e16f00000fe0
000000526d61787023c8259600001034000000206e616d65ef116a8d0000
10540000002070726570ffeae6e0000010740000240b6764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d000004047645f5e5d5c5b5a59585554535251504f4e4d
4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d2c2826
252423221f181411100f0d0b0a090807060504030201002c4523466020b0
2660b004262348482d2c452346236120b02661b004262348482d2c452346
60b0206120b04660b004262348482d2c4523462361b0206020b02661b020
61b004262348482d2c45234660b0406120b06660b004262348482d2c4523
462361b0406020b02661b04061b004262348482d2c0110203c003c2d2c20
452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44
235920b0042651582320b00d44235921212d2c20204518684420b0016020
45b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b
2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d2c2045
b00325456164b050515845441b2121592d2c2045b0004360442d2c01b006
43b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64
2364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297ae4182d
2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0052510
23208af500b0016023edec2d2c01b005251023208af500b0016123edec2d
2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001610110
203c003c2d2c00b00743b006430b2d2c21210c6423648bb84000622d2c21
b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c05158
0c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062
6023212d2c4523456023456023456023766818b08062202d2cb00426b004
26b00425b0042545234520b003266062636820b0032661658a2344442d2c
2045b0005458b040442045b04061441b2121592d2c45b1302f4523456160
b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b515820b003
2545695358441b2121591b2121592d2c45b01443b0006063b0016069442d
2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158b90033
ffe0b134201bb3330034005944442d2cb0164358b00326458a586466b01f
601b64b020606620581b21b04059b001615923586559b02923442310b029
e01b2121212121592d2cb0164358b004254564b020606620581b21b04059
b0016123586559b0292344b00425b00725082058021b0359b0052510b004
252046b0042523423cb0072510b006252046b00425b0016023423c205801
1b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0072508
2058021b0359b00425b003254348b00625b00325b0016043481b21592121
21212121212d2cb0164358b004254564b020606620581b21b04059b00161
23581b6559b0292344b00525b00825082058021b0359b0042510b0052520
46b0042523423cb00425b0072508b0072510b006252046b00425b0016023
423c2058011b0059b0042510b00525b029e0b02920456544b0072510b006
25b029e0b00525b00825082058021b0359b00525b003254348b00425b007
2508b00625b00325b0016043481b2159212121212121212d2c02b0042520
2046b004252342b0052508b003254548212121212d2c02b0032520b00425
08b0022543482121212d2c452320451820b00050205823652359236820b0
40505821b04059235865598a60442d2c4b53234b515a5820458a60441b21
21592d2c4b545820458a60441b2121592d2c4b53234b515a58381b212159
2d2cb000214b5458381b2121592d2cb002435458b0462b1b21212121592d
2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121212159
2d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a582338
1b2121592d2c0020b200400325b0062649618b3812342d2c014623466023
466123201020468a61b8ff80628ab140408a704560683a2d2c208a234964
8a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2cb1
020042b123018851b1400188535a58b910000020885458b2020102436042
59b12401885158b920000040885458b2020202436042b12401885458b202
2002436042004b014b5258b2020802436042591bb940000080885458b202
040243604259b94000008063b80100885458b202080243604259b9400001
0063b80200885458b202100243604259b94000020063b80400885458b202
400243604259595959592d2c451868234b51582320452064b04050587c59
688a6059442d2cb00016b00225b0022501b001233e00b002233eb1010206
0cb00a236542b00b234201b001233f00b002233fb10102060cb006236542
b0072342b00116012d2c20b82000628a6023622d2cb0072558001b0159b0
042510b00325b0022520b8ffff545821cd1bed5921b006255cb006255a58
b0092b5920b005254ab0042547b004254760b0062547b0806361b00225b0
005558b00325b00725496359b0082558001b0159b00425b0062549b00925
5cb009255a58b0092b59b0072546b0806361b0032520b0005558631b2159
612320b0005558b080631b21b08059b0592bb006255c586959b004252020
10b00048233ab0062658001b0159b0052658b003252f598a12233221212d
2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb00925b0
072559b00225b00225070cb005256323b00625636020b940000400635358
21b00426b00426b00a1bb94000040063655158b0042665b0042665b00a1b
b00426b00426b000b00325b003250b0d0ab0092eb00725b007250b0d0ab0
0b2eb00525b0052507595920b0005558b00525b0052587b00725b007250b
b0092510b00b25b0092620b8ffff545821cd1bed59b00525b0052507b008
25b00b254923b00625b0062587b00a2510b00b25c15920b00051b8005223
78b00161b00225b00725b0072507b00a25b00d254961b08062b00525b005
250bb00a252338b00625b0062587b00825b008250bb00a2510b00b25c4b0
0625b0062507b00925b00c2549b0032554b8ffa723792121212121212121
212121212d2c23b0005458b9400000001bb900004000598ab0005458b940
0000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9000040
00590db05b2b2d2c8a8a080d8ab0005458b9400000001bb90000400059b0
5b2b2d2cb00426b00426080db00426b00426080db05b2b2d2c204569442d
00000001000000020000bdedf6905f0f3cf50019080000000000bbeb7ccc
00000000c33ba7e6fc31fe7309b6079e0000000900020000000000000001
0000079efdda00000a4efc31fe8c09b60001000000000000000000000000
00000028040e000001cf0000045a00ac04440061035d00ac03ad00470522
00aa071e003d03d5005c043400990362005a0434006003fb005d03c40035
0434009901d6008501d6009906640099043400990438005a0434009902ca
00990321005102ae00210434009405b80035039f002201ff002a02730045
040e006b040e0052040e0048040e00ae040e0072040e0067040e0030040e
0065040e006b040e0052040e0052000000a100a1015701d4022202f4037f
041004bf055805e4067b071c0809088d090609490a2a0abb0b490be00c59
0d1f0d9b0e2b0f030f680f990fbc106a1190124312fa139a148e15531608
1610161816d1000000010000002800ad000700ac000700020010002f0065
00002318240b000400010000000100120001000000000006000e0000504f
5a5346592b43616c69627269b2090320b80284b40918014a20b80283b409
18014a20b80282b40918014a20b80281b40918014a20b80280b40918014a
20b8027fb40918014a20b8027eb40918014a20b8027db40918014a20b802
7cb40918014a20b8027bb40918014a20b8027ab40918014a20b80279b409
18014a20b80278b40918014a20b80277b40918014a20b80276b40918014a
20b80275b40918014a20b80274b40918014a20b80273b40918014a20b802
71b40918014a20b80270b40918014a20b8026fb40918014a20b8026eb409
18014a20b8026db40918014a20b8026cb40918014a20b8026bb40918014a
20b8026ab40918014a20b80269b40918014a20b80268b40918014a20b802
67b40918014a20b80266b40918014a20b80265b40918014a20b80264b409
18014a20b80263b40918014a20b80262b40918014a20b80261b40918014a
20b80260b40918014a20b8025fb40918014a20b8025eb40918014a20b802
5db40918014a20b8025cb40918014a20b8025bb40918014a20b8025ab409
18014a20b80259b40918014a20b80258b40918014a20b80257b40918014a
20b80256b40918014a20b80255b40918014a20b80254b40918014a20b802
53b40918014a20b80252b40918014a20b80251b40918014a20b80250b409
18014a20b8024fb40918014a20b8024eb40918014a20b8024db40918014a
20b8024cb40918014a20b8024bb40918014a20b8024ab40918014a20b802
49b40918014a20b80248b40918014a20b80247b40918014a20b80246b409
18014a20b80245b40918014a20b80244b40918014a20b80243b40918014a
20b80242b40918014a20b80241b40918014a20b80240b40918014a20b802
3fb40918014a20b8023eb40918014a20b8023db40918014a20b8023cb409
18014a20b8023bb40918014a20b8023ab40918014a20b80239b40918014a
20b80238b40918014a20b80237b40918014a20b80236b40918014a20b802
35b40918014a20b80234b40918014a20b80233b40918014a20b80232b409
18014a20b80231b40918014a20b80230b40918014a20b8022fb40918014a
20b8022eb40918014a20b8022db40918014a20b8022cb40918014a20b802
2bb40918014a20b8022ab40918014a20b80229b40918014a20b80228b409
18014a20b80227b40918014a20b80226b40918014a20b80225b40918014a
20b80224b40918014a20b80223b40918014a20b80222b40918014a20b802
21b40918014a20b80220b40918014a20b8021fb40918014a20b8021eb409
18014a20b8021db40918014a20b8021cb40918014a20b8021bb40918014a
20b8021ab40918014a20b80219b40918014a20b80218b40918014a20b802
17b40918014a20b80216b40918014a20b80215b40918014a20b80214b409
18014a20b80213b40918014a20b80212b40918014a20b80211b40918014a
20b80210b40918014a20b8020fb40918014a20b8020eb40918014a20b802
0db40918014a20b8020cb40918014a20b8020bb40918014a20b8020ab409
18014a20b80209b40918014a20b80208b40918014a20b80207b40918014a
20b80206b40918014a20b80205b40918014a20b80204b40918014a20b802
03b40918014a20b80202b40918014a20b80201b40918014a20b80200b409
18014a20b801ffb40918014a20b801feb40918014a20b801fdb40918014a
20b801fcb40918014a20b801fbb40918014a20b801fab40918014a20b801
f9b40918014a20b801f8b40918014a20b801f7b40918014a20b801f6b409
18014a20b801f5b40918014a20b801f4b40918014a20b801f3b40918014a
20b801f2b40918014a20b801f1b40918014a20b801f0b40918014a20b801
efb40918014a20b801eeb40918014a20b801edb40918014a20b801ecb409
18014a20b801ebb40918014a20b801eab40918014a20b801e9b40918014a
20b801e8b40918014a20b801e7b40918014a20b801e6b40918014a20b801
e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2b409
18014a20b801e1b40918014a20b801e0b40918014a20b801dfb40918014a
20b801deb40918014a20b801ddb40918014a20b801dcb40918014a20b801
dbb40918014a20b801dab40918014a20b801d9b40918014a20b801d8b409
18014a20b801d7b40918014a20b801d6b40918014a20b801d5b40918014a
20b801d4b40918014a20b801d3b40918014a20b801d2b40918014a20b801
d1b40918014a20b801d0b40918014a20b801cfb40918014a20b801ceb409
18014a20b801cdb40918014a20b801ccb40918014a20b801cbb40918014a
20b801cab40918014a20b801c9b40918014a20b801c8b40918014a20b801
c7b40918014a20b801c6b40918014a20b801c5b40918014a20b801c4b409
18014a20b801c3b40918014a20b801c2b40918014a20b801c1b40918014a
20b801c0b40918014a20b801bfb40918014a20b801beb40918014a20b801
bdb40918014a20b801bcb40918014a20b801bbb40918014a20b801bab409
18014a20b801b9b40918014a20b801b8b40918014a20b801b7b40918014a
20b801b6b40918014a20b801b5b40918014a20b801b4b40918014a20b801
b3b40918014a20b801b2b40918014a20b801b1b40918014a20b801b0b409
18014a20b801afb40918014a20b801aeb40918014a20b801adb40918014a
20b801acb40918014a20b801abb40918014a20b801aab40918014a20b801
a9b40918014a20b801a8b40918014a20b801a7b40918014a20b801a6b409
18014a20b801a5b40918014a20b801a4b40918014a20b801a3b40918014a
20b801a2b40918014a20b801a1b40918014a20b801a0b40918014a20b801
9fb40918014a20b8019eb40918014a20b8019db40918014a20b8019cb409
18014a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a
20b80198b40918014a20b80197b40918014a20b80196b40918014a20b801
95b40918014a20b80194b40918014a20b80193b40918014a20b80192b409
18014a20b80191b40918014a20b80190b40918014a20b8018fb40918014a
20b8018eb40918014a20b8018db40918014a20b8018cb40918014a20b801
8bb40918014a20b8018ab40918014a20b80189b40918014a20b80188b409
18014a20b80187b40918014a20b80186b40918014a20b80185b40918014a
20b80184b40918014a20b80183b40918014a20b80182b40918014a20b801
81b40918014a20b80180b40918014a20b8017fb40918014a20b8017eb409
18014a20b8017db40918014a20b8017cb40918014a20b8017bb40918014a
20b8017ab40918014a20b80179b40918014a20b80178b40918014a20b801
77b40918014a20b80176b40918014a20b80175b40918014a20b80174b409
18014a20b80173b40918014a20b80172b40918014a20b80171b40918014a
20b80170b40918014a20b8016fb40918014a20b8016eb40918014a20b801
6db40918014a20b8016cb40918014a20b8016bb40918014a20b8016ab409
18014a20b80169b40918014a20b80168b40918014a20b80167b40918014a
20b80166b40918014a20b80165b40918014a20b80164b40918014a20b801
63b40918014a20b80162b40918014a20b80161b40918014a20b80160b409
18014a20b8015fb40918014a20b8015eb40918014a20b8015db40918014a
20b8015cb40918014a20b8015bb40918014a20b8015ab40918014a20b801
59b40918014a20b80158b40918014a20b80157b40918014a20b80156b409
18014a20b80155b40918014a20b80154b40918014a20b80153b40918014a
20b80152b40918014a20b80150b40918014a20b8014fb40918014a20b801
4eb40918014a20b8014cb40918014a20b8014bb40918014a20b8014ab409
18014a20b80149b40918014a20b80148b40918014a20b80147b40918014a
20b80146b40918014a20b80145b40918014a20b80144b40918014a20b801
43b30918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281
b21e3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e
3e1fb8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411f
b80278b21d431fb80277b21d431fb80276b21d431fb80275b21d411fb802
74b21d431fb80273b21d431fb80272b21d411fb80271b21d421fb80270b2
1d421fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb21d43
1fb8026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c451fb8
0267b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb80263
b21c451fb80262b21c451fb80261b21c451fb80260b21c451fb8025fb21c
451fb8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c451f
b8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c451fb802
56b21c451fb80255b21c451fb80254b21c451fb80253b21c451fb80252b2
1c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c45
1fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb8
0249b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245
b21b4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b
491fb80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1f
b8023cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb802
38b21b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b2
1b491fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b
1fb8022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8
022bb21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227
b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b
4a1fb80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1f
b8021eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb802
1ab21a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b2
1a4e1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f
1fb80211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8
020db21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209
b21a4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205b219
511fb80204b219511fb80203b219501fb80202b219511fb80201b219511f
b80200b219511fb801ffb219511fb801feb219501fb801fdb219511fb801
fcb219511fb801fbb219511fb801fab219501fb801f9b219511fb801f8b2
19511fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b21853
1fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b218531fb8
01efb218541fb801eeb218541fb801edb218541fb801ecb218531fb801eb
b218531fb801eab218541fb801e9b218541fb801e8b218541fb801e7b218
541fb801e6b218531fb801e5b218541fb801e4b218531fb801e3b218541f
b801e2b218541fb801e1b218541fb801e0b218531fb801dfb218531fb801
deb218541fb801ddb218541fb801dcb218541fb801dbb218541fb801dab2
18531fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b21756
1fb801d5b217561fb801d4b217571fb801d3b217571fb801d2b217571fb8
01d1b217571fb801d0b217561fb801cfb217561fb801ceb217571fb801cd
b217571fb801ccb217571fb801cbb217571fb801cab217561fb801c9b217
561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5b217571f
b801c4b217571fb801c3b217561fb801c2b217571fb801c1b217571fb801
c0b217571fb801bfb217561fb801beb217561fb801bdb217571fb801bcb2
17571fb801bbb217571fb801bab217571fb801b9b217571fb801b8b21756
1fb801b7b217571fb801b6b217571fb801b5b217571fb801b4b217571fb8
01b3b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801af
b2165b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb216
5b1fb801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1f
b801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801
a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2
163f1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b
1fb80199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb8
0195b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb80191
b2165b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db216
5b1fb8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1f
b80188b2165b1fb80187b2165b1fb80186b215611fb80185b215621fb801
84b215621fb80183b215661fb80182b215661fb80181b215551fb80180b2
15451fb8017fb215361fb8017eb215361fb8017db215611fb8017cb21562
1fb8017bb215621fb8017ab215641fb80179b215661fb80178b215661fb8
0177b215661fb80176b215661fb80175b215661fb80174b215661fb80173
b215451fb80172b215621fb80171b215621fb80170b215631fb8016fb215
641fb8016eb215661fb8016db215661fb8016cb215661fb8016bb215661f
b8016ab215661fb80169b215621fb80168b215621fb80167b215611fb801
66b215641fb80165b215641fb80164b215661fb80163b215661fb80162b2
15661fb80161b215661fb80160b215661fb8015fb215661fb8015eb21555
1fb8015db215451fb8015cb215451fb8015bb215361fb8015ab215611fb8
0159b215621fb80158b215621fb80157b215631fb80156b215641fb80155
b215661fb80154b215661fb80153b215661fb80152b215661fb80151b214
401fb80150b214551fb8014fb214561fb8014eb214831fb8014db2142d1f
b8014cb214401fb8014bb214401fb8014ab214411fb80149b214401fb801
48b214401fb80147b214411fb80146b2147e1fb80145b214871fb80144b2
147f1fb80143b214801fb80142b212461fb80141b212461fb80140b21246
1fb8013fb212461fb8013eb212441fb8013db212461fb8013cb211591fb8
013bb211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb80137
b211581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133b211
2c1fb80132b211471fb80131b211551fb80130b211571fb8012fb211571f
b8012eb211581fb8012db211591fb8012cb211591fb8012bb2115a1fb801
2ab2115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2
115b1fb80125b211561fb80124b211561fb80123b211571fb80122b21158
1fb80121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8
011db2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119
b2105d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115b210
5f1fb80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1f
b80110b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb801
0cb2105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2
105f1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f
1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621f
ff0f621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f
641ff70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f641f
f00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f
641fe80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e681f
e10e671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e
681fd90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261f
d20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d
6b1fca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261f
c30d311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711f
bc0c721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c
721fb40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1f
ad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b
7e1fa50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f
9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b
7e1f960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f
8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255
805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d40
4d060a7c557a557bab7a557955775578ab775576ab755504751475747503
f47501ab750144750130750102007510752075030c7455725573ab725500
7250728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc040
7c720d104671556f5570ab6f556e666d556a03251f6938675568ab675566
38645565ab645563386255613860555f385d555eab5d555c385a555bab5a
55593858555703251f5638545555ab54555338515552ab51554f384e554e
03251f4d384b554cab4b554a38485549ab4855473846554503381f001c10
1c201c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb0
1bc01b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf1802
4018292c460f17cf17df17ef1704134017292e460016101620160315b8ff
c0b3164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326
460f15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f
0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d
020f0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f
0b4f0b02400b3f4346400b2d30460003012001010001100120010308b8ff
c0b401151f4603bc01000100000500010190b154532b2b4bb80800524bb0
08505bb00188b02553b00188b040515ab00688b000555a5b58b101018e59
b101024354b0144b515a58b101018e59858d8d001d424bb01d5358b203a0
a01d42594bb0805358b20340401d42594bb0ff5358b20300001d42592b5e
7375732b2b745e732b2b5e73742b73742b7374745e7301755e73742b2b2b
2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b
5e735f73737373742b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff028400
6402830064028200640281006402800064027f0064027e0064027d006402
7c0064027b0064027a006402790064027800640277006402760064027500
6402740064027300640271006402700064026f0064026e0064026d006402
6c0064026b0064026a006402690064026800640267006402660064026500
640264006402630064026200640261006402600064025f0064025e006402
5d0064025c0064025b0064025a0064025900640258006402570064025600
64025500640254006402530064025200640251006402500064024f006402
4e0064024d0064024c0064024b0064024a00640249006402480064024700
640246006402450064024400640243006402420064024100640240006402
3f0064023e0064023d0064023c0064023b0064023a006402390064023800
640237006402360064023500640234006402330064023200640231006402
300064022f0064022e0064022d0064022c0064022b0064022a0064022900
640228006402270064022600640225006402240064022300640222006402
21006402200064021f0064021e0064021d0064021c0064021b0064021a00
640219006402180064021700640216006402150064021400640213006402
1200640211006402100064020f0064020e0064020d0064020c0064020b00
64020a00640209006402080064020700640206006402050064020441ff00
640203006402020064020100640200006401ff006401fe006401fd006401
fc006401fb006401fa006401f9006401f8006401f7006401f6006401f500
6401f4006401f3006401f2006401f1006401f0006401ef006401ee006401
ed006401ec006401eb006401ea006401e9006401e8006401e7006401e600
6401e5006401e4006401e3006401e2006401e1006401e0006401df006401
de006401dd006401dc006401db006401da006401d9006401d8006401d700
6401d6006401d5006401d4006401d3006401d2006401d1006401d0006401
cf006401ce006401cd006401cc006401cb006401ca006401c9006401c800
6401c7006401c6006401c5006401c4006401c3006401c2006401c1006401
c0006401bf006401be006401bd006401bc006401bb006401ba006401b900
6401b8006401b7006401b6006401b5006401b4006401b3006401b2006401
b1006401b0006401af006401ae006401ad006401ac006401ab006401aa00
6401a9006401a8006401a7006401a6006401a5006401a4006401a3006401
a2006401a1006401a00064019f0064019e0064019d0064019c0064019b00
64019a006401990064019800640197006401960064019500640194006401
930064019200640191006401900064018f0064018e0064018d0064018c00
64018b0064018a0064018900640188006401870064018600640185006441
800184006401830064018200640181006401800064017f0064017e006401
7d0064017c0064017b0064017a0064017900640178006401770064017600
64017500640174006401730064017200640171006401700064016f006401
6e0064016d0064016c0064016b0064016a00640169006401680064016700
640166006401650064016400640163006401620064016100640160006401
5f0064015e0064015d0064015c0064015b0064015a006401590064015800
640157006401560064015500640154006401530064015200640150006401
4f0064014e0064014c0064014b0064014a00640149006401480064014700
64014600640145006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00
00>
[11683 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 9350 32 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>WAAAAA+Calibri AddT42Char 
1 11312 39 <00020052ffed03a605210030004200bd4013292e012a0501290401290301
2a2601260a0144b8ffc040200f024d60440131080d014d31100c0d014c1d
7a3101393149316931032b310131b8022c4009000e0e200070000200b8ff
e0b30f024d00b8ffe0b40f014d003bb8fff8b30d014d3bb8fff040120c0d
014c753b01363b463b663b03243b013bb8022b400e2f25012540f2202007
36f42a5318b80108b10756003fed3fed12392fed012f5de15d5d5d2b2bc4
2b2b5d392f10e15d5d5d322b2b31305d2b005d5d015d5d5d5d01140e0423
222e0435343e0233321e0233323e0237060623222e0235343e0233321e04
07342e0223220e0215141e0233323603a61430517ba9702b51412c140903
060b080b283d5233618b582c023594606c935927326aa472517d5c402711
af2242603f415c3b1c19385a424b8c02ba54ac9f8b683b0b1012121f1a16
1a0e050f120f4b7ea65c1f303b668c53569b7646294d6d8aa14680af6c30
2f4f64353b6244252d00>WAAAAA+Calibri AddT42Char 
1 9716 33 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>WAAAAA+Calibri AddT42Char 
1 8992 31 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>WAAAAA+Calibri AddT42Char 
1 10918 36 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>WAAAAA+Calibri AddT42Char 
1 8404 30 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>WAAAAA+Calibri AddT42Char 
1 11296 38 <ffff0052ffed03ba05210206001e0000>WAAAAA+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>WAAAAA+Calibri AddT42Char 
WAAAAA+Calibri /CharStrings get begin
/g32 32 def
/g39 39 def
/g33 33 def
/g31 31 def
/g36 36 def
/g38 38 def
end
WAAAAA+Calibri /Encoding get
dup 33 /g32 put
dup 34 /g39 put
dup 35 /g33 put
dup 36 /g31 put
dup 37 /g36 put
dup 38 /g38 put
pop
end
%ADOEndSubsetFont
/HFKGMB+Calibri /WAAAAA+Calibri findfont ct_VMDictPut/HFKGMB+Calibri*1 [33{/.notdef}rp /g32 /g39 /g33 /g31 /g36 /g38 217{/.notdef}rp]HFKGMB+Calibri nfHFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf69.4404 394.826 mo(!"#$!"%$!"&$#$!$)[3.04202 3.04202 3.04202 7.53603 3.04202 3.04202 3.04202 7.53602 3.04202 3.04202 3.04202 7.54202 3.04202 3.04202 3.04203 0 ]xsh58.2204 181.256 mo($)sh54.8844 167.48 mo(%$)[3.04202 0 ]xsh51.5484 153.704 mo(!$$)[3.04202 3.04202 0 ]xsh51.5484 139.91 mo(!%$)[3.04202 3.04202 0 ]xsh1.07 lw
66.1704 179.183 mo
63.3404 179.183 li
.691 .629 .617 .582 cmyk
@
66.1704 165.406 mo
63.3404 165.406 li
@
66.1704 151.628 mo
63.3404 151.628 li
@
66.1704 137.835 mo
63.3404 137.835 li
@
.652 .578 .566 .363 cmyk
HFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf58.2168 320.619 mo(%)sh54.8808 306.933 mo(!$)[3.04202 0 ]xsh54.8808 293.265 mo(!%)[3.04202 0 ]xsh66.1704 318.545 mo
63.3404 318.545 li
.691 .629 .617 .582 cmyk
@
66.1704 304.862 mo
63.3404 304.862 li
@
66.1704 291.194 mo
63.3404 291.194 li
@
.652 .578 .566 .363 cmyk
%ADOBeginSubsetFont: WAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HFKGMB+Calibri gcheck setglobal} if
1 10524 35 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>HFKGMB+Calibri AddT42Char 
HFKGMB+Calibri /CharStrings get begin
/g35 35 def
end
HFKGMB+Calibri /Encoding get
dup 39 /g35 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HFKGMB+Calibri*1 [33{/.notdef}rp /g32 /g39 /g33 /g31 /g36 /g38 /g35 216{/.notdef}rp]HFKGMB+Calibri nfHFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf58.2168 126.232 mo($)sh54.8808 108.448 mo(#$)[3.04202 0 ]xsh54.8808 90.6824 mo('$)[3.04202 0 ]xsh66.1704 124.158 mo
63.3404 124.158 li
.691 .629 .617 .582 cmyk
@
66.1704 106.375 mo
63.3404 106.375 li
@
66.1704 88.6069 mo
63.3404 88.6069 li
@
.652 .578 .566 .363 cmyk
HFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf58.2168 237.023 mo($)sh58.2168 226.247 mo(%)sh54.8808 215.471 mo(!$)[3.04202 0 ]xsh54.8808 204.695 mo(!%)[3.04202 0 ]xsh54.8808 193.901 mo(#$)[3.04202 0 ]xsh66.1704 234.948 mo
63.3404 234.948 li
.691 .629 .617 .582 cmyk
@
66.1704 224.171 mo
63.3404 224.171 li
@
66.1704 213.394 mo
63.3404 213.394 li
@
66.1704 202.602 mo
63.3404 202.602 li
@
66.1704 191.826 mo
63.3404 191.826 li
@
.652 .578 .566 .363 cmyk
%ADOBeginSubsetFont: ZAAAAA+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /ZAAAAA+Helvetica
Type42DictBegin
[<00010000000b000b000b000b637674208de93e9e000000bc0000036c6670
676de80497d30000042800000a1d676c796692904d96000012cc000001e4
68656164449a042700000e4800000036686865610a22071b00000e800000
0024686d74780df800b600000ea40000000c6c6f636100a4012800000eb0
000000086d617870086d0b2d00000eb8000000206e616d654b7975900000
0ed80000002470726570bc836e3100000efc000003cf6764697200000000
000000000000000005c0001005bd00280580001a042f001f0000ffd90000
ffda0000ffd9fe55ffe605c70010fe6dfff1033b000000b9000000b902fe
3f3c00c0008d009b00af000600a800c00028005e009800c9016a00b9015c
00b400d6011e002e0080000400b8004c00cc01ffffd1006600a400af0074
00c2009500b1000c0028006d0015004c008e0125ff7a000c0040004c0062
0084ffa200240038008600bd0039005e008e00edffa9ffb3004000520055
00aa00ab00c200cb012302b10413ffaeffe4000800510074008400aa00d1
ff4cffaf0012002c004200500051008400be012503daff680018003b0098
009c009f00a100c100ec018201b4ff68ff76ffd0ffe100020018001c0053
0053007d01b401e103af0486ff9cffeafffe001f0028002a005200600093
00a300aa00af00af00c001000145016b0174019301950240028202b40485
0517fefd00060029004700470048006f008800b400b900c400f200f901ef
02180310037403c5ff35fff3000b004b004c005200550065007600760087
0087008e00ab00bb0106013001430150017d0194019501d3022a02550258
0277027802e6034e035c037903d3047304b2058c0598060bfef5ffbbffc7
ffd50017001d005b0072007e009c00c200d000f400fa01030106011c0125
013b0142015e015e0180019b02b901a101b9025001c001d002aa01df01e3
01ef01fb0205020c0215022b0274029302ab02c202ce03690395039903df
03f5043e050205a105e5062507dbfe62fe89feceff3bffe1fff800030008
002100390042004e005f0061006f00700034007f008e00ad00ad00af00bd
00c400c500c900c900c900e3011c00ed00f800f901000112011a0132014d
014d014e014f01660169019e01ba01ba01be01e301ef01f6020002000209
02110217021c02530262026d028002d50280031b032a034a035a03af03af
03c803d603fb03fb04050413041504470449008c046d049a049a04a604a8
04b204cf0539053e054e055605800589058c036305d105d6067e068e06b2
06ef06f00728074c076f078c00b400c900c000c100000000000000000000
00000004012400af0032006e0063014401620096014301a10161008a0074
0064018801ef01700028ff5d037e0347023000aa00be007b0062009a007d
0089035c00a1ffd803aa00d70093006c0000008000a70442001d0597001d
00820030002a002a002a002a002a40292a292827262524232221201f1e1d
1c1b1a191817161514131211100d0c0b0a090807060504030201002c4523
466020b02660b004262348482d2c452346236120b02661b004262348482d
2c45234660b0206120b04660b004262348482d2c4523462361b0206020b0
2661b02061b004262348482d2c45234660b0406120b06660b00426234848
2d2c4523462361b0406020b02661b04061b004262348482d2c0110203c00
3c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed515823
20b04d44235920b09051582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b
2d2c2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c
2045b00325456164b050515845441b2121592d2c20b0032552582359212d
2c69b04061b0008b0c6423648bb8400062600c642364615c58b0036159b0
02602d2c45b0112bb0172344b0177ae5182d2c45b0112bb01723442d2c45
b0112bb017458cb0172344b0177ae5182d2cb002254661658a46b040608b
482d2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185
592d2c20b0032545b019236a4445b01a23444565234520b00325606a20b0
09234223688a6a606120b0005258b21a401a4523614459b0005058b21940
1945236144592d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b
2d2cb93b21e7830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845
441b2121592d2c0120b003252349b04060b0206320b000525823b0022538
23b002256538008a63381b212121212159012d2c456920b00943b0022660
b00325b005254961b0805358b21940194523616844b21a401a4523606a44
b209191a45652345604259b00943608a103a2d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d
2c764520b003254523616818236860442d2c7645b0032545236168231845
6860442d2c7645b0032545616823452361442d2c4569b014b0324b505821
b0205961442db8002b2c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db8002c2c2020456944b001602db8002d2cb8002c2a212d
b8002e2c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db8002f2c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800302c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80031
2c2020456944b001602020457d691844b001602db800322cb800312a2db8
00332c4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a
1b8a235920b0032653582321b801008a8a1b8a235920b0032653582321b8
01408a8a1b8a235920b80003265358b0032545b8018050582321b8018023
211bb003254523212321591b2159442db800342c4b535845441b2121592d
b800352c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db800362c2020456944b001602db800372cb800362a212db800382c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db800392c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db8003a2c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db8003b2c2020456944
b001602020457d691844b001602db8003c2cb8003b2a2db8003d2c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db8003e2c4b535845441b2121592db8003f2c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800402c20
20456944b001602db800412cb800402a212db800422c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800432c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db800442c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db800452c2020456944b00160202045
7d691844b001602db800462cb800452a2db800472c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db800482c4b535845441b2121592db800492c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db8004a2c2020456944b001
602db8004b2cb8004a2a212db8004c2c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db8004d2c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db8004e2c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db8004f2c2020456944b001602020457d691844b001
602db800502cb8004f2a2db800512c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
522c4b535845441b2121592db800532c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db800542c2020456944b001602db800552c
b800542a212db800562c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db800572c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db800582c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db800592c2020456944b001602020457d691844b001602db8005a2c
b800592a2db8005b2c4b20b003265358b0401bb000598a8a20b003265358
2321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a235920b003
2653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a23
5920b80003265358b0032545b8018050582321b8018023211bb003254523
212321591b2159442db8005c2c4b535845441b2121592d00000000010000
00000000aeaf63a15f0f3cf500110800000000005f4d8f0000000000d383
c768f865fc270b9108f9000000090001000000000000000100000629fe29
00000c01f865fced0b910001000000000000000000000000000000030512
004204730040047300340000003600a400f200010000000300920009006b
0007000200100010005d000007e80a1d0004000100000001001200010000
00000006001000004557465256522b48656c7665746963610000b800532b
b800492bb8003f2bb800352bb8002b2b4118008001a6009001a600a001a6
00030069018b0079018b0089018b0099018b00040089018b0099018b00a9
018b00b9018bb2040840ba0179001a014a400b041f5414191f180a0b1fd2
b80106b49e1fd918e3bb0119000d00e10119b20d0009410a01a0019f0064
001f01a50025017a00480028019ab3296c1f60410a01a9007001a9008001
a90003008001a9000101a9b21e321fbe012c00250401001f0126001e0401
b61fe7312d1fe531b80201b21fc227b80401b21fc11eb80201400f1fc01d
9e1fbf1d671fbe1d671fab27b80401b21faa29b80401b61fa91d6c1f931e
b8019ab21f921db80101b21f911db80101b21f751db80201b61f6d29961f
6431b8019ab21f4c96b802abb21f391db80156400b1f3638211f351de41f
2f27b80801400b1f2d1d4c1f2a31cd1f241db802abb21f201eb801254011
1f1c1d931f3a1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2254a1f
ba019b0025017ab349293896b8017bb348283125b8017a40364828962948
2725294c1f252946272729482756c80784075b07410732072b0728072607
21071b071408120810080e080c080a08080807b801acb23f1f06bb01ab00
3f001f01abb308060805b801aeb23f1f04bb01ad003f001f01adb7080408
0208000814b8ffe0b40000010014b801abb41000000100b801abb6061000
00010006b801adb300000100b801ad401f04000001000410000001001002
000001000200000001000002010802004a00b0018db806008516763f183f
123e113946443e113946443e113946443e113946443e113946443e113946
60443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358b0ff
1d592b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b376706a
66456523456023456560234560b08b766818b080622020b16a7045652345
20b003266062636820b003266165b070236544b06a234420b17666456523
4520b003266062636820b003266165b066236544b0762344b10066455458
b166406544b27640764523614459b36242725d4565234560234565602345
60b089766818b080622020b172424565234520b003266062636820b00326
6165b042236544b072234420b1625d4565234520b003266062636820b003
266165b05d236544b0622344b1005d455458b15d406544b2624062452361
44592b2b2b2b456953427374b8019a2045694b20b02853b049515a58b020
615944b801a620456944750000>
[485 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 108 1 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>ZAAAAA+Helvetica AddT42Char 
1 328 2 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>ZAAAAA+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>ZAAAAA+Helvetica AddT42Char 
ZAAAAA+Helvetica /CharStrings get begin
/zero 1 def
/four 2 def
end
ZAAAAA+Helvetica /Encoding get
dup 48 /zero put
dup 52 /four put
pop
end
%ADOEndSubsetFont
/HFKGMC+Helvetica /ZAAAAA+Helvetica findfont ct_VMDictPut/HFKGMC+Helvetica*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 203{/.notdef}rp]HFKGMC+Helvetica nfHFKGMC+Helvetica*1 [6 0 0 -6 0 0 ]msf54.8799 381.545 mo(40)[3.336 0 ]xsh%ADOBeginSubsetFont: WAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HFKGMB+Calibri gcheck setglobal} if
1 8056 29 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>HFKGMB+Calibri AddT42Char 
1 11280 37 <ffff006bffed03bd05200206001d0000>HFKGMB+Calibri AddT42Char 
HFKGMB+Calibri /CharStrings get begin
/g37 37 def
end
HFKGMB+Calibri /Encoding get
dup 40 /g37 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HFKGMB+Calibri*1 [33{/.notdef}rp /g32 /g39 /g33 /g31 /g36 /g38 /g35 /g37 215{/.notdef}rp]HFKGMB+Calibri nfHFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf54.8799 366.653 mo(&$)[3.04202 0 ]xsh51.5439 351.761 mo(!#$)[3.04202 3.04202 0 ]xsh51.5439 336.869 mo(!\($)[3.04202 3.04202 0 ]xsh66.1704 379.471 mo
63.3404 379.471 li
.691 .629 .617 .582 cmyk
@
66.1704 364.578 mo
63.3404 364.578 li
@
66.1704 349.685 mo
63.3404 349.685 li
@
66.1704 334.793 mo
63.3404 334.793 li
@
.746 .676 .668 .898 cmyk
%ADOBeginSubsetFont: WAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HFKGMB+Calibri gcheck setglobal} if
1 7686 26 <00010022fe94037c03bc00240052b9001bfff040350b014d371b01291b01
18180b014d261801260e360e022709011a400b014d3a1a0119380b014d3b
19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b5d2b015d
5d5d2b5d5d2b2103060623222e023713262627012634363633321e021701
33133e023332161614070233780631321a201102067c091003febf081024
1e1e22140905010103f8061122201c241106feb51011050c140e01390412
0a035c15180e0503080f0dfd2e02d6130b05050e1812>HFKGMB+Calibri AddT42Char 
1 3318 12 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>HFKGMB+Calibri AddT42Char 
1 2080 8 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>HFKGMB+Calibri AddT42Char 
1 6080 21 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>HFKGMB+Calibri AddT42Char 
HFKGMB+Calibri /CharStrings get begin
/g26 26 def
/g12 12 def
/g8 8 def
/g21 21 def
end
HFKGMB+Calibri /Encoding get
dup 41 /g26 put
dup 42 /g12 put
dup 43 /g8 put
dup 44 /g21 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HFKGMB+Calibri*1 [33{/.notdef}rp /g32 /g39 /g33 /g31 /g36 /g38 /g35 /g37 /g26 /g12 /g8 /g21 211{/.notdef}rp]HFKGMB+Calibri nfHFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf94.1904 402.594 mo(\)*+,)[2.59801 2.98801 2.87402 0 ]xsh1 lw
1 ml
203.871 172.553 mo
204.411 172.977 li
204.941 173.386 li
205.481 173.825 li
206.021 174.265 li
206.561 174.674 li
207.091 175.114 li
207.631 175.538 li
208.171 175.978 li
208.701 176.402 li
209.241 176.826 li
209.781 177.282 li
210.311 177.706 li
210.851 178.161 li
211.391 178.601 li
211.921 179.057 li
212.461 178.664 li
0 .617 1 0 cmyk
@
196.36 143.554 mo
196.89 145.722 li
197.43 147.748 li
197.97 149.932 li
198.5 152.131 li
199.04 154.189 li
199.58 156.388 li
200.11 158.588 li
200.65 160.693 li
201.19 162.829 li
201.72 165.045 li
202.26 167.212 li
0 .32 .699 0 cmyk
@
203.871 133.813 mo
204.411 136.846 li
204.941 139.737 li
205.481 142.831 li
206.021 145.973 li
206.561 149.005 li
207.091 152.21 li
207.631 155.336 li
208.171 158.62 li
208.701 161.856 li
209.241 165.216 li
209.781 168.611 li
210.311 172.003 li
210.851 175.46 li
211.391 178.995 li
211.921 179.089 li
.023 .887 .902 0 cmyk
@
196.891 130.734 mo
197.431 130.734 li
197.971 130.514 li
198.501 130.734 li
199.041 130.734 li
199.581 130.514 li
200.111 130.514 li
0 .73 .508 0 cmyk
@
195.28 139.626 mo
195.82 139.94 li
196.36 140.254 li
196.89 140.38 li
197.43 140.694 li
197.97 140.82 li
198.5 141.134 li
199.04 141.448 li
199.58 141.574 li
200.11 141.888 li
200.65 142.03 li
201.19 142.344 li
201.72 142.658 li
202.26 142.799 li
202.8 143.114 li
203.33 145.188 li
203.87 147.434 li
204.41 149.523 li
204.94 151.785 li
205.48 153.922 li
206.02 156.184 li
206.56 158.352 li
207.09 160.63 li
207.63 162.829 li
208.17 165.123 li
208.7 167.354 li
209.24 169.6 li
209.78 171.925 li
210.31 174.203 li
210.85 176.512 li
211.39 178.853 li
211.92 179.12 li
.438 .273 .734 .039 cmyk
@
195.28 150.136 mo
195.82 151.094 li
196.36 151.911 li
196.89 152.869 li
197.43 153.828 li
197.97 154.676 li
198.5 155.635 li
199.04 156.609 li
199.58 157.567 li
200.11 158.431 li
200.65 159.405 li
201.19 160.269 li
201.72 161.259 li
202.26 162.233 li
202.8 163.128 li
203.33 164.102 li
203.87 165.076 li
204.41 166.003 li
204.94 166.977 li
205.48 167.904 li
206.02 168.909 li
206.56 169.852 li
207.09 170.841 li
207.63 171.8 li
208.17 172.805 li
208.7 173.779 li
209.24 174.784 li
209.78 175.774 li
210.31 176.78 li
210.85 177.785 li
211.39 178.806 li
.652 .027 .941 0 cmyk
@
203.871 138.825 mo
204.411 141.291 li
204.941 143.977 li
205.481 146.648 li
206.021 149.178 li
206.561 151.864 li
207.091 154.566 li
207.631 157.142 li
208.171 159.844 li
208.701 162.546 li
209.241 165.185 li
209.781 167.903 li
210.311 170.621 li
210.851 173.307 li
211.391 176.041 li
211.921 178.774 li
.469 .035 .531 0 cmyk
@
201.721 176.387 mo
202.261 176.512 li
202.801 176.638 li
203.331 176.764 li
203.871 176.889 li
204.411 177.015 li
204.941 177.125 li
205.481 177.251 li
206.021 177.376 li
206.561 177.502 li
207.091 177.628 li
207.631 177.754 li
208.171 177.864 li
208.701 177.989 li
209.241 178.115 li
209.781 178.225 li
210.311 178.335 li
210.851 178.46 li
211.391 178.571 li
211.921 178.68 li
212.461 178.79 li
.793 .41 .07 0 cmyk
@
.5 lw
1 lc
10 ml
145.891 181.555 mo
212.461 181.555 li
212.461 128.079 li
145.891 128.079 li
cp
.746 .676 .668 .898 cmyk
@
1 lw
0 lc
1 ml
145.891 318.278 mo
146.431 318.34 li
146.971 318.403 li
147.501 318.466 li
148.041 318.529 li
148.581 318.592 li
149.111 318.655 li
149.651 318.718 li
150.191 318.78 li
150.721 318.843 li
151.261 318.89 li
151.801 318.953 li
152.341 319.032 li
152.871 319.095 li
153.411 319.157 li
153.951 319.205 li
154.481 319.268 li
155.021 319.33 li
155.561 319.409 li
156.091 319.456 li
156.631 319.519 li
157.171 319.582 li
157.701 319.645 li
158.241 319.708 li
158.781 319.77 li
159.311 319.833 li
159.851 319.896 li
160.391 319.959 li
160.921 320.022 li
161.461 320.069 li
162.001 320.132 li
162.541 320.21 li
163.071 320.273 li
163.611 320.32 li
164.151 320.383 li
164.681 320.446 li
165.221 320.524 li
165.761 320.571 li
166.291 320.634 li
166.831 320.697 li
167.371 320.76 li
167.901 320.823 li
168.441 320.886 li
168.981 320.948 li
169.511 321.011 li
170.051 321.074 li
170.591 321.137 li
171.121 321.2 li
171.661 321.263 li
172.201 321.325 li
172.731 321.388 li
173.271 321.451 li
173.811 321.514 li
174.351 321.577 li
174.881 321.64 li
175.421 321.702 li
175.961 321.765 li
176.491 321.828 li
177.031 321.891 li
177.571 321.923 li
178.101 321.954 li
178.641 321.986 li
179.181 322.017 li
179.711 322.064 li
180.251 322.095 li
180.791 322.127 li
181.321 322.174 li
181.861 322.221 li
182.401 322.253 li
182.931 322.284 li
183.471 322.331 li
184.011 322.362 li
184.551 322.394 li
185.081 322.425 li
185.621 322.409 li
186.161 322.394 li
186.691 322.378 li
187.231 322.362 li
187.771 322.347 li
188.301 322.347 li
188.841 322.331 li
189.381 322.315 li
189.911 322.299 li
190.451 322.284 li
190.991 322.268 li
191.521 322.268 li
192.061 322.253 li
192.601 322.236 li
193.131 322.221 li
193.671 322.221 li
194.211 322.205 li
194.741 322.19 li
195.281 322.174 li
195.821 322.158 li
196.361 322.142 li
196.891 322.127 li
197.431 322.111 li
197.971 322.095 li
198.501 322.08 li
199.041 322.064 li
199.581 322.048 li
200.111 322.032 li
200.651 322.001 li
201.191 321.986 li
201.721 321.969 li
202.261 321.954 li
202.801 321.938 li
203.331 321.923 li
203.871 321.907 li
204.411 319.174 li
204.941 316.44 li
205.481 313.706 li
206.021 310.988 li
206.561 308.239 li
207.091 305.506 li
207.631 302.741 li
208.171 300.007 li
208.701 297.243 li
209.241 294.462 li
209.781 291.729 li
210.311 288.948 li
210.851 286.152 li
211.391 283.403 li
211.921 280.606 li
212.461 303.872 li
0 .617 1 0 cmyk
@
147.501 304.092 mo
148.04 304.438 li
148.58 304.736 li
149.11 305.066 li
149.65 305.381 li
150.19 305.71 li
150.72 306.056 li
151.26 306.37 li
151.8 306.7 li
152.34 307.046 li
152.87 307.36 li
153.41 307.69 li
153.951 308.035 li
154.48 308.349 li
155.02 308.695 li
155.561 309.025 li
156.09 309.339 li
156.63 309.685 li
157.171 310.03 li
157.701 310.376 li
158.24 310.706 li
158.781 311.02 li
159.311 311.366 li
159.85 311.711 li
160.391 312.057 li
160.921 312.403 li
161.46 312.748 li
162.001 313.078 li
162.54 313.424 li
163.07 313.769 li
163.611 314.115 li
164.15 314.461 li
164.68 314.806 li
165.22 315.152 li
165.76 315.497 li
166.29 315.827 li
166.83 316.173 li
167.37 316.518 li
167.9 316.864 li
168.44 317.21 li
168.98 317.555 li
169.51 317.901 li
170.05 318.246 li
170.59 318.608 li
171.12 318.953 li
171.66 319.283 li
172.201 319.111 li
172.73 318.938 li
173.27 318.78 li
173.811 318.608 li
174.35 318.451 li
174.88 318.262 li
175.421 318.105 li
175.96 317.964 li
176.49 317.775 li
177.031 317.618 li
177.57 317.477 li
178.1 317.32 li
178.641 317.162 li
179.18 317.006 li
179.71 316.848 li
180.251 316.675 li
180.79 316.518 li
181.32 316.377 li
181.861 316.22 li
182.4 316.063 li
182.93 315.906 li
183.471 315.764 li
184.01 315.592 li
184.55 315.434 li
185.081 315.278 li
185.62 315.105 li
186.16 314.947 li
186.69 315.136 li
187.23 315.356 li
187.77 315.529 li
188.3 315.717 li
188.84 315.922 li
189.38 316.11 li
189.91 316.299 li
190.451 316.503 li
190.99 316.691 li
191.52 316.88 li
192.061 317.068 li
192.6 317.257 li
193.13 317.446 li
193.671 317.634 li
194.21 317.806 li
194.74 317.995 li
195.281 318.184 li
195.82 318.372 li
196.361 318.561 li
196.891 319.111 li
197.43 319.645 li
197.971 320.179 li
198.501 320.729 li
199.04 321.263 li
199.581 321.813 li
200.111 322.363 li
200.65 322.897 li
201.19 323.431 li
201.721 323.981 li
202.26 324.515 li
0 .32 .699 0 cmyk
@
145.891 281.957 mo
146.431 281.957 li
146.971 281.957 li
147.501 281.957 li
148.041 281.957 li
148.581 281.957 li
149.111 282.004 li
149.651 282.004 li
150.191 282.004 li
150.721 282.004 li
151.261 282.004 li
151.801 282.036 li
152.341 282.036 li
152.871 282.036 li
153.411 282.036 li
153.951 282.036 li
154.481 282.067 li
155.021 282.067 li
155.561 282.067 li
156.091 282.067 li
156.631 282.067 li
157.171 282.067 li
157.701 282.099 li
158.241 282.099 li
158.781 282.366 li
159.311 282.633 li
159.851 282.915 li
160.391 283.183 li
160.921 283.45 li
161.461 283.732 li
162.001 283.999 li
162.541 284.267 li
163.071 284.518 li
163.611 284.816 li
164.151 285.083 li
164.681 285.335 li
165.221 285.602 li
165.761 285.869 li
166.291 286.152 li
166.831 286.419 li
167.371 286.67 li
167.901 286.937 li
168.441 287.204 li
168.981 287.456 li
169.511 287.754 li
170.051 288.005 li
170.591 287.723 li
171.121 287.44 li
171.661 287.173 li
172.201 286.89 li
172.731 286.607 li
173.271 286.325 li
173.811 286.058 li
174.351 285.774 li
174.881 285.507 li
175.421 285.225 li
175.961 284.974 li
176.491 284.69 li
177.031 284.392 li
177.571 284.141 li
178.101 283.858 li
178.641 283.56 li
179.181 283.308 li
179.711 283.025 li
180.251 282.743 li
180.791 282.444 li
181.321 283.246 li
181.861 284.031 li
182.401 284.816 li
182.931 285.586 li
183.471 286.372 li
184.011 287.157 li
184.551 287.942 li
185.081 288.744 li
185.621 289.529 li
186.161 290.299 li
186.691 291.084 li
187.231 291.87 li
187.771 292.64 li
188.301 293.425 li
188.841 294.227 li
189.381 294.98 li
189.911 295.782 li
190.451 296.551 li
190.991 297.337 li
191.521 298.106 li
192.061 298.876 li
192.601 299.678 li
193.131 300.447 li
193.671 301.217 li
194.211 302.002 li
194.741 302.788 li
195.281 303.558 li
195.821 304.328 li
196.361 305.129 li
196.891 305.898 li
197.431 306.684 li
197.971 307.454 li
198.501 308.239 li
199.041 309.025 li
199.581 309.794 li
200.111 310.58 li
200.651 311.366 li
201.191 312.151 li
201.721 312.936 li
202.261 313.722 li
202.801 314.507 li
203.331 315.277 li
203.871 316.079 li
204.411 315.372 li
204.941 314.649 li
205.481 313.926 li
206.021 313.219 li
206.561 312.497 li
207.091 311.774 li
207.631 311.036 li
208.171 310.313 li
208.701 309.575 li
209.241 308.836 li
209.781 308.114 li
210.311 307.359 li
210.851 306.59 li
211.391 305.82 li
211.921 302.223 li
.023 .887 .902 0 cmyk
@
149.11 309.354 mo
149.65 309.921 li
150.19 310.486 li
150.72 311.052 li
151.26 311.617 li
151.8 312.182 li
152.34 312.749 li
152.87 313.298 li
153.41 313.833 li
153.95 314.382 li
154.48 314.948 li
155.02 315.497 li
155.56 316.047 li
156.09 316.613 li
156.63 317.178 li
157.17 317.743 li
157.7 318.31 li
158.24 318.875 li
158.78 319.441 li
159.31 319.991 li
159.85 320.556 li
160.39 321.137 li
160.92 321.703 li
161.46 322.268 li
162 322.833 li
162.54 323.415 li
163.07 323.965 li
163.61 323.871 li
164.15 323.792 li
164.68 323.698 li
165.22 323.604 li
165.76 323.509 li
166.29 323.415 li
166.83 323.337 li
167.37 323.242 li
167.9 323.148 li
168.44 323.07 li
168.98 322.975 li
169.51 322.88 li
170.05 322.786 li
170.59 322.691 li
171.12 322.613 li
171.66 322.535 li
172.2 322.441 li
172.73 322.363 li
173.27 322.268 li
173.81 322.173 li
174.35 322.096 li
174.88 322.001 li
175.42 321.923 li
175.96 321.829 li
176.49 321.75 li
177.03 321.671 li
177.57 321.577 li
178.1 321.499 li
178.64 321.404 li
179.18 321.294 li
179.71 321.216 li
180.25 321.137 li
180.79 321.043 li
181.32 320.932 li
181.86 320.839 li
182.4 320.76 li
182.93 320.665 li
183.47 320.572 li
184.01 320.478 li
184.55 320.398 li
185.08 320.32 li
185.62 320.21 li
186.16 320.116 li
186.69 320.022 li
187.23 319.943 li
187.77 319.865 li
188.3 319.771 li
188.84 319.676 li
189.38 319.582 li
189.91 319.503 li
190.45 319.409 li
190.99 319.315 li
191.52 319.204 li
192.06 319.126 li
192.6 319.031 li
193.13 318.938 li
193.67 318.844 li
194.21 318.75 li
194.74 318.655 li
195.28 318.561 li
195.82 318.482 li
196.36 318.388 li
196.89 318.31 li
197.43 315.842 li
197.97 313.376 li
198.5 310.941 li
199.04 308.491 li
199.58 306.009 li
200.11 303.559 li
0 .73 .508 0 cmyk
@
148.581 307.313 mo
149.111 306.7 li
149.651 306.087 li
150.191 305.506 li
150.721 304.894 li
151.261 304.281 li
151.801 303.668 li
152.341 303.056 li
152.871 302.459 li
153.411 301.846 li
153.951 301.233 li
154.481 300.621 li
155.021 300.008 li
155.561 299.411 li
156.091 298.798 li
156.631 298.186 li
157.171 297.573 li
157.701 296.96 li
158.241 296.363 li
158.781 295.75 li
159.311 295.138 li
159.851 294.525 li
160.391 293.928 li
160.921 293.284 li
161.461 292.671 li
162.001 292.059 li
162.541 291.446 li
163.071 290.834 li
163.611 290.237 li
164.151 289.624 li
164.681 288.98 li
165.221 288.367 li
165.761 287.754 li
166.291 287.142 li
166.831 286.529 li
167.371 285.885 li
167.901 285.272 li
168.441 284.66 li
168.981 284.047 li
169.511 283.435 li
170.051 282.791 li
170.591 282.178 li
171.121 281.565 li
171.661 283.01 li
172.201 284.408 li
172.731 285.854 li
173.271 287.283 li
173.811 288.697 li
174.351 290.143 li
174.881 291.587 li
175.421 293.017 li
175.961 294.431 li
176.491 295.876 li
177.031 297.322 li
177.571 298.735 li
178.101 300.181 li
178.641 301.626 li
179.181 303.071 li
179.711 304.501 li
180.251 305.946 li
180.791 307.392 li
181.321 308.821 li
181.861 310.266 li
182.401 311.711 li
182.931 313.157 li
183.471 314.586 li
184.011 316.047 li
184.551 317.477 li
185.081 318.922 li
185.621 320.383 li
186.161 321.829 li
186.691 323.274 li
187.231 323.038 li
187.771 322.803 li
188.301 322.551 li
188.841 322.315 li
189.381 322.08 li
189.911 321.829 li
190.451 321.593 li
190.991 321.357 li
191.521 321.106 li
192.061 320.87 li
192.601 320.635 li
193.131 320.383 li
193.671 320.147 li
194.211 319.912 li
194.741 319.676 li
195.281 319.425 li
195.821 319.661 li
196.361 319.88 li
196.891 320.101 li
197.431 320.336 li
197.971 320.556 li
198.501 320.792 li
199.041 321.027 li
199.581 321.247 li
200.111 321.483 li
200.651 321.703 li
201.191 321.938 li
201.721 322.174 li
202.261 322.394 li
202.801 322.63 li
203.331 322.441 li
203.871 322.284 li
204.411 322.096 li
204.941 321.923 li
205.481 321.734 li
206.021 321.562 li
206.561 321.389 li
207.091 321.216 li
207.631 321.027 li
208.171 320.855 li
208.701 320.666 li
209.241 320.478 li
209.781 320.305 li
210.311 320.116 li
210.851 319.928 li
211.391 319.755 li
211.921 308.397 li
.438 .273 .734 .039 cmyk
@
145.891 321.875 mo
146.431 321.907 li
146.971 321.922 li
147.501 321.954 li
148.041 321.969 li
148.581 321.985 li
149.111 322.017 li
149.651 322.032 li
150.191 322.063 li
150.721 322.08 li
151.261 322.095 li
151.801 322.126 li
152.341 322.158 li
152.871 322.174 li
153.411 322.189 li
153.951 322.221 li
154.481 322.252 li
155.021 322.268 li
155.561 322.299 li
156.091 322.315 li
156.631 322.347 li
157.171 322.362 li
157.701 322.394 li
158.241 322.409 li
158.781 322.441 li
159.311 322.457 li
159.851 322.488 li
160.391 322.503 li
160.921 322.535 li
161.461 322.551 li
162.001 322.582 li
162.541 322.598 li
163.071 322.629 li
163.611 322.645 li
164.151 322.676 li
164.681 322.708 li
165.221 322.724 li
165.761 322.755 li
166.291 322.786 li
166.831 322.802 li
167.371 322.833 li
167.901 322.865 li
168.441 322.896 li
168.981 322.912 li
169.511 322.928 li
170.051 322.975 li
170.591 322.991 li
171.121 323.022 li
171.661 323.038 li
172.201 323.085 li
172.731 323.101 li
173.271 323.132 li
173.811 323.164 li
174.351 323.179 li
174.881 323.21 li
175.421 323.242 li
175.961 323.273 li
176.491 323.289 li
177.031 323.32 li
177.571 323.352 li
178.101 323.368 li
178.641 323.399 li
179.181 323.431 li
179.711 323.462 li
180.251 323.478 li
180.791 323.509 li
181.321 323.541 li
181.861 323.556 li
182.401 323.587 li
182.931 323.619 li
183.471 323.635 li
184.011 323.666 li
184.551 323.697 li
185.081 323.729 li
185.621 323.745 li
186.161 323.776 li
186.691 323.808 li
187.231 323.823 li
187.771 323.854 li
188.301 323.886 li
188.841 323.917 li
189.381 323.933 li
189.911 323.949 li
190.451 323.98 li
190.991 324.012 li
191.521 324.043 li
192.061 324.059 li
192.601 324.09 li
193.131 324.122 li
193.671 324.137 li
194.211 324.153 li
194.741 324.185 li
195.281 324.216 li
195.821 323.996 li
196.361 323.776 li
196.891 323.572 li
197.431 323.352 li
197.971 323.132 li
198.501 322.928 li
199.041 322.708 li
199.581 322.503 li
200.111 322.268 li
200.651 322.063 li
201.191 321.844 li
201.721 321.624 li
202.261 321.419 li
202.801 321.184 li
203.331 320.98 li
203.871 320.76 li
204.411 320.54 li
204.941 320.32 li
205.481 320.084 li
206.021 319.88 li
206.561 319.645 li
207.091 319.44 li
207.631 319.205 li
208.171 318.984 li
208.701 318.765 li
209.241 318.545 li
209.781 318.309 li
210.311 318.089 li
210.851 317.869 li
211.391 317.634 li
.652 .027 .941 0 cmyk
@
149.11 295.106 mo
149.65 296.52 li
150.19 297.95 li
150.72 299.395 li
151.26 300.809 li
151.8 302.238 li
152.34 303.668 li
152.87 305.129 li
153.41 306.558 li
153.95 307.988 li
154.48 309.449 li
155.02 310.878 li
155.56 312.324 li
156.09 313.785 li
156.63 315.23 li
157.17 316.691 li
157.7 318.136 li
158.24 319.582 li
158.78 321.058 li
159.31 320.807 li
159.85 320.571 li
160.39 320.335 li
160.92 320.1 li
161.46 319.849 li
162 319.613 li
162.54 319.377 li
163.07 319.142 li
163.61 318.89 li
164.15 318.655 li
164.68 318.435 li
165.22 318.184 li
165.76 317.948 li
166.29 317.696 li
166.83 317.461 li
167.37 317.225 li
167.9 316.99 li
168.44 316.738 li
168.98 316.502 li
169.51 316.283 li
170.05 316.047 li
170.59 315.78 li
171.12 315.56 li
171.66 315.324 li
172.2 315.089 li
172.73 314.853 li
173.27 314.617 li
173.81 314.696 li
174.35 314.79 li
174.88 314.9 li
175.42 314.995 li
175.96 315.089 li
176.49 315.199 li
177.03 315.293 li
177.57 315.403 li
178.1 315.497 li
178.64 315.591 li
179.18 315.701 li
179.71 315.795 li
180.25 315.89 li
180.79 316.016 li
181.32 316.11 li
181.86 316.22 li
182.4 316.314 li
182.93 316.408 li
183.47 316.518 li
184.01 316.612 li
184.55 316.723 li
185.08 316.817 li
185.62 315.906 li
186.16 314.979 li
186.69 314.067 li
187.23 313.156 li
187.77 312.23 li
188.3 311.318 li
188.84 311.476 li
189.38 311.617 li
189.91 311.774 li
190.45 311.931 li
190.99 312.072 li
191.52 312.198 li
192.06 312.355 li
192.6 312.512 li
193.13 312.654 li
193.67 312.811 li
194.21 312.937 li
194.74 313.094 li
195.28 313.251 li
195.82 313.392 li
196.36 313.549 li
196.89 313.675 li
197.43 313.832 li
197.97 313.989 li
198.5 314.13 li
199.04 314.256 li
199.58 314.413 li
200.11 314.57 li
200.65 314.728 li
201.19 314.853 li
201.72 315.01 li
202.26 315.151 li
202.8 315.293 li
203.33 315.434 li
203.87 315.591 li
204.41 315.921 li
204.94 316.267 li
205.48 316.628 li
206.02 316.958 li
206.56 317.304 li
207.09 317.649 li
207.63 317.995 li
208.17 318.34 li
208.7 318.686 li
209.24 319.032 li
209.78 319.377 li
210.31 319.739 li
210.85 320.068 li
211.39 320.414 li
211.92 320.76 li
.469 .035 .531 0 cmyk
@
146.431 315.858 mo
146.971 316.141 li
147.501 316.439 li
148.041 316.722 li
148.581 317.005 li
149.111 317.288 li
149.651 317.586 li
150.191 317.869 li
150.721 318.151 li
151.261 318.435 li
151.801 318.717 li
152.341 319.016 li
152.871 319.298 li
153.411 319.581 li
153.951 319.864 li
154.481 320.147 li
155.021 320.429 li
155.561 320.712 li
156.091 320.995 li
156.631 321.278 li
157.171 321.561 li
157.701 321.843 li
158.241 322.126 li
158.781 322.409 li
159.311 322.691 li
159.851 322.974 li
160.391 323.257 li
160.921 323.54 li
161.461 323.823 li
162.001 324.106 li
162.541 324.388 li
163.071 324.671 li
163.611 324.954 li
164.151 325.236 li
164.681 325.52 li
165.221 325.566 li
165.761 325.629 li
166.291 325.676 li
166.831 325.724 li
167.371 325.787 li
167.901 325.834 li
168.441 325.897 li
168.981 325.943 li
169.511 325.991 li
170.051 326.053 li
170.591 326.101 li
171.121 326.164 li
171.661 326.211 li
172.201 326.258 li
172.731 326.32 li
173.271 326.368 li
173.811 326.431 li
174.351 326.478 li
174.881 326.525 li
175.421 326.572 li
175.961 326.619 li
176.491 326.682 li
177.031 326.729 li
177.571 326.776 li
178.101 326.839 li
178.641 326.886 li
179.181 326.933 li
179.711 326.981 li
180.251 327.043 li
180.791 327.09 li
181.321 327.137 li
181.861 327.2 li
182.401 327.248 li
182.931 327.295 li
183.471 327.342 li
184.011 327.404 li
184.551 327.452 li
185.081 327.499 li
185.621 327.562 li
186.161 327.609 li
186.691 327.656 li
187.231 327.703 li
187.771 327.766 li
188.301 327.813 li
188.841 327.876 li
189.381 327.923 li
189.911 327.97 li
190.451 328.033 li
190.991 328.08 li
191.521 328.143 li
192.061 328.19 li
192.601 328.253 li
193.131 328.3 li
193.671 328.363 li
194.211 328.41 li
194.741 328.473 li
195.281 328.536 li
195.821 328.583 li
196.361 328.646 li
196.891 328.709 li
197.431 328.755 li
197.971 328.818 li
198.501 328.865 li
199.041 328.928 li
199.581 328.991 li
200.111 329.038 li
200.651 329.101 li
201.191 329.149 li
201.721 329.211 li
202.261 328.834 li
202.801 328.457 li
203.331 328.08 li
203.871 327.703 li
204.411 327.326 li
204.941 326.949 li
205.481 326.572 li
206.021 326.211 li
206.561 325.834 li
207.091 325.457 li
207.631 325.095 li
208.171 324.718 li
208.701 324.357 li
209.241 323.98 li
209.781 323.619 li
210.311 323.241 li
210.851 322.88 li
211.391 322.503 li
211.921 322.142 li
212.461 321.78 li
.793 .41 .07 0 cmyk
@
.5 lw
1 lc
10 ml
145.891 331.646 mo
212.461 331.646 li
212.461 278.171 li
145.891 278.171 li
cp
.746 .676 .668 .898 cmyk
@
1 lw
0 lc
1 ml
145.891 107.506 mo
146.431 107.679 li
146.971 108.04 li
147.501 108.213 li
148.041 108.385 li
148.581 108.543 li
149.111 108.888 li
149.651 109.061 li
150.191 109.234 li
150.721 109.391 li
151.261 109.721 li
151.801 109.894 li
152.341 110.067 li
152.871 110.224 li
153.411 110.397 li
153.951 110.711 li
154.481 110.868 li
155.021 111.041 li
155.561 111.197 li
156.091 111.496 li
156.631 111.669 li
157.171 111.826 li
157.701 112.125 li
158.241 112.281 li
158.781 112.439 li
159.311 112.611 li
159.851 112.894 li
160.391 113.051 li
160.921 113.209 li
161.461 113.475 li
162.001 113.632 li
162.541 113.79 li
163.071 113.947 li
163.611 114.214 li
164.151 114.371 li
164.681 114.528 li
165.221 114.685 li
165.761 114.937 li
166.291 115.093 li
166.831 115.235 li
167.371 115.392 li
167.901 115.643 li
168.441 115.785 li
168.981 115.942 li
169.511 116.099 li
170.051 116.335 li
170.591 116.476 li
171.121 116.633 li
171.661 116.775 li
172.201 117.01 li
172.731 117.152 li
173.271 117.309 li
173.811 117.45 li
174.351 117.67 li
174.881 117.811 li
175.421 117.953 li
175.961 118.173 li
176.491 118.314 li
177.031 118.455 li
177.571 118.754 li
178.101 119.115 li
178.641 119.414 li
179.181 119.696 li
179.711 119.995 li
180.251 120.294 li
180.791 120.592 li
181.321 120.859 li
181.861 121.157 li
182.401 121.456 li
182.931 121.755 li
183.471 122.053 li
184.011 122.351 li
184.551 122.65 li
185.081 122.948 li
185.621 122.964 li
186.161 122.964 li
186.691 122.98 li
187.231 122.98 li
187.771 122.995 li
188.301 122.995 li
188.841 123.011 li
189.381 122.995 li
189.911 123.011 li
190.451 123.011 li
190.991 123.027 li
191.521 123.027 li
192.061 123.027 li
192.601 123.027 li
193.131 123.043 li
193.671 123.043 li
194.211 123.043 li
194.741 123.058 li
195.281 123.058 li
195.821 123.074 li
196.361 123.074 li
196.891 123.074 li
197.431 123.089 li
197.971 123.089 li
198.501 123.106 li
199.041 123.121 li
199.581 123.121 li
200.111 123.137 li
200.651 123.152 li
201.191 123.152 li
201.721 123.168 li
202.261 123.168 li
202.801 123.184 li
203.331 123.2 li
203.871 123.2 li
204.411 123.247 li
204.941 123.294 li
205.481 123.341 li
206.021 123.373 li
206.561 123.42 li
207.091 123.467 li
207.631 123.514 li
208.171 123.545 li
208.701 123.592 li
209.241 123.639 li
209.781 123.671 li
210.311 123.718 li
210.851 123.75 li
211.391 123.797 li
211.921 123.828 li
212.461 123.592 li
0 .617 1 0 cmyk
@
147.501 110.93 mo
148.04 111.15 li
148.58 111.48 li
149.11 111.7 li
149.65 112.03 li
150.19 112.234 li
150.72 112.454 li
151.26 112.768 li
151.8 112.988 li
152.34 113.208 li
152.87 113.507 li
153.41 113.726 li
153.951 113.947 li
154.48 114.245 li
155.02 114.449 li
155.561 114.669 li
156.09 114.952 li
156.63 115.156 li
157.171 115.376 li
157.701 115.58 li
158.24 115.8 li
158.781 116.067 li
159.311 116.271 li
159.85 116.492 li
160.391 116.696 li
160.921 116.9 li
161.46 117.12 li
162.001 117.324 li
162.54 117.528 li
163.07 117.732 li
163.611 117.952 li
164.15 118.157 li
164.68 118.361 li
165.22 118.581 li
165.76 118.785 li
166.29 118.989 li
166.83 119.194 li
167.37 119.413 li
167.9 119.618 li
168.44 119.822 li
168.98 120.042 li
169.51 120.246 li
170.05 120.45 li
170.59 120.638 li
171.12 120.843 li
171.66 121.047 li
172.201 120.843 li
172.73 120.638 li
173.27 120.388 li
173.811 120.183 li
174.35 119.932 li
174.88 119.727 li
175.421 119.46 li
175.96 119.209 li
176.49 118.989 li
177.031 118.738 li
177.57 118.455 li
178.1 118.188 li
178.641 117.905 li
179.18 117.638 li
179.71 117.34 li
180.251 117.12 li
180.79 116.821 li
181.32 116.523 li
181.861 116.209 li
182.4 115.91 li
182.93 115.596 li
183.471 115.266 li
184.01 115.031 li
184.55 114.701 li
185.081 114.355 li
185.62 114.119 li
186.16 113.774 li
186.69 113.098 li
187.23 112.328 li
187.77 111.653 li
188.3 110.977 li
188.84 110.176 li
189.38 109.501 li
189.91 108.825 li
190.451 107.992 li
190.99 107.301 li
191.52 106.61 li
192.061 105.934 li
192.6 105.243 li
193.13 104.568 li
193.671 103.877 li
194.21 103.201 li
194.74 102.51 li
195.281 101.819 li
195.82 101.143 li
196.361 100.452 li
196.891 102.431 li
197.43 104.615 li
197.971 106.578 li
198.501 108.542 li
199.04 110.632 li
199.581 112.58 li
200.111 114.512 li
200.65 116.538 li
201.19 118.518 li
201.721 120.419 li
202.26 122.351 li
0 .32 .699 0 cmyk
@
145.891 77.2989 mo
146.431 77.2989 li
146.971 77.2989 li
147.501 77.2989 li
148.041 77.2989 li
148.364 77.2989 li
148.746 76.8919 li
148.84 76.7916 148.973 76.7339 149.111 76.7339 cv
149.651 76.7339 li
150.191 76.7339 li
150.721 76.7339 li
151.038 76.7339 li
151.43 76.3008 li
151.524 76.1962 151.66 76.1359 151.801 76.1359 cv
152.341 76.1359 li
152.871 76.1359 li
153.411 76.1359 li
153.722 76.1359 li
154.103 75.6966 li
154.197 75.5872 154.336 75.5239 154.481 75.5239 cv
155.021 75.5239 li
155.561 75.5239 li
156.091 75.5239 li
156.631 75.5239 li
156.942 75.5239 li
157.322 75.0839 li
157.417 74.9745 157.556 74.911 157.701 74.911 cv
158.241 74.911 li
158.35 74.911 158.456 74.9466 158.542 75.0124 cv
159.083 75.4213 li
159.086 75.4238 li
159.395 75.6616 li
159.674 75.5562 li
159.835 75.4954 160.015 75.5211 160.152 75.6249 cv
160.692 76.0329 li
160.703 76.0418 li
161.011 76.2883 li
161.284 76.1851 li
161.448 76.1232 161.631 76.1512 161.769 76.2592 cv
162.305 76.679 li
162.842 77.0863 li
162.853 77.0945 li
163.167 77.3456 li
163.445 77.248 li
163.606 77.1918 163.786 77.2215 163.92 77.327 cv
164.46 77.752 li
164.463 77.7544 li
164.993 78.1785 li
164.996 78.1809 li
165.534 78.6181 li
165.86 78.8746 li
166.135 78.7846 li
166.294 78.7328 166.468 78.7634 166.599 78.8667 cv
167.139 79.2906 li
167.146 79.2963 li
167.686 79.7362 li
167.683 79.7338 li
168.213 80.1588 li
168.216 80.1609 li
168.752 80.5967 li
169.093 80.8646 li
169.382 80.7877 li
169.537 80.7465 169.702 80.7821 169.826 80.8833 cv
170.366 81.3232 li
170.522 81.5453 li
171.062 83.0844 li
171.063 83.0872 li
171.581 84.5904 li
172.103 85.5772 li
172.133 85.6469 li
172.673 87.2019 li
172.674 87.2047 li
173.204 88.7607 li
173.203 88.7579 li
173.733 90.2849 li
174.261 91.374 li
174.284 91.4308 li
174.816 92.9943 li
175.335 94.1334 li
175.354 94.1813 li
175.887 95.7626 li
176.418 96.9672 li
176.436 97.0132 li
176.966 98.6312 li
177.499 100.246 li
178.033 101.534 li
178.047 101.572 li
178.577 103.221 li
178.576 103.218 li
179.112 104.856 li
179.647 106.242 li
179.657 106.27 li
180.187 107.935 li
180.727 109.615 li
181.195 111.059 li
181.512 111.191 li
181.521 111.195 li
182.055 111.428 li
182.589 111.646 li
182.698 111.707 li
183.177 112.062 li
183.658 112.258 li
183.66 112.258 li
184.2 112.479 li
184.199 112.479 li
184.738 112.698 li
184.742 112.699 li
185.272 112.919 li
185.269 112.918 li
185.809 113.138 li
185.899 113.185 li
186.398 113.52 li
186.882 113.72 li
186.88 113.719 li
187.42 113.94 li
187.5 113.982 li
188.003 114.303 li
188.492 114.506 li
188.489 114.505 li
189.029 114.725 li
189.101 114.761 li
189.602 115.068 li
190.09 115.255 li
190.171 115.295 li
190.672 115.601 li
191.167 115.788 li
191.245 115.826 li
191.768 116.135 li
192.271 116.414 li
192.777 116.605 li
192.846 116.637 li
193.37 116.932 li
193.876 117.197 li
194.388 117.392 li
194.435 117.412 li
194.966 117.679 li
194.972 117.683 li
195.502 117.959 li
196.009 118.196 li
196.525 118.376 li
196.575 118.396 li
197.105 118.647 li
197.102 118.646 li
197.642 118.898 li
198.181 119.148 li
197.971 119.602 li
198.174 119.145 li
198.696 119.378 li
199.229 119.595 li
199.241 119.6 li
199.776 119.834 li
200.295 120.048 li
200.827 120.249 li
200.84 120.254 li
201.373 120.472 li
201.894 120.673 li
202.425 120.858 li
202.437 120.862 li
202.977 121.066 li
202.993 121.072 li
203.509 121.288 li
204.016 121.464 li
204.537 121.6 li
204.566 121.609 li
205.088 121.779 li
205.614 121.932 li
206.148 122.072 li
206.16 122.076 li
206.689 122.23 li
207.206 122.353 li
207.217 122.355 li
207.753 122.495 li
208.284 122.619 li
208.299 122.623 li
208.822 122.762 li
209.346 122.884 li
209.88 122.993 li
209.895 122.996 li
210.425 123.121 li
210.424 123.121 li
210.957 123.245 li
211.441 123.344 li
211.921 123.344 li
211.921 124.344 li
211.391 124.344 li
211.291 124.334 li
210.751 124.224 li
210.737 124.221 li
210.197 124.095 li
210.196 124.095 li
209.673 123.971 li
209.141 123.863 li
209.127 123.86 li
208.587 123.734 li
208.572 123.73 li
208.049 123.591 li
207.517 123.467 li
207.504 123.464 li
206.967 123.323 li
206.445 123.199 li
206.421 123.193 li
205.887 123.038 li
205.353 122.897 li
205.341 122.894 li
204.801 122.737 li
204.785 122.732 li
204.27 122.564 li
203.744 122.427 li
203.706 122.415 li
203.166 122.227 li
203.138 122.216 li
202.62 122 li
202.089 121.8 li
201.556 121.614 li
201.541 121.609 li
201.011 121.405 li
201.001 121.401 li
200.468 121.183 li
199.934 120.981 li
199.92 120.975 li
199.39 120.756 li
199.38 120.752 li
198.844 120.518 li
198.312 120.301 li
198.297 120.295 li
197.767 120.059 li
197.76 120.055 li
197.22 119.804 li
196.679 119.552 li
196.677 119.551 li
196.171 119.311 li
195.656 119.132 li
195.609 119.113 li
195.069 118.861 li
195.049 118.851 li
194.509 118.569 li
194.741 118.126 li
194.516 118.573 li
194.008 118.317 li
193.493 118.121 li
193.439 118.097 li
192.898 117.814 li
192.885 117.807 li
192.389 117.527 li
191.884 117.337 li
191.818 117.306 li
191.278 117.007 li
191.266 117 li
190.773 116.708 li
190.274 116.52 li
190.19 116.479 li
189.689 116.172 li
189.201 115.985 li
189.12 115.945 li
188.614 115.636 li
188.112 115.431 li
188.109 115.43 li
187.579 115.21 li
187.501 115.169 li
186.999 114.849 li
186.501 114.645 li
186.5 114.644 li
185.97 114.425 li
185.882 114.378 li
185.385 114.045 li
184.892 113.844 li
184.889 113.843 li
184.359 113.623 li
184.363 113.624 li
183.823 113.405 li
183.821 113.405 li
183.281 113.184 li
183.283 113.184 li
182.743 112.965 li
182.633 112.903 li
182.153 112.548 li
181.672 112.352 li
181.66 112.347 li
181.12 112.111 li
181.321 111.653 li
181.129 112.115 li
180.599 111.895 li
180.464 111.839 180.36 111.726 180.315 111.587 cv
179.775 109.922 li
179.235 108.24 li
178.709 106.588 li
178.174 105.204 li
178.165 105.179 li
177.625 103.529 li
177.625 103.527 li
177.101 101.898 li
176.569 100.612 li
176.556 100.578 li
176.016 98.9438 li
175.493 97.3483 li
174.963 96.1456 li
174.947 96.1035 li
174.415 94.5248 li
173.896 93.3863 li
173.877 93.3399 li
173.347 91.7818 li
172.821 90.6949 li
172.798 90.6409 li
172.258 89.0859 li
172.257 89.0832 li
171.727 87.5272 li
171.728 87.5299 li
171.201 86.0108 li
170.679 85.0237 li
170.648 84.9525 li
170.118 83.4126 li
170.119 83.4155 li
169.625 82.0095 li
169.393 81.8198 li
169.109 81.8951 li
168.957 81.9354 168.795 81.9021 168.672 81.8051 cv
168.132 81.3811 li
168.125 81.3759 li
167.585 80.9369 li
167.588 80.939 li
167.058 80.514 li
167.055 80.5115 li
166.52 80.0761 li
166.192 79.8181 li
165.916 79.9081 li
165.757 79.9601 165.583 79.9292 165.451 79.8258 cv
164.911 79.4009 li
164.905 79.3959 li
164.365 78.9569 li
164.368 78.9593 li
163.838 78.5352 li
163.841 78.5378 li
163.517 78.2824 li
163.236 78.3807 li
163.073 78.4376 162.893 78.4069 162.758 78.2993 cv
162.235 77.8807 li
161.699 77.4745 li
161.692 77.4694 li
161.374 77.2202 li
161.097 77.3247 li
160.932 77.3872 160.746 77.3578 160.608 77.247 cv
160.084 76.827 li
159.769 76.5892 li
159.487 76.6956 li
159.325 76.757 159.143 76.73 159.006 76.6241 cv
158.476 76.2161 li
158.479 76.2184 li
158.072 75.9109 li
157.929 75.9109 li
157.549 76.3508 li
157.454 76.4603 157.315 76.5239 157.171 76.5239 cv
156.631 76.5239 li
156.091 76.5239 li
155.561 76.5239 li
155.021 76.5239 li
154.709 76.5239 li
154.328 76.9632 li
154.234 77.0727 154.095 77.1359 153.951 77.1359 cv
153.411 77.1359 li
152.871 77.1359 li
152.341 77.1359 li
152.023 77.1359 li
151.632 77.569 li
151.537 77.6738 151.402 77.7339 151.261 77.7339 cv
150.721 77.7339 li
150.191 77.7339 li
149.651 77.7339 li
149.327 77.7339 li
148.945 78.1409 li
148.851 78.2412 148.718 78.2989 148.581 78.2989 cv
148.041 78.2989 li
147.501 78.2989 li
146.971 78.2989 li
146.431 78.2989 li
145.891 78.2989 li
145.891 77.2989 li
/1 
[/DeviceCMYK] /CSA add_res
.0235294 .886274 .901961 0 cmyk
f
149.11 88.6387 mo
149.65 89.2987 li
150.19 89.9427 li
150.72 90.5867 li
151.26 91.2457 li
151.8 91.8907 li
152.34 92.5507 li
152.87 93.5087 li
153.41 94.4507 li
153.95 95.3627 li
154.48 96.0067 li
155.02 96.9017 li
155.56 97.7817 li
156.09 98.4097 li
156.63 99.0227 li
157.17 99.6507 li
157.7 100.499 li
158.24 101.112 li
158.78 101.725 li
159.31 102.542 li
159.85 103.155 li
160.39 103.751 li
160.92 104.364 li
161.46 104.977 li
162 105.574 li
162.54 106.186 li
163.07 106.956 li
163.61 107.16 li
164.15 107.365 li
164.68 107.569 li
165.22 107.773 li
165.76 107.977 li
166.29 108.181 li
166.83 108.386 li
167.37 108.59 li
167.9 108.794 li
168.44 108.841 li
168.98 109.061 li
169.51 109.265 li
170.05 109.47 li
170.59 109.674 li
171.12 109.737 li
171.66 109.941 li
172.2 110.019 li
172.73 110.224 li
173.27 110.428 li
173.81 110.648 li
174.35 110.726 li
174.88 110.931 li
175.42 111.025 li
175.96 111.229 li
176.49 111.324 li
177.03 111.402 li
177.57 111.622 li
178.1 111.842 li
178.64 112.062 li
179.18 112.391 li
179.71 112.502 li
180.25 112.722 li
180.79 112.926 li
181.32 113.256 li
181.86 113.475 li
182.4 113.696 li
182.93 113.9 li
183.47 114.12 li
184.01 114.34 li
184.55 114.559 li
185.08 114.67 li
185.62 114.984 li
186.16 115.204 li
186.69 115.408 li
187.23 115.628 li
187.77 115.769 li
188.3 115.973 li
188.84 116.193 li
189.38 116.413 li
189.91 116.633 li
190.45 116.853 li
190.99 117.073 li
191.52 117.356 li
192.06 117.576 li
192.6 117.78 li
193.13 118 li
193.67 118.22 li
194.21 118.424 li
194.74 118.707 li
195.28 118.911 li
195.82 119.084 li
196.36 119.288 li
196.89 119.508 li
197.43 119.335 li
197.97 119.225 li
198.5 119.005 li
199.04 118.833 li
199.58 118.722 li
200.11 118.55 li
0 .73 .508 0 cmyk
@
148.581 81.022 mo
149.111 81.022 li
149.454 81.022 li
149.85 80.6539 li
149.942 80.5682 150.065 80.5201 150.191 80.5201 cv
150.721 80.5201 li
151.261 80.5201 li
151.801 80.5201 li
152.341 80.5201 li
152.871 80.5201 li
153.411 80.5201 li
153.951 80.5201 li
154.481 80.5201 li
155.021 80.5201 li
155.561 80.5201 li
156.091 80.5201 li
156.631 80.5201 li
157.171 80.5201 li
157.701 80.5201 li
158.241 80.5201 li
158.781 80.5201 li
159.311 80.5201 li
159.851 80.5201 li
160.391 80.5201 li
160.518 80.5201 160.642 80.5692 160.734 80.6571 cv
161.12 81.022 li
161.461 81.022 li
162.001 81.022 li
162.541 81.022 li
163.071 81.022 li
163.611 81.022 li
164.151 81.022 li
164.276 81.022 164.396 81.0688 164.489 81.1538 cv
164.875 81.5091 li
165.221 81.5091 li
165.761 81.5091 li
166.291 81.5091 li
166.831 81.5091 li
166.952 81.5091 167.067 81.5522 167.159 81.6323 cv
167.558 81.9801 li
167.901 81.9801 li
168.441 81.9801 li
168.981 81.9801 li
169.511 81.9801 li
169.632 81.9801 169.748 82.0235 169.84 82.1036 cv
170.238 82.4521 li
170.591 82.4521 li
171.121 82.4521 li
171.32 82.4521 171.501 82.5718 171.58 82.7548 cv
172.12 84.0116 li
172.137 84.0573 li
172.67 85.7317 li
173.191 86.9678 li
173.19 86.9645 li
173.73 88.2206 li
173.745 88.2598 li
174.278 89.858 li
174.809 91.0786 li
174.81 91.0817 li
175.34 92.3226 li
175.339 92.3196 li
175.879 93.5605 li
175.893 93.5959 li
176.427 95.1336 li
176.95 96.3427 li
176.948 96.3394 li
177.488 97.5643 li
177.501 97.5959 li
178.035 99.072 li
178.559 100.267 li
178.557 100.264 li
179.097 101.473 li
179.637 102.683 li
179.649 102.713 li
180.173 104.127 li
180.706 105.305 li
181.246 106.499 li
181.257 106.524 li
181.782 107.878 li
182.316 109.059 li
182.315 109.057 li
182.855 110.235 li
182.858 110.24 li
183.388 111.434 li
183.392 111.446 li
183.929 112.74 li
184.464 113.894 li
184.471 113.909 li
185.008 115.174 li
185.534 116.328 li
186.073 117.473 li
186.074 117.475 li
186.614 118.637 li
186.618 118.647 li
186.772 118.999 li
186.809 118.941 li
186.806 118.945 li
187.346 118.08 li
187.356 118.065 li
187.883 117.286 li
188.421 116.455 li
188.419 116.458 li
188.959 115.611 li
188.972 115.591 li
189.496 114.845 li
190.031 114.021 li
190.571 113.187 li
190.591 113.159 li
191.11 112.466 li
191.641 111.648 li
191.643 111.644 li
192.183 110.827 li
192.204 110.799 li
192.723 110.122 li
193.253 109.319 li
193.794 108.502 li
193.791 108.506 li
194.321 107.689 li
194.357 107.64 li
194.898 106.996 li
195.004 106.869 195.164 106.803 195.328 106.819 cv
195.493 106.835 195.638 106.93 195.718 107.075 cv
196.258 108.049 li
196.256 108.046 li
196.796 109.005 li
196.812 109.035 li
197.335 110.135 li
197.866 111.078 li
197.878 111.1 li
198.413 112.173 li
198.937 113.105 li
199.476 114.062 li
199.484 114.077 li
200.02 115.107 li
200.546 116.042 li
200.551 116.05 li
201.087 117.049 li
201.624 117.986 li
202.155 118.914 li
202.158 118.92 li
202.695 119.889 li
203.137 120.647 li
203.472 120.756 li
203.997 120.893 li
204.023 120.901 li
204.558 121.072 li
205.083 121.228 li
205.08 121.227 li
205.614 121.382 li
206.147 121.521 li
206.173 121.529 li
206.702 121.698 li
207.22 121.837 li
207.23 121.84 li
207.766 121.996 li
208.297 122.134 li
208.313 122.139 li
208.836 122.294 li
209.368 122.433 li
209.367 122.433 li
209.907 122.574 li
209.923 122.579 li
210.445 122.733 li
210.971 122.871 li
211.504 122.995 li
211.594 123.016 211.674 123.06 211.74 123.125 cv
212.27 123.644 li
211.571 124.358 li
211.141 123.937 li
210.737 123.843 li
210.724 123.84 li
210.184 123.699 li
210.169 123.694 li
209.648 123.54 li
209.114 123.401 li
209.113 123.401 li
208.573 123.259 li
208.559 123.254 li
208.036 123.1 li
207.504 122.961 li
207.491 122.957 li
206.953 122.801 li
206.431 122.661 li
206.408 122.654 li
205.881 122.486 li
205.354 122.348 li
205.341 122.344 li
204.801 122.187 li
204.799 122.186 li
204.268 122.029 li
204.258 122.026 li
203.731 121.857 li
203.204 121.72 li
203.175 121.711 li
202.645 121.538 li
202.53 121.501 202.43 121.42 202.369 121.315 cv
201.828 120.388 li
201.823 120.379 li
201.283 119.405 li
201.721 119.162 li
201.286 119.41 li
200.757 118.483 li
200.217 117.542 li
200.21 117.53 li
199.673 116.529 li
199.145 115.59 li
199.137 115.576 li
198.601 114.546 li
198.065 113.596 li
197.535 112.652 li
197.523 112.63 li
196.989 111.558 li
196.455 110.61 li
196.439 110.58 li
195.916 109.48 li
195.385 108.536 li
195.383 108.533 li
195.196 108.196 li
195.143 108.259 li
194.63 109.05 li
194.628 109.054 li
194.088 109.871 li
193.548 110.688 li
193.527 110.716 li
193.008 111.394 li
192.478 112.196 li
192.48 112.192 li
191.94 113.025 li
191.92 113.053 li
191.401 113.745 li
190.87 114.565 li
190.33 115.397 li
190.32 115.412 li
189.796 116.157 li
189.262 116.996 li
189.26 116.999 li
188.72 117.832 li
188.715 117.84 li
188.191 118.616 li
187.655 119.475 li
187.652 119.479 li
187.112 120.327 li
187.013 120.483 186.837 120.571 186.652 120.557 cv
186.468 120.542 186.307 120.428 186.233 120.259 cv
185.706 119.057 li
185.167 117.897 li
185.168 117.899 li
184.628 116.752 li
184.626 116.746 li
184.096 115.583 li
184.09 115.571 li
183.554 114.307 li
183.017 113.152 li
183.009 113.132 li
182.471 111.835 li
181.945 110.649 li
181.406 109.473 li
181.405 109.471 li
180.865 108.277 li
180.854 108.252 li
180.329 106.898 li
179.795 105.717 li
179.255 104.523 li
179.242 104.491 li
178.717 103.076 li
178.184 101.881 li
177.644 100.672 li
177.643 100.669 li
177.113 99.4587 li
177.1 99.4281 li
176.566 97.9519 li
176.033 96.7427 li
176.032 96.7394 li
175.502 95.5134 li
175.488 95.4791 li
174.954 93.9415 li
174.422 92.7184 li
174.421 92.7153 li
173.891 91.4744 li
173.892 91.4775 li
173.352 90.2365 li
173.336 90.1953 li
172.803 88.5961 li
172.271 87.3595 li
172.27 87.3563 li
171.74 86.0992 li
171.724 86.0568 li
171.192 84.3843 li
170.791 83.4521 li
170.591 83.4521 li
170.051 83.4521 li
169.929 83.4521 169.813 83.4087 169.721 83.3285 cv
169.323 82.9801 li
168.981 82.9799 li
168.441 82.9799 li
167.901 82.9799 li
167.371 82.9799 li
167.249 82.9799 167.134 82.9369 167.042 82.8568 cv
166.643 82.5091 li
166.291 82.5089 li
165.761 82.5089 li
165.221 82.5089 li
164.681 82.5089 li
164.555 82.5089 164.435 82.4623 164.342 82.3772 cv
163.956 82.022 li
163.611 82.022 li
163.071 82.022 li
162.541 82.022 li
162.001 82.022 li
161.461 82.022 li
160.921 82.022 li
160.793 82.022 160.67 81.973 160.577 81.8851 cv
160.191 81.52 li
159.851 81.52 li
159.311 81.52 li
158.781 81.52 li
158.241 81.52 li
157.701 81.52 li
157.171 81.52 li
156.631 81.52 li
156.091 81.52 li
155.561 81.52 li
155.021 81.52 li
154.481 81.52 li
153.951 81.52 li
153.411 81.52 li
152.871 81.52 li
152.341 81.52 li
151.801 81.52 li
151.261 81.52 li
150.721 81.52 li
150.387 81.52 li
149.991 81.8883 li
149.899 81.9739 149.776 82.022 149.651 82.022 cv
149.111 82.022 li
148.581 82.022 li
148.581 81.022 li
.439216 .27451 .733333 .0392157 cmyk
f
145.891 100.012 mo
146.431 100.279 li
146.971 100.766 li
147.501 101.017 li
148.041 101.505 li
148.581 101.756 li
149.111 102.007 li
149.651 102.478 li
150.191 102.73 li
150.721 102.981 li
151.261 103.437 li
151.801 103.672 li
152.341 103.924 li
152.871 104.364 li
153.411 104.615 li
153.951 104.85 li
154.481 105.102 li
155.021 105.526 li
155.561 105.778 li
156.091 106.013 li
156.631 106.249 li
157.171 106.673 li
157.701 106.908 li
158.241 107.144 li
158.781 107.38 li
159.311 107.788 li
159.851 108.024 li
160.391 108.26 li
160.921 108.495 li
161.461 108.888 li
162.001 109.124 li
162.541 109.359 li
163.071 109.595 li
163.611 109.956 li
164.151 110.192 li
164.681 110.428 li
165.221 110.663 li
165.761 110.899 li
166.291 111.118 li
166.831 111.354 li
167.371 111.59 li
167.901 111.825 li
168.441 112.061 li
168.981 112.407 li
169.511 112.627 li
170.051 112.753 li
170.591 112.988 li
171.121 113.224 li
171.661 113.554 li
172.201 113.695 li
172.731 113.93 li
173.271 114.151 li
173.811 114.387 li
174.351 114.622 li
174.881 114.858 li
175.421 115.093 li
175.961 115.329 li
176.491 115.565 li
177.031 115.784 li
177.571 116.02 li
178.101 116.256 li
178.641 116.491 li
179.181 116.727 li
179.711 116.963 li
180.251 117.198 li
180.791 117.418 li
181.321 117.654 li
181.861 117.889 li
182.401 118.125 li
182.931 118.361 li
183.471 118.596 li
184.011 118.832 li
184.551 119.052 li
185.081 119.288 li
185.621 119.523 li
186.161 119.759 li
186.691 119.994 li
187.231 120.23 li
187.771 120.466 li
188.301 120.686 li
188.841 120.921 li
189.381 121.157 li
189.911 121.424 li
190.451 121.644 li
190.991 121.88 li
191.521 122.116 li
192.061 122.335 li
192.601 122.571 li
193.131 122.806 li
193.671 123.042 li
194.211 123.278 li
194.741 123.498 li
195.281 123.734 li
195.821 123.718 li
196.361 123.718 li
196.891 123.702 li
197.431 123.686 li
197.971 123.686 li
198.501 123.671 li
199.041 123.671 li
199.581 123.655 li
200.111 123.655 li
200.651 123.639 li
201.191 123.623 li
201.721 123.623 li
202.261 123.608 li
202.801 123.608 li
203.331 123.592 li
203.871 123.576 li
204.411 123.576 li
204.941 123.561 li
205.481 123.561 li
206.021 123.545 li
206.561 123.545 li
207.091 123.529 li
207.631 123.529 li
208.171 123.513 li
208.701 123.513 li
209.241 123.513 li
209.781 123.498 li
210.311 123.498 li
210.851 123.482 li
211.391 123.482 li
.652 .027 .941 0 cmyk
@
149.11 106.438 mo
149.65 107.412 li
150.19 108.355 li
150.72 109.125 li
151.26 110.051 li
151.8 110.947 li
152.34 111.826 li
152.87 112.564 li
153.41 113.429 li
153.95 114.261 li
154.48 114.984 li
155.02 115.801 li
155.56 116.602 li
156.09 117.309 li
156.63 118.094 li
157.17 118.786 li
157.7 119.54 li
158.24 120.278 li
158.78 120.969 li
159.31 121.079 li
159.85 121.158 li
160.39 121.268 li
160.92 121.346 li
161.46 121.456 li
162 121.535 li
162.54 121.645 li
163.07 121.723 li
163.61 121.817 li
164.15 121.896 li
164.68 121.975 li
165.22 122.069 li
165.76 122.147 li
166.29 122.242 li
166.83 122.32 li
167.37 122.399 li
167.9 122.478 li
168.44 122.572 li
168.98 122.634 li
169.51 122.713 li
170.05 122.792 li
170.59 122.87 li
171.12 122.949 li
171.66 123.027 li
172.2 123.106 li
172.73 123.184 li
173.27 123.247 li
173.81 122.949 li
174.35 122.65 li
174.88 122.336 li
175.42 122.038 li
175.96 121.723 li
176.49 121.409 li
177.03 121.111 li
177.57 120.796 li
178.1 120.498 li
178.64 120.184 li
179.18 119.885 li
179.71 119.571 li
180.25 119.272 li
180.79 118.911 li
181.32 118.597 li
181.86 118.299 li
182.4 117.984 li
182.93 117.67 li
183.47 117.356 li
184.01 117.058 li
184.55 116.744 li
185.08 116.429 li
185.62 117.544 li
186.16 118.66 li
186.69 119.775 li
187.23 120.906 li
187.77 122.022 li
188.3 123.137 li
188.84 123.106 li
189.38 123.09 li
189.91 123.059 li
190.45 123.027 li
190.99 123.012 li
191.52 122.996 li
192.06 122.964 li
192.6 122.949 li
193.13 122.917 li
193.67 122.901 li
194.21 122.886 li
194.74 122.855 li
195.28 122.839 li
195.82 122.807 li
196.36 122.792 li
196.89 122.776 li
197.43 122.76 li
197.97 122.729 li
198.5 122.713 li
199.04 122.697 li
199.58 122.666 li
200.11 122.65 li
200.65 122.619 li
201.19 122.619 li
201.72 122.587 li
202.26 122.572 li
202.8 122.556 li
203.33 122.54 li
203.87 122.509 li
204.41 122.587 li
204.94 122.65 li
205.48 122.713 li
206.02 122.792 li
206.56 122.855 li
207.09 122.917 li
207.63 122.98 li
208.17 123.043 li
208.7 123.106 li
209.24 123.184 li
209.78 123.231 li
210.31 123.294 li
210.85 123.373 li
211.39 123.42 li
211.92 123.499 li
.469 .035 .531 0 cmyk
@
146.431 104.16 mo
146.971 104.364 li
147.501 104.348 li
148.041 104.553 li
148.581 104.757 li
149.111 104.961 li
149.651 104.945 li
150.191 105.165 li
150.721 105.369 li
151.261 105.574 li
151.801 105.778 li
152.341 105.778 li
152.871 105.982 li
153.411 106.202 li
153.951 106.407 li
154.481 106.407 li
155.021 106.626 li
155.561 106.83 li
156.091 107.051 li
156.631 107.255 li
157.171 107.474 li
157.701 107.695 li
158.241 107.899 li
158.781 108.118 li
159.311 108.323 li
159.851 108.543 li
160.391 108.747 li
160.921 108.967 li
161.461 109.187 li
162.001 109.391 li
162.541 109.611 li
163.071 109.988 li
163.611 110.192 li
164.151 110.412 li
164.681 110.617 li
165.221 110.805 li
165.761 110.993 li
166.291 111.182 li
166.831 111.528 li
167.371 111.716 li
167.901 111.905 li
168.441 112.093 li
168.981 112.423 li
169.511 112.596 li
170.051 112.785 li
170.591 112.973 li
171.121 113.287 li
171.661 113.475 li
172.201 113.648 li
172.731 113.947 li
173.271 114.136 li
173.811 114.324 li
174.351 114.607 li
174.881 114.889 li
175.421 115.062 li
175.961 115.345 li
176.491 115.518 li
177.031 115.785 li
177.571 116.052 li
178.101 116.225 li
178.641 116.476 li
179.181 116.727 li
179.711 116.979 li
180.251 117.136 li
180.791 117.371 li
181.321 117.607 li
181.861 117.78 li
182.401 118 li
182.931 118.22 li
183.471 118.44 li
184.011 118.597 li
184.551 118.817 li
185.081 119.021 li
185.621 119.178 li
186.161 119.383 li
186.691 119.524 li
187.231 119.728 li
187.771 119.916 li
188.301 120.074 li
188.841 120.215 li
189.381 120.404 li
189.911 120.561 li
190.451 120.733 li
190.991 120.89 li
191.521 121.032 li
192.061 121.173 li
192.601 121.33 li
193.131 121.472 li
193.671 121.629 li
194.211 121.77 li
194.741 121.911 li
195.281 122.037 li
195.821 122.195 li
196.361 122.336 li
196.891 122.477 li
197.431 122.618 li
197.971 122.776 li
198.501 122.917 li
199.041 123.058 li
199.581 123.2 li
200.111 123.357 li
200.651 123.514 li
201.191 123.656 li
201.721 123.812 li
202.261 123.828 li
202.801 123.828 li
203.331 123.844 li
203.871 123.844 li
204.411 123.86 li
204.941 123.875 li
205.481 123.875 li
206.021 123.891 li
206.561 123.907 li
207.091 123.907 li
207.631 123.923 li
208.171 123.923 li
208.701 123.938 li
209.241 123.954 li
209.781 123.97 li
210.311 123.97 li
210.851 123.985 li
211.391 124.001 li
211.921 124.001 li
212.461 124.017 li
.793 .41 .07 0 cmyk
@
145.891 126.452 mo
145.891 126.202 li
212.211 126.202 li
212.211 73.226 li
146.141 73.226 li
146.141 126.452 li
145.891 126.452 li
145.891 126.202 li
145.891 126.452 li
145.641 126.452 li
145.641 72.976 li
145.714 72.7992 li
145.891 72.7261 li
212.461 72.7261 li
212.638 72.7992 li
212.711 72.976 li
212.711 126.452 li
212.638 126.629 li
212.461 126.702 li
145.891 126.702 li
145.714 126.629 li
145.641 126.452 li
145.891 126.452 li
.745098 .67451 .666667 .898039 cmyk
f
203.871 225.004 mo
204.411 225.507 li
204.941 225.915 li
205.481 226.434 li
206.021 226.952 li
206.561 227.377 li
207.091 227.895 li
207.631 228.335 li
208.171 228.869 li
208.701 229.324 li
209.241 229.796 li
209.781 230.33 li
210.311 230.817 li
210.851 231.319 li
211.391 231.885 li
211.921 232.403 li
212.461 230.895 li
0 .617 1 0 cmyk
@
196.36 188.278 mo
196.677 188.278 li
197.069 187.867 li
197.164 187.768 197.293 187.713 197.43 187.713 cv
197.97 187.713 li
198.278 187.713 li
198.669 187.28 li
198.764 187.175 198.899 187.115 199.04 187.115 cv
199.58 187.115 li
199.889 187.115 li
200.28 186.683 li
200.82 186.086 li
200.914 185.982 201.049 185.922 201.19 185.922 cv
201.491 185.922 li
201.881 185.467 li
202.64 186.118 li
202.1 186.747 li
202.004 186.859 201.867 186.922 201.72 186.922 cv
201.412 186.922 li
201.021 187.354 li
200.481 187.951 li
200.386 188.055 200.251 188.115 200.11 188.115 cv
199.58 188.115 li
199.263 188.115 li
198.872 188.548 li
198.777 188.653 198.641 188.713 198.5 188.713 cv
197.97 188.713 li
197.644 188.713 li
197.252 189.123 li
197.157 189.223 197.028 189.278 196.89 189.278 cv
196.36 189.278 li
196.36 188.278 li
0 .321569 .698039 0 cmyk
f
204.357 196.124 mo
204.895 198.376 li
205.422 200.268 li
205.428 200.292 li
205.968 202.68 li
205.969 202.683 li
206.507 205.127 li
207.046 207.288 li
207.05 207.309 li
207.579 209.897 li
208.118 212.278 li
208.121 212.292 li
208.661 215.042 li
208.661 215.039 li
209.191 217.646 li
209.192 217.655 li
209.732 220.578 li
210.273 223.565 li
210.803 226.534 li
210.803 226.537 li
211.343 229.664 li
211.344 229.668 li
211.884 232.951 li
211.391 233.032 li
210.907 232.905 li
211.437 230.879 li
212.404 231.132 li
211.874 233.158 li
211.815 233.386 211.603 233.542 211.367 233.531 cv
211.132 233.52 210.935 233.345 210.897 233.113 cv
210.357 229.83 li
210.358 229.834 li
209.818 226.707 li
209.818 226.71 li
209.288 223.742 li
208.749 220.758 li
208.21 217.842 li
207.681 215.238 li
207.68 215.235 li
207.141 212.493 li
206.603 210.112 li
206.601 210.102 li
206.073 207.519 li
205.535 205.363 li
205.532 205.349 li
204.992 202.898 li
204.993 202.901 li
204.456 200.525 li
203.929 198.636 li
203.924 198.618 li
203.384 196.356 li
204.357 196.124 li
204.357 196.124 li
.0235294 .886274 .901961 0 cmyk
f
196.891 213.175 mo
197.431 214.401 li
197.971 215.406 li
198.501 216.883 li
199.041 218.108 li
199.581 219.16 li
200.111 220.402 li
0 .73 .508 0 cmyk
@
195.28 217.998 mo
195.82 218.894 li
196.36 219.789 li
196.89 220.496 li
197.43 221.407 li
197.97 222.161 li
198.5 223.072 li
199.04 223.983 li
199.58 224.769 li
200.11 225.696 li
200.65 226.528 li
201.19 227.455 li
201.72 228.398 li
202.26 229.262 li
202.8 230.22 li
203.33 230.314 li
203.87 230.456 li
204.41 230.55 li
204.94 230.707 li
205.48 230.817 li
206.02 230.958 li
206.56 231.068 li
207.09 231.226 li
207.63 231.335 li
208.17 231.493 li
208.7 231.618 li
209.24 231.728 li
209.78 231.901 li
210.31 232.011 li
210.85 232.152 li
211.39 232.31 li
211.92 234.399 li
.438 .273 .734 .039 cmyk
@
195.28 223.339 mo
195.82 223.622 li
196.36 223.779 li
196.89 224.077 li
197.43 224.376 li
197.97 224.533 li
198.5 224.832 li
199.04 225.146 li
199.58 225.444 li
200.11 225.617 li
200.65 225.931 li
201.19 226.12 li
201.72 226.418 li
202.26 226.733 li
202.8 226.937 li
203.33 227.251 li
203.87 227.565 li
204.41 227.785 li
204.94 228.099 li
205.48 228.335 li
206.02 228.649 li
206.56 228.884 li
207.09 229.214 li
207.63 229.466 li
208.17 229.796 li
208.7 230.063 li
209.24 230.408 li
209.78 230.675 li
210.31 231.021 li
210.85 231.304 li
211.39 231.602 li
.652 .027 .941 0 cmyk
@
203.871 228.382 mo
204.411 228.57 li
204.941 228.869 li
205.481 229.152 li
206.021 229.356 li
206.561 229.654 li
207.091 229.953 li
207.631 230.173 li
208.171 230.471 li
208.701 230.77 li
209.241 231.006 li
209.781 231.304 li
210.311 231.602 li
210.851 231.854 li
211.391 232.168 li
211.921 232.435 li
.469 .035 .531 0 cmyk
@
201.721 217.228 mo
202.261 218.233 li
202.801 219.191 li
203.331 219.977 li
203.871 220.919 li
204.411 221.831 li
204.941 222.585 li
205.481 223.48 li
206.021 224.344 li
206.561 225.193 li
207.091 226.025 li
207.631 226.842 li
208.171 227.644 li
208.701 228.413 li
209.241 229.183 li
209.781 229.921 li
210.311 230.66 li
210.851 231.367 li
211.391 232.073 li
211.921 232.749 li
212.461 233.424 li
.793 .41 .07 0 cmyk
@
145.891 236.833 mo
145.891 236.583 li
212.211 236.583 li
212.211 183.607 li
146.141 183.607 li
146.141 236.833 li
145.891 236.833 li
145.891 236.583 li
145.891 236.833 li
145.641 236.833 li
145.641 183.357 li
145.714 183.18 li
145.891 183.107 li
212.461 183.107 li
212.638 183.18 li
212.711 183.357 li
212.711 236.833 li
212.638 237.01 li
212.461 237.083 li
145.891 237.083 li
145.714 237.01 li
145.641 236.833 li
145.891 236.833 li
.745098 .67451 .666667 .898039 cmyk
f
145.891 341.752 mo
146.431 342.019 li
146.971 342.145 li
147.501 342.412 li
148.041 342.679 li
148.581 342.946 li
149.111 343.072 li
149.651 343.339 li
150.191 343.606 li
150.721 343.889 li
151.261 344.014 li
151.801 344.281 li
152.341 344.548 li
152.871 344.815 li
153.411 345.083 li
153.951 345.224 li
154.481 345.491 li
155.021 345.758 li
155.561 346.041 li
156.091 346.167 li
156.631 346.449 li
157.171 346.716 li
157.701 346.857 li
158.241 347.125 li
158.781 347.392 li
159.311 347.674 li
159.851 347.816 li
160.391 348.083 li
160.921 348.35 li
161.461 348.507 li
162.001 348.774 li
162.541 349.041 li
163.071 349.324 li
163.611 349.465 li
164.151 349.748 li
164.681 350.015 li
165.221 350.282 li
165.761 350.44 li
166.291 350.722 li
166.831 350.989 li
167.371 351.272 li
167.901 351.429 li
168.441 351.696 li
168.981 351.963 li
169.511 352.246 li
170.051 352.403 li
170.591 352.686 li
171.121 352.953 li
171.661 353.236 li
172.201 353.393 li
172.731 353.675 li
173.271 353.942 li
173.811 354.226 li
174.351 354.382 li
174.881 354.665 li
175.421 354.948 li
175.961 355.105 li
176.491 355.388 li
177.031 355.67 li
177.571 355.781 li
178.101 355.781 li
178.641 355.906 li
179.181 356.016 li
179.711 356.126 li
180.251 356.236 li
180.791 356.362 li
181.321 356.582 li
181.861 356.692 li
182.401 356.802 li
182.931 356.912 li
183.471 357.022 li
184.011 357.148 li
184.551 357.257 li
185.081 357.367 li
185.621 357.461 li
186.161 357.556 li
186.691 357.634 li
187.231 357.729 li
187.771 357.823 li
188.301 357.917 li
188.841 358.011 li
189.381 358.2 li
189.911 358.278 li
190.451 358.373 li
190.991 358.467 li
191.521 358.655 li
192.061 358.75 li
192.601 358.844 li
193.131 358.922 li
193.671 359.111 li
194.211 359.205 li
194.741 359.299 li
195.281 359.394 li
195.821 359.472 li
196.361 359.661 li
196.891 359.755 li
197.431 359.85 li
197.971 359.928 li
198.501 360.022 li
199.041 360.022 li
199.581 360.116 li
200.111 360.195 li
200.651 360.195 li
201.191 360.289 li
201.721 360.383 li
202.261 360.462 li
202.801 360.556 li
203.331 360.556 li
203.871 360.65 li
204.411 360.195 li
204.941 359.645 li
205.481 359.205 li
206.021 358.75 li
206.561 358.2 li
207.091 357.744 li
207.631 357.194 li
208.171 356.739 li
208.701 356.173 li
209.241 355.608 li
209.781 355.152 li
210.311 354.587 li
210.851 354.021 li
211.391 353.55 li
211.921 352.984 li
212.461 363.856 li
0 .617 1 0 cmyk
@
147.501 336.175 mo
148.04 336.316 li
148.58 336.285 li
149.11 336.426 li
149.65 336.41 li
150.19 336.552 li
150.72 336.693 li
151.26 336.662 li
151.8 336.803 li
152.34 336.945 li
152.87 336.929 li
153.41 337.07 li
153.951 337.212 li
154.48 337.18 li
155.02 337.321 li
155.561 337.463 li
156.09 337.447 li
156.63 337.589 li
157.171 337.73 li
157.701 337.871 li
158.24 338.013 li
158.781 337.997 li
159.311 338.138 li
159.85 338.28 li
160.391 338.437 li
160.921 338.578 li
161.46 338.72 li
162.001 338.861 li
162.54 339.003 li
163.07 339.159 li
163.611 339.301 li
164.15 339.443 li
164.68 339.584 li
165.22 339.725 li
165.76 339.882 li
166.29 340.024 li
166.83 340.165 li
167.37 340.306 li
167.9 340.448 li
168.44 340.605 li
168.98 340.746 li
169.51 340.888 li
170.05 341.029 li
170.59 341.327 li
171.12 341.485 li
171.66 341.626 li
172.201 341.563 li
172.73 341.5 li
173.27 341.61 li
173.811 341.548 li
174.35 341.642 li
174.88 341.579 li
175.421 341.689 li
175.96 341.783 li
176.49 341.72 li
177.031 341.815 li
177.57 341.909 li
178.1 342.003 li
178.641 342.113 li
179.18 342.207 li
179.71 342.301 li
180.251 342.238 li
180.79 342.333 li
181.32 342.427 li
181.861 342.522 li
182.4 342.616 li
182.93 342.694 li
183.471 342.788 li
184.01 342.741 li
184.55 342.836 li
185.081 342.914 li
185.62 342.867 li
186.16 342.961 li
186.69 342.71 li
187.23 342.616 li
187.77 342.364 li
188.3 342.129 li
188.84 342.034 li
189.38 341.783 li
189.91 341.548 li
190.451 341.453 li
190.99 341.202 li
191.52 340.966 li
192.061 340.731 li
192.6 340.479 li
193.13 340.243 li
193.671 339.992 li
194.21 339.757 li
194.74 339.505 li
195.281 339.27 li
195.82 339.034 li
196.361 338.782 li
196.891 339.128 li
197.43 339.301 li
197.971 339.631 li
198.501 339.976 li
199.04 340.165 li
199.581 340.495 li
200.111 340.825 li
200.65 341.013 li
201.19 341.202 li
201.721 341.548 li
202.26 341.736 li
0 .32 .699 0 cmyk
@
145.891 350 mo
146.431 349.67 li
146.971 349.356 li
147.501 349.042 li
148.041 348.728 li
148.581 348.413 li
149.111 348.225 li
149.651 347.895 li
150.191 347.581 li
150.721 347.267 li
151.261 346.952 li
151.801 346.764 li
152.341 346.45 li
152.871 346.135 li
153.411 345.821 li
153.951 345.507 li
154.481 345.318 li
155.021 345.004 li
155.561 344.69 li
156.091 344.376 li
156.631 344.062 li
157.171 343.748 li
157.701 343.575 li
158.241 343.261 li
158.781 343.339 li
159.311 343.434 li
159.851 343.638 li
160.391 343.732 li
160.921 343.811 li
161.461 344.03 li
162.001 344.109 li
162.541 344.203 li
163.071 344.282 li
163.611 344.501 li
164.151 344.58 li
164.681 344.659 li
165.221 344.753 li
165.761 344.832 li
166.291 345.036 li
166.831 345.13 li
167.371 345.208 li
167.901 345.303 li
168.441 345.381 li
168.981 345.46 li
169.511 345.68 li
170.051 345.758 li
170.591 346.874 li
171.121 347.974 li
171.661 349.199 li
172.201 350.314 li
172.731 351.414 li
173.271 352.529 li
173.811 353.739 li
174.351 354.838 li
174.881 356.048 li
175.421 357.148 li
175.961 358.342 li
176.491 359.441 li
177.031 360.541 li
177.571 361.719 li
178.101 362.819 li
178.641 363.918 li
179.181 365.081 li
179.711 366.181 li
180.251 367.28 li
180.791 368.364 li
181.321 367.846 li
181.861 367.328 li
182.401 366.809 li
182.931 366.228 li
183.471 365.709 li
184.011 365.191 li
184.551 364.673 li
185.081 364.154 li
185.621 363.636 li
186.161 363.039 li
186.691 362.521 li
187.231 362.002 li
187.771 361.405 li
188.301 360.887 li
188.841 360.353 li
189.381 359.756 li
189.911 359.237 li
190.451 358.625 li
190.991 358.09 li
191.521 357.478 li
192.061 356.849 li
192.601 356.331 li
193.131 355.703 li
193.671 355.074 li
194.211 354.54 li
194.741 353.912 li
195.281 353.283 li
195.821 352.639 li
196.361 352.105 li
196.891 351.461 li
197.431 350.817 li
197.971 350.157 li
198.501 349.513 li
199.041 348.853 li
199.581 348.193 li
200.111 347.518 li
200.651 346.858 li
201.191 346.183 li
201.721 345.507 li
202.261 344.816 li
202.801 344.14 li
203.331 343.308 li
203.871 342.617 li
204.411 343.402 li
204.941 344.03 li
205.481 344.816 li
206.021 345.617 li
206.561 346.277 li
207.091 347.078 li
207.631 347.753 li
208.171 348.555 li
208.701 349.246 li
209.241 350.079 li
209.781 350.896 li
210.311 351.618 li
210.851 352.341 li
211.391 353.063 li
211.921 342.004 li
.023 .887 .902 0 cmyk
@
149.11 339.254 mo
149.65 340.573 li
150.19 341.909 li
150.72 343.228 li
151.26 344.564 li
151.8 345.899 li
152.34 347.218 li
152.87 348.428 li
153.41 349.622 li
153.95 350.847 li
154.48 352.183 li
155.02 353.408 li
155.56 354.633 li
156.09 355.984 li
156.63 357.336 li
157.17 358.687 li
157.7 359.927 li
158.24 361.278 li
158.78 362.629 li
159.31 363.902 li
159.85 365.253 li
160.39 366.604 li
160.92 367.971 li
161.46 369.322 li
162 370.673 li
162.54 372.024 li
163.07 373.328 li
163.61 373.171 li
164.15 373.014 li
164.68 372.857 li
165.22 372.699 li
165.76 372.542 li
166.29 372.385 li
166.83 372.228 li
167.37 372.071 li
167.9 371.914 li
168.44 371.836 li
168.98 371.678 li
169.51 371.521 li
170.05 371.364 li
170.59 371.207 li
171.12 371.113 li
171.66 370.956 li
172.2 370.861 li
172.73 370.72 li
173.27 370.563 li
173.81 370.406 li
174.35 370.312 li
174.88 370.154 li
175.42 370.076 li
175.96 369.919 li
176.49 369.84 li
177.03 369.746 li
177.57 369.589 li
178.1 369.447 li
178.64 369.291 li
179.18 369.07 li
179.71 368.976 li
180.25 368.835 li
180.79 368.678 li
181.32 368.458 li
181.86 368.301 li
182.4 368.144 li
182.93 367.986 li
183.47 367.845 li
184.01 367.688 li
184.55 367.531 li
185.08 367.452 li
185.62 367.217 li
186.16 367.075 li
186.69 366.918 li
187.23 366.761 li
187.77 366.683 li
188.3 366.525 li
188.84 366.384 li
189.38 366.227 li
189.91 366.07 li
190.45 365.913 li
190.99 365.772 li
191.52 365.536 li
192.06 365.379 li
192.6 365.222 li
193.13 365.08 li
193.67 364.923 li
194.21 364.766 li
194.74 364.53 li
195.28 364.373 li
195.82 364.311 li
196.36 364.153 li
196.89 363.996 li
197.43 363.761 li
197.97 363.446 li
198.5 363.305 li
199.04 363.069 li
199.58 362.739 li
200.11 362.504 li
0 .73 .508 0 cmyk
@
148.581 355.749 mo
149.111 355.466 li
149.651 355.199 li
150.191 355.026 li
150.721 354.759 li
151.261 354.477 li
151.801 354.209 li
152.341 353.927 li
152.871 353.66 li
153.411 353.377 li
153.951 353.11 li
154.481 352.827 li
155.021 352.56 li
155.561 352.277 li
156.091 352.01 li
156.631 351.728 li
157.171 351.46 li
157.701 351.178 li
158.241 350.911 li
158.781 350.628 li
159.311 350.361 li
159.851 350.078 li
160.391 349.811 li
160.921 349.418 li
161.461 349.135 li
162.001 348.853 li
162.541 348.585 li
163.071 348.303 li
163.611 348.036 li
164.151 347.753 li
164.681 347.36 li
165.221 347.078 li
165.761 346.811 li
166.291 346.528 li
166.831 346.245 li
167.371 345.852 li
167.901 345.569 li
168.441 345.287 li
168.981 345.02 li
169.511 344.737 li
170.051 344.328 li
170.591 344.045 li
171.121 343.763 li
171.661 344.564 li
172.201 345.208 li
172.731 346.009 li
173.271 346.795 li
173.811 347.455 li
174.351 348.256 li
174.881 349.041 li
175.421 349.842 li
175.961 350.518 li
176.491 351.303 li
177.031 352.104 li
177.571 352.78 li
178.101 353.581 li
178.641 354.382 li
179.181 355.184 li
179.711 355.875 li
180.251 356.66 li
180.791 357.461 li
181.321 358.168 li
181.861 358.97 li
182.401 359.771 li
182.931 360.572 li
183.471 361.279 li
184.011 362.096 li
184.551 362.803 li
185.081 363.62 li
185.621 364.421 li
186.161 365.222 li
186.691 365.96 li
187.231 365.913 li
187.771 365.882 li
188.301 365.772 li
188.841 365.74 li
189.381 365.709 li
189.911 365.583 li
190.451 365.552 li
190.991 365.52 li
191.521 365.411 li
192.061 365.379 li
192.601 365.332 li
193.131 365.222 li
193.671 365.19 li
194.211 365.159 li
194.741 365.112 li
195.281 365.002 li
195.821 364.499 li
196.361 364.012 li
196.891 363.431 li
197.431 362.928 li
197.971 362.332 li
198.501 361.829 li
199.041 361.342 li
199.581 360.745 li
200.111 360.242 li
200.651 359.645 li
201.191 359.143 li
201.721 358.64 li
202.261 358.027 li
202.801 357.524 li
203.331 357.587 li
203.871 357.744 li
204.411 357.807 li
204.941 357.964 li
205.481 358.027 li
206.021 358.184 li
206.561 358.247 li
207.091 358.404 li
207.631 358.467 li
208.171 358.64 li
208.701 358.703 li
209.241 358.766 li
209.781 358.922 li
210.311 358.985 li
210.851 359.048 li
211.391 359.221 li
211.921 346.386 li
.438 .273 .734 .039 cmyk
@
145.891 379.675 mo
146.431 379.314 li
146.971 378.889 li
147.501 378.512 li
148.041 378.089 li
148.581 377.711 li
149.111 377.334 li
149.651 376.91 li
150.191 376.533 li
150.721 376.156 li
151.261 375.732 li
151.801 375.339 li
152.341 374.962 li
152.871 374.538 li
153.411 374.145 li
153.951 373.768 li
154.481 373.391 li
155.021 372.951 li
155.561 372.559 li
156.091 372.181 li
156.631 371.804 li
157.171 371.349 li
157.701 370.972 li
158.241 370.595 li
158.781 370.202 li
159.311 369.762 li
159.851 369.369 li
160.391 368.992 li
160.921 368.6 li
161.461 368.144 li
162.001 367.767 li
162.541 367.374 li
163.071 366.997 li
163.611 366.526 li
164.151 366.133 li
164.681 365.757 li
165.221 365.363 li
165.761 364.987 li
166.291 364.594 li
166.831 364.201 li
167.371 363.824 li
167.901 363.431 li
168.441 363.054 li
168.981 362.568 li
169.511 362.19 li
170.051 361.892 li
170.591 361.499 li
171.121 361.122 li
171.661 360.635 li
172.201 360.352 li
172.731 359.96 li
173.271 359.567 li
173.811 359.19 li
174.351 358.797 li
174.881 358.42 li
175.421 358.027 li
175.961 357.634 li
176.491 357.258 li
177.031 356.865 li
177.571 356.488 li
178.101 356.095 li
178.641 355.702 li
179.181 355.325 li
179.711 354.932 li
180.251 354.555 li
180.791 354.163 li
181.321 353.77 li
181.861 353.393 li
182.401 353 li
182.931 352.623 li
183.471 352.231 li
184.011 351.838 li
184.551 351.461 li
185.081 351.068 li
185.621 350.691 li
186.161 350.298 li
186.691 349.905 li
187.231 349.529 li
187.771 349.135 li
188.301 348.758 li
188.841 348.366 li
189.381 347.989 li
189.911 347.455 li
190.451 347.078 li
190.991 346.685 li
191.521 346.292 li
192.061 345.915 li
192.601 345.523 li
193.131 345.13 li
193.671 344.612 li
194.211 344.218 li
194.741 343.826 li
195.281 343.449 li
195.821 344.109 li
196.361 344.627 li
196.891 345.287 li
197.431 345.962 li
197.971 346.481 li
198.501 347.156 li
199.041 347.816 li
199.581 348.491 li
200.111 349.026 li
200.651 349.686 li
201.191 350.236 li
201.721 350.895 li
202.261 351.571 li
202.801 352.12 li
203.331 352.796 li
203.871 353.471 li
204.411 354.021 li
204.941 354.697 li
205.481 355.262 li
206.021 355.938 li
206.561 356.504 li
207.091 357.179 li
207.631 357.76 li
208.171 358.436 li
208.701 359.017 li
209.241 359.693 li
209.781 360.274 li
210.311 360.965 li
210.851 361.546 li
211.391 362.143 li
.652 .027 .941 0 cmyk
@
149.11 361.357 mo
149.65 361.781 li
150.19 362.221 li
150.72 362.724 li
151.26 363.164 li
151.8 363.604 li
152.34 364.028 li
152.87 364.546 li
153.41 365.002 li
153.95 365.441 li
154.48 365.96 li
155.02 366.4 li
155.56 366.856 li
156.09 367.39 li
156.63 367.83 li
157.17 368.363 li
157.7 368.819 li
158.24 369.274 li
158.78 369.809 li
159.31 369.809 li
159.85 369.887 li
160.39 369.887 li
160.92 369.95 li
161.46 369.95 li
162 370.013 li
162.54 370.013 li
163.07 370.076 li
163.61 370.091 li
164.15 370.154 li
164.68 370.217 li
165.22 370.217 li
165.76 370.296 li
166.29 370.296 li
166.83 370.358 li
167.37 370.421 li
167.9 370.5 li
168.44 370.5 li
168.98 370.563 li
169.51 370.642 li
170.05 370.704 li
170.59 370.704 li
171.12 370.783 li
171.66 370.846 li
172.2 370.908 li
172.73 370.987 li
173.27 371.05 li
173.81 370.437 li
174.35 369.887 li
174.88 369.353 li
175.42 368.803 li
175.96 368.253 li
176.49 367.704 li
177.03 367.169 li
177.57 366.62 li
178.1 366.07 li
178.64 365.52 li
179.18 364.986 li
179.71 364.436 li
180.25 363.886 li
180.79 363.431 li
181.32 362.881 li
181.86 362.331 li
182.4 361.797 li
182.93 361.247 li
183.47 360.713 li
184.01 360.163 li
184.55 359.613 li
185.08 359.079 li
185.62 359.032 li
186.16 359.001 li
186.69 358.969 li
187.23 358.922 li
187.77 358.891 li
188.3 358.859 li
188.84 358.938 li
189.38 359.001 li
189.91 359.079 li
190.45 359.158 li
190.99 359.236 li
191.52 359.205 li
192.06 359.283 li
192.6 359.362 li
193.13 359.44 li
193.67 359.503 li
194.21 359.488 li
194.74 359.566 li
195.28 359.645 li
195.82 359.708 li
196.36 359.786 li
196.89 359.771 li
197.43 359.849 li
197.97 359.912 li
198.5 359.99 li
199.04 359.975 li
199.58 360.053 li
200.11 360.132 li
200.65 360.194 li
201.19 360.179 li
201.72 360.257 li
202.26 360.336 li
202.8 360.305 li
203.33 360.383 li
203.87 360.461 li
204.41 359.896 li
204.94 359.44 li
205.48 358.969 li
206.02 358.404 li
206.56 357.948 li
207.09 357.477 li
207.63 356.911 li
208.17 356.44 li
208.7 355.969 li
209.24 355.403 li
209.78 354.932 li
210.31 354.461 li
210.85 353.879 li
211.39 353.408 li
211.92 352.811 li
.469 .035 .531 0 cmyk
@
146.431 373.422 mo
146.971 373.312 li
147.501 373.265 li
148.041 373.171 li
148.581 373.076 li
149.111 372.966 li
149.651 372.92 li
150.191 372.825 li
150.721 372.715 li
151.261 372.621 li
151.801 372.526 li
152.341 372.48 li
152.871 372.385 li
153.411 372.276 li
153.951 372.181 li
154.481 372.134 li
155.021 372.04 li
155.561 371.93 li
156.091 371.836 li
156.631 371.741 li
157.171 371.631 li
157.701 371.537 li
158.241 371.443 li
158.781 371.333 li
159.311 371.238 li
159.851 371.144 li
160.391 371.034 li
160.921 370.94 li
161.461 370.83 li
162.001 370.736 li
162.541 370.642 li
163.071 370.469 li
163.611 370.375 li
164.151 370.28 li
164.681 370.17 li
165.221 370.39 li
165.761 370.61 li
166.291 370.83 li
166.831 370.987 li
167.371 371.207 li
167.901 371.427 li
168.441 371.647 li
168.981 371.804 li
169.511 372.024 li
170.051 372.244 li
170.591 372.464 li
171.121 372.621 li
171.661 372.841 li
172.201 373.061 li
172.731 373.218 li
173.271 373.438 li
173.811 373.673 li
174.351 373.831 li
174.881 374.004 li
175.421 374.223 li
175.961 374.396 li
176.491 374.616 li
177.031 374.789 li
177.571 374.946 li
178.101 375.182 li
178.641 375.354 li
179.181 375.527 li
179.711 375.7 li
180.251 375.92 li
180.791 376.093 li
181.321 376.281 li
181.861 376.501 li
182.401 376.69 li
182.931 376.862 li
183.471 377.051 li
184.011 377.271 li
184.551 377.46 li
185.081 377.648 li
185.621 377.868 li
186.161 378.056 li
186.691 378.292 li
187.231 378.481 li
187.771 378.669 li
188.301 378.889 li
188.841 379.125 li
189.381 379.313 li
189.911 379.549 li
190.451 379.737 li
190.991 379.973 li
191.521 380.209 li
192.061 380.444 li
192.601 380.68 li
193.131 380.9 li
193.671 381.135 li
194.211 381.371 li
194.741 381.607 li
195.281 381.874 li
195.821 382.11 li
196.361 382.345 li
196.891 382.596 li
197.431 382.832 li
197.971 383.068 li
198.501 383.335 li
199.041 383.555 li
199.581 383.822 li
200.111 384.042 li
200.651 384.309 li
201.191 384.529 li
201.721 384.796 li
202.261 383.618 li
202.801 382.44 li
203.331 381.245 li
203.871 380.083 li
204.411 378.936 li
204.941 377.742 li
205.481 376.595 li
206.021 375.464 li
206.561 374.333 li
207.091 373.218 li
207.631 372.087 li
208.171 370.987 li
208.701 369.872 li
209.241 368.772 li
209.781 367.688 li
210.311 366.589 li
210.851 365.52 li
211.391 364.436 li
211.921 363.368 li
212.461 362.3 li
.793 .41 .07 0 cmyk
@
.5 lw
1 lc
10 ml
145.891 387.215 mo
212.461 387.215 li
212.461 333.74 li
145.891 333.74 li
cp
.746 .676 .668 .898 cmyk
@
0 lc
161.46 384.993 mo
161.46 387.216 li
.691 .629 .617 .582 cmyk
@
177.57 384.993 mo
177.57 387.216 li
@
193.67 384.993 mo
193.67 387.216 li
@
209.78 384.993 mo
209.78 387.216 li
@
.652 .578 .566 .363 cmyk
%ADOBeginSubsetFont: WAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HFKGMB+Calibri gcheck setglobal} if
1 10036 34 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>HFKGMB+Calibri AddT42Char 
HFKGMB+Calibri /CharStrings get begin
/g34 34 def
end
HFKGMB+Calibri /Encoding get
dup 45 /g34 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HFKGMB+Calibri*1 [33{/.notdef}rp /g32 /g39 /g33 /g31 /g36 /g38 /g35 /g37 /g26 /g12 /g8 /g21 /g34 210{/.notdef}rp]HFKGMB+Calibri nfHFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf151.45 394.826 mo(!"#$!"%$!"&$#$!$)[3.04202 3.04202 3.04202 6.98402 3.04202 3.04202 3.04202 6.97203 3.04202 3.04202 3.04202 6.98401 3.04202 3.04202 3.04202 0 ]xsh141.91 181.274 mo($)sh138.868 169.73 mo(!$)[3.04202 0 ]xsh138.868 158.186 mo(#$)[3.04202 0 ]xsh138.868 146.642 mo(-$)[3.04202 0 ]xsh138.868 135.11 mo('$)[3.04202 0 ]xsh1.07 lw
148.73 179.199 mo
145.89 179.199 li
.691 .629 .617 .582 cmyk
@
148.73 167.652 mo
145.89 167.652 li
@
148.73 156.106 mo
145.89 156.106 li
@
148.73 144.559 mo
145.89 144.559 li
@
148.73 133.012 mo
145.89 133.012 li
@
.652 .578 .566 .363 cmyk
HFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf141.914 320.164 mo(-)sh141.914 306.058 mo(\()sh141.914 291.952 mo(")sh148.73 318.089 mo
145.89 318.089 li
.691 .629 .617 .582 cmyk
@
148.73 303.982 mo
145.89 303.982 li
@
148.73 289.875 mo
145.89 289.875 li
@
.652 .578 .566 .363 cmyk
HFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf141.914 126.216 mo($)sh138.872 113.382 mo(-$)[3.04202 0 ]xsh138.872 100.566 mo(\($)[3.04202 0 ]xsh138.872 87.7319 mo("$)[3.04202 0 ]xsh148.73 124.142 mo
145.89 124.142 li
.691 .629 .617 .582 cmyk
@
148.73 111.308 mo
145.89 111.308 li
@
148.73 98.4883 mo
145.89 98.4883 li
@
148.73 85.6538 mo
145.89 85.6538 li
@
.652 .578 .566 .363 cmyk
HFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf141.914 237.07 mo($)sh141.914 224.404 mo(#)sh141.914 211.756 mo(')sh141.914 199.096 mo(\()sh141.914 186.436 mo(&)sh148.73 234.996 mo
145.89 234.996 li
.691 .629 .617 .582 cmyk
@
148.73 222.333 mo
145.89 222.333 li
@
148.73 209.671 mo
145.89 209.671 li
@
148.73 197.025 mo
145.89 197.025 li
@
148.73 184.363 mo
145.89 184.363 li
@
.652 .578 .566 .363 cmyk
HFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf138.873 381.198 mo(#$)[3.04202 0 ]xsh138.873 366.588 mo('$)[3.04202 0 ]xsh138.873 351.978 mo(\($)[3.04202 0 ]xsh138.873 337.368 mo(&$)[3.04202 0 ]xsh148.73 379.109 mo
145.89 379.109 li
.691 .629 .617 .582 cmyk
@
148.73 364.515 mo
145.89 364.515 li
@
148.73 349.905 mo
145.89 349.905 li
@
148.73 335.295 mo
145.89 335.295 li
@
.746 .676 .668 .898 cmyk
%ADOBeginSubsetFont: WAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HFKGMB+Calibri gcheck setglobal} if
1 5778 20 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>HFKGMB+Calibri AddT42Char 
1 4754 17 <00010099fffa05d003ca005000ea401b12100b014d13180b014d26100b0c
014c27180b0c014c7052014613b8fff6b30c014d13b8ffe8b30b014d13b8
fff0b310014d13b8fff0b30f014d13b8ffeab30d014d13b801f8401e1e16
0d014d1e1e320a0a0c014d0a100d014d0a180b014d0a100f10014c0ab801
f9b7504011014d503e27b8fff6b30c014d27b8ffe8b30b014d27b8fff0b3
10014d27b8fff0b30f014d27b8fff0b30d014d27bb01f8003200100106b2
4b4a24b80106400d414a3e462d38492d4c194c054c003f3f3f3f1239393f
ed3fed012fe12b2b2b2b2b39d42be12b2b2b2b11392f2be12b2b2b2b2b39
31305d002b2b2b2b25140e0223222e023511342e022322060711140e0223
222e023511342e022322060711140e0223222e023511343e0233321e0215
15363633321e02173e0333321e021505d00812201819201308142c442e39
73450813201817211307162c432e397444081220191820130706121c1716
1d10074c8f4938594430102d514b47245776491f19080b080404080b0802
23395e44245855fd8b080b080404080b080223395e44245855fd8b080b08
0404080b080384080b090303090b0877554f1a2f412831442a133d66894c
>HFKGMB+Calibri AddT42Char 
1 1512 6 <000100aaffed04790514002b0099401d602d01201810014d20100f014d20
100d014d200a0c014d20180b014d20b802104011004015014d004013014d
004011014d0016b8ffe8b310014d16b8fff0b30f014d16b8fff0b30d014d
16b8fff6b30c014d16b8ffe8b30b014d16ba0210000affc0b315014d0ab8
ffc0400913014d0a265210521bb80129b10556003fed3f3f012f2b2be12b
2b2b2b2bd42b2b2be12b2b2b2b2b31305d01140e0223222e023511343e02
33321e021511141e0233323e023511343e0233321e021504794580b8756b
b07e440814201a182213082c5375494b75512b081421191821130901de76
b980423e79b6770323080c070505070c08fcf25a86592d2c588257031708
0c070505070c0800>HFKGMB+Calibri AddT42Char 
1 5204 18 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>HFKGMB+Calibri AddT42Char 
1 2736 10 <0001005affed032003c900350089b11c00b8ffc0b310014d00b8ffe0b30d
014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f014d27b8ff
eeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b400d2f0e01
0e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48312cb801
06b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b2b2b3231
3025140e0623222e0235343e0233321e0615140623222e0223220615141e
0233323e0233321e020320020507193c4b582f61966535417199592b5144
3518090602120d0f273c553a777f21405d3c39563f2b0c070a0703a21119
110d19251d12407bb37585bf7a3b101a22180e131812271f212821b7ae57
83582b242b2308131d00>HFKGMB+Calibri AddT42Char 
1 5494 19 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>HFKGMB+Calibri AddT42Char 
1 6718 23 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>HFKGMB+Calibri AddT42Char 
1 3016 11 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>HFKGMB+Calibri AddT42Char 
1 686 3 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>HFKGMB+Calibri AddT42Char 

1 0 1 <> HFKGMB+Calibri AddT42Char 
HFKGMB+Calibri /CharStrings get begin
/g20 20 def
/g17 17 def
/g6 6 def
/g18 18 def
/g10 10 def
/g19 19 def
/g23 23 def
/g11 11 def
/g3 3 def
/g1 1 def
end
HFKGMB+Calibri /Encoding get
dup 46 /g20 put
dup 47 /g17 put
dup 48 /g6 put
dup 49 /g18 put
dup 50 /g10 put
dup 51 /g19 put
dup 52 /g23 put
dup 53 /g11 put
dup 54 /g3 put
dup 55 /g1 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HFKGMB+Calibri*1 [33{/.notdef}rp /g32 /g39 /g33 /g31 /g36 /g38 /g35 /g37 /g26 /g12 /g8 /g21 /g34 /g20 /g17 /g6 /g18 /g10 /g19 /g23 /g11 /g3 /g1 200{/.notdef}rp]HFKGMB+Calibri nfHFKGMB+Calibri*1 [6 0 0 -6 0 0 ]msf175.591 402.594 mo(\)*+,)[2.59802 2.98801 2.87402 0 ]xshHFKGMB+Calibri*1 [0 -6 -6 0 0 0 ]msf48.0107 364.578 mo(../)[-3.02997 -3.02997 0 ]yshHFKGMB+Calibri*1 [8 0 0 -8 0 0 ]msf62.2207 54.8301 mo(0123,,*24*5)[4.97599 4.03995 3.22404 4.05595 2.63199 2.63199 3.81601 3.22404 2.52006 3.81601 0 ]xsh146.429 54.8301 mo(63,,*24*57)[4.10403 4.05595 2.63199 2.63199 3.82401 3.22403 2.52007 3.82401 4.03995 0 ]xsh%ADOBeginSubsetFont: DBAAAA+Calibri-Italic Initial
ct_T42Dict begin
-0.473 -0.191 1.211 0.949
 256 array 0 1 255 {1 index exch /.notdef put} for  /DBAAAA+Calibri-Italic
Type42DictBegin
[<00010000000b000b000b000b63767420b49aceb9000000bc0000050e6670
676da1ea42ac000005cc00000913676c7966958d3a9e000020e8000010f8
686561649bd7464800000ee000000036686865610f220e1900000f180000
0024686d74783893042b00000f3c000000406c6f636123d3202b00000f7c
000000226d6178700a7c030400000fa0000000206e616d6571c049e00000
0fc0000000287072657065f2c42400000fe8000010fd6764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea7000000000000000000000000004a004c0054005500560057
0059004f004e004f00500051004d005d005f006100630064006500660067
00680069006a006b006c006d006e006d0066006f00700071007200730074
007500760071007400700071007200740075007600780079007a007d0078
0079007a007b007c007d0079007c007a007c007d007e007f00800081007e
007f008000810082007f008000810082007e007f00800081008200830085
008300840085008600870088008900860088008900830084008500860087
008800890083008400850086008700880089008a008b008c008d008e008f
008a008b008c008d008f008a008b008c008d008e008f008a008b008c008d
008e008f0090009500900091009200930094009500980099009a009b009c
00900091009300960097009b009c009f00a2009400960090009100920093
009400950096009700980099009a009b009c009d009e009f00a000a100a2
00a300a600a7009000910092009300940095009600980099009f00bc00bd
00c100c600be00bf00bf00c100c200b900be00c200df00e000e400e700e8
00e9012b0136014700f200f400cf00640066006a006c006d0070006c006d
0069006c0067007300740075007600770078007a007b007c007d007e0081
008400850086008700880089008a0076007a007b007c007e007f00800082
00830084008700880089008a007700850087007900820084008500860087
0088008a0079007a007c007d007e0081008300840086008700880089008b
008c008d008e008f00900091009200940095008b008c008d008e008f0093
009400950093008b008c008d008e00900091009200930094008c008d008e
008f009000910092009300940095009700980099009a009b009c00960097
00980099009a009b009c009a009c009600980099009a009b009c00960097
009b009c009d009e009f00a000a100a2009d009e009f00a000a100a200a1
009d009e009f00a000a100a2009d009e009f00a000a100a200a300a500a3
00a400a500a600a700a300a500a300a400a500a600a700a300a400a500a6
00a700a800a900a800a900aa00ab00ac00a800ab00ac00a800a900aa00ab
00ac00a800a900aa00ab00ac00ad00ae00af00b000b100b300b500b600b7
00b800af00b000b100b300b400b700ad00ae00af00b000b100b200b300b4
00b500b600b700b800ad00ae00af00b000b100b200b300b400b500b600b7
00ba00bb00bc00bd00bf00c000c100c200c300c400ba00bb00bf00c300b9
00ba00bb00bc00bf00c100c200c300ba00bc00bf00c200c700c900cb00cc
00cd00c500c600c700c600c700cb00ce00cf00d100d200db00dc00de00df
00e000e400d600e800e90123012b00d000d1042600d8050e010503c000c2
024e0078042600d702990092000040465f5e5d5c5b5a5958555453525150
4f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f2e2d
2c2826252423221f181411100f0d0b0a090807060504030201002c452346
6020b02660b004262348482d2c452346236120b02661b004262348482d2c
45234660b0206120b04660b004262348482d2c4523462361b0206020b026
61b02061b004262348482d2c45234660b0406120b06660b004262348482d
2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c
2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320
b04d44235920b0042651582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b43
23430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d
2c2045b00325456164b050515845441b2121592d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0297a
e4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c01b0
05251023208af500b0016023edec2d2c01b005251023208af500b0016123
edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b001
610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb8400062
2d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0
c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb8
4000626023212d2c4523456023456023456023766818b08062202d2cb004
26b00426b00425b0042545234520b003266062636820b0032661658a2344
442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f4523
456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b5158
20b0032545695358441b2121591b2121592d2c45b01443b0006063b00160
69442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158
b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a5864
66b01f601b64b020606620581b21b04059b001615923586559b029234423
10b029e01b2121212121592d2cb0164358b004254564b020606620581b21
b04059b0016123586559b0292344b00425b00725082058021b0359b00525
10b004252046b0042523423cb0072510b006252046b00425b0016023423c
2058011b0059b0052510b00425b029e0b0072510b00625b029e0b00425b0
0725082058021b0359b00425b003254348b00625b00325b0016043481b21
59212121212121212d2cb0164358b004254564b020606620581b21b04059
b0016123581b6559b0292344b00525b00825082058021b0359b0042510b0
05252046b0042523423cb00425b0072508b0072510b006252046b00425b0
016023423c2058011b0059b0042510b00525b029e0b02920456544b00725
10b00625b029e0b00525b00825082058021b0359b00525b003254348b004
25b0072508b00625b00325b0016043481b2159212121212121212d2c02b0
0425202046b004252342b0052508b003254548212121212d2c02b0032520
b0042508b0022543482121212d2c452320451820b0005020582365235923
6820b040505821b04059235865598a60442d2c4b53234b515a5820458a60
441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b
2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b212121
21592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b2121
2121592d2cb002435458b0492b1b212121592d2c208a08234b538a4b515a
5823381b2121592d2c0020b200400325b0062649618b3812342d2c014623
466023466123201020468a61b8ff80628ab140408a704560683a2d2c208a
2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b5442
2d2cb1020042b123018851b1400188535a58b910000020885458b2020102
43604259b12401885158b920000040885458b2020202436042b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b202100243604259b94000020063b804008854
58b202400243604259595959592d2c451868234b51582320452064b04050
587c59688a6059442d2cb00016b00225b0022501b001233e00b002233eb1
0102060cb00a236542b00b234201b001233f00b002233fb10102060cb006
236542b0072342b00116012d2c20b82000628a6023622d2cb0072558001b
0159b0042510b00325b0022520b8ffff545821cd1bed5921b006255cb006
255a58b0092b5920b005254ab0042547b004254760b0062547b0806361b0
0225b0005558b00325b00725496359b0082558001b0159b00425b0062549
b009255cb009255a58b0092b59b0072546b0806361b0032520b000555863
1b2159612320b0005558b080631b21b08059b0592bb006255c586959b004
25202010b00048233ab0062658001b0159b0052658b003252f598a122332
21212d2cb00625b00a2587b00625b009254ab0005358b00625b00a251bb0
0925b0072559b00225b00225070cb005256323b00625636020b940000400
63535821b00426b00426b00a1bb94000040063655158b0042665b0042665
b00a1bb00426b00426b000b00325b003250b0d0ab0092eb00725b007250b
0d0ab00b2eb00525b0052507595920b0005558b00525b0052587b00725b0
07250bb0092510b00b25b0092620b8ffff545821cd1bed59b00525b00525
07b00825b00b254923b00625b0062587b00a2510b00b25c15920b00051b8
00522378b00161b00225b00725b0072507b00a25b00d254961b08062b005
25b005250bb00a252338b00625b0062587b00825b008250bb00a2510b00b
25c4b00625b0062507b00925b00c2549b0032554b8ffa723792121212121
212121212121212d2c23b0005458b9400000001bb900004000598ab00054
58b9400000001bb90000400059b05b2b2d2c08b0005458b9400000001bb9
00004000590db05b2b2d2c8a8a080d8ab0005458b9400000001bb9000040
0059b05b2b2d2cb00426b00426080db00426b00426080db05b2b2d000001
000000020000b798d6875f0f3cf50019080000000000bbeb7ccc00000000
c33ba7e6fc31fe7309b6079e00020009000200000000000000010000079e
fdda00000a4efc31fde109b60800019a0000000000000000000000000010
040e000001cf0000042e0073041d0051041d003d03d2004d01d6003f01d6
003f0654003f02ae00710391007c0205004a040e004d040e005f040e0020
040e001d000000a800a8012801c302700307037c03c40497053b05af05e3
0677070307b2087c000000010000001000d4000700b0000700020010002f
0060000009e9014e00040001000000010012000100000000000600150000
4946434f554d2b43616c696272692d4974616c696300b10903b8027ab21e
3e1fb80279b21e3e1fb80278b21e0b1fb80277b21e0b1fb80276b21e3a1f
b80275b21e3a1fb80274b21e3e1fb80273b21e3b1fb80272b21e3c1fb802
71b21e3c1fb80270b21e3c1fb8026fb21e3d1fb8026eb21e3d1fb8026db2
1e3e1fb8026cb21e3e1fb8026bb21d411fb8026ab21d411fb80269b21d42
1fb80268b21d431fb80267b21d431fb80266b21d431fb80265b21d431fb8
0264b21d431fb80263b21d411fb80262b21d421fb80261b21d421fb80260
b21d431fb8025fb21d431fb8025eb21c451fb8025db21c451fb8025cb21c
451fb8025bb21c451fb8025ab21c451fb80259b21c451fb80258b21c451f
b80257b21c451fb80256b21c451fb80255b21c451fb80254b21c451fb802
52b21c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb2
1c441fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21c45
1fb80249b21c451fb80248b21c451fb80247b21c451fb80246b21c451fb8
0245b21c451fb80244b21b491fb80243b21b4a1fb80242b21b4a1fb80241
b21b4a1fb80240b21b4b1fb8023fb21b4b1fb8023eb21b4c1fb8023db21b
4c1fb8023cb21b4c1fb8023bb21b4c1fb8023ab21b4c1fb80253b21b4c1f
b80239b21b491fb80238b21b491fb80237b21b4a1fb80236b21b4a1fb802
35b21b4a1fb80234b21b4b1fb80233b21b4b1fb80232b21b4c1fb80231b2
1b4c1fb80230b21b4c1fb8022fb21b4c1fb8022eb21b4c1fb8022db21b49
1fb8022cb21b4a1fb8022bb21b4b1fb8022ab21b4c1fb80229b21b4c1fb8
0228b21b4c1fb80227b21b491fb80226b21b491fb80225b21b4a1fb80224
b21b4a1fb80223b21b4b1fb80222b21b4c1fb80221b21b4c1fb80220b21b
4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21a4e1fb8021cb21a4e1f
b8021bb21a4f1fb8021ab21a4f1fb80219b21a4f1fb80218b21a4e1fb802
17b21a4e1fb80216b21a4f1fb80215b21a4f1fb80214b21a4f1fb80213b2
1a4e1fb80212b21a4e1fb80211b21a4f1fb80210b21a4e1fb8020fb21a4e
1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4f1fb8020bb21a4f1fb8
020ab21a4f1fb80209b219501fb80208b219511fb80207b219511fb80206
b219511fb80205b219511fb80204b219501fb80203b219511fb80202b219
511fb80201b219511fb80200b219511fb801ffb219511fb801feb219511f
b801fdb219501fb801fcb219511fb801fbb219511fb801fab219511fb801
f9b219511fb801f8b219511fb801f7b219511fb801f6b218531fb801f5b2
18531fb801f4b218541fb801f3b218541fb801f2b218541fb801f1b21854
1fb801f0b218531fb801efb218531fb801eeb218541fb801edb218541fb8
01ecb218541fb801ebb218541fb801eab218531fb801e9b218531fb801e8
b218531fb801e7b218541fb801e6b218541fb801e5b218541fb801e4b218
541fb801e3b218531fb801e2b218531fb801e1b218541fb801e0b218541f
b801dfb218541fb801deb218541fb801ddb217561fb801dcb217561fb801
dbb217571fb801dab217571fb801d9b217561fb801d8b217561fb801d7b2
17571fb801d6b217571fb801d5b217571fb801d4b217571fb801d3b21756
1fb801d2b217571fb801d1b217561fb801d0b217561fb801cfb217571fb8
01ceb217571fb801cdb217571fb801ccb217571fb801cbb217571fb801ca
b217561fb801c9b217561fb801c8b217571fb801c7b217571fb801c6b217
571fb801c5b217571fb801c4b2163e1fb801c3b2163f1fb801c2b2163f1f
b801c1b2165b1fb801c0b2165b1fb801bfb2165b1fb801beb2165b1fb801
bdb2165b1fb801bcb2165b1fb801bbb2165b1fb801bab2163f1fb801b9b2
163f1fb801b8b2165b1fb801b7b2165b1fb801b6b2165b1fb801b5b2165b
1fb801b4b2165b1fb801b3b2165b1fb801b2b2165b1fb801b1b2163f1fb8
01b0b2163e1fb801afb2163f1fb801aeb2163f1fb801adb2165b1fb801ac
b2165b1fb801abb2165b1fb801aab2165b1fb801a9b2165b1fb801a8b216
3e1fb801a7b2163f1fb801a6b2165b1fb801a5b2165b1fb801a4b2165b1f
b801a3b2165b1fb801a2b2165b1fb801a1b2165b1fb801a0b2165b1fb801
9fb2165b1fb8019eb215621fb8019db215621fb8019cb215631fb8019bb2
15641fb8019ab215651fb80199b215661fb80198b215661fb80197b21566
1fb80196b215661fb80195b215661fb80194b215661fb80193b215661fb8
0192b215611fb80191b215621fb80190b215631fb8018fb215641fb8018e
b215641fb8018db215651fb8018cb215661fb8018bb215661fb8018ab215
631fb80189b215641fb80188b215551fb80187b215611fb80186b215621f
b80185b215621fb80184b215631fb80183b215651fb80182b215661fb801
81b215661fb80180b215661fb8017fb215661fb8017eb215661fb8017db2
15661fb8017cb215661fb8017bb215661fb8017ab215451fb80179b21561
1fb80178b215621fb80177b215621fb80176b215631fb80175b215641fb8
0174b215641fb80173b215651fb80172b215661fb80171b215661fb80170
b215661fb8016fb215661fb8016eb215661fb8016db215661fb8016cb215
661fb8016bb215551fb8016ab215451fb80169b215451fb80168b215361f
b80167b215361fb80166b214821fb80165b214561fb80164b2147f1fb801
63b214551fb80162b214561fb80161b214401fb80160b214551fb8015fb2
14561fb8015eb2147e1fb8015db214831fb8015cb214851fb8015bb2133d
1fb8015ab2131e1fb80159b2131e1fb80158b2130a1fb80157b2130a1fb8
0156b2130b1fb80155b2133a1fb80154b2133a1fb80153b2133a1fb80152
b2133b1fb80151b2133c1fb80150b2133c1fb8014fb212451fb8014eb212
461fb8014db212461fb8014cb212451fb8014bb212451fb8014ab212461f
b80149b212461fb80148b212461fb80147b212441fb80146b212451fb801
45b212461fb80144b212461fb80143b211471fb80142b211571fb80141b2
11581fb80140b211591fb8013fb2115a1fb8013eb2115a1fb8013db2115b
1fb8013cb2115b1fb8013bb2115b1fb8013ab2115b1fb80139b2112b1fb8
0138b2112c1fb80137b211391fb80136b211391fb80135b211461fb80134
b211471fb80133b211471fb80132b211551fb80131b211551fb80130b211
561fb8012fb211561fb8012eb211571fb8012db211571fb8012cb211581f
b8012bb211591fb8012ab211591fb80129b2115a1fb80128b2115a1fb801
27b2115b1fb80126b2115b1fb80125b2115b1fb80124b2115b1fb80123b2
11591fb80122b2115a1fb80121b211391fb80120b211471fb8011fb21156
1fb8011eb211561fb8011db211591fb8011cb211591fb8011bb2115b1fb8
011ab2115b1fb80119b2115b1fb80118b211561fb80117b211561fb80116
b211571fb80115b211571fb80114b211581fb80113b2115a1fb80112b211
5a1fb80111b2115b1fb80110b2115b1fb8010fb2115b1fb8010eb2115b1f
b8010db2115a1fb8010cb2115b1fb8010bb2105d1fb8010ab2105e1fb801
09b2105f1fb80108b2105f1fb80107b2105f1fb80106b2105f1fb80105b2
105d1fb80104b2105e1fb80103b2105f1fb80102b2105f1fb80101b2105f
1fb8010040ff105f1fff105d1ffe105f1ffd105f1ffc105f1ffb105f1ffa
105d1ff9105e1ff8105f1ff7105f1ff6105f1ff5105f1ff40f621ff30f62
1ff20f631ff10f641ff00f641fef0f641fee0f641fed0f621fec0f621feb
0f631fea0f641fe90f641fe80f641fe70f641fe60f621fe50f621fe40f64
1fe30f621fe20f621fe10f631fe00f641fdf0f641fde0f641fdd0f641fdc
0f641fdb0f641fda0e671fd90e681fd80e681fd70e681fd60e681fd50e67
1fd40e681fd30e681fd20e681fd10e671fd00e681fcf0e681fce0e681fcd
0e681fcc0e681fcb0e681fca0e681fc90e681fc80d6b1fc70d6c1fc60d2a
1fc50d6c1fc40d2c1fc30d6b1fc20d6c1fc10d6d1f40ffc00d6a1fbf0d69
1fbe0d681fbd0d6b1fbc0d311fbb0d311fba0d311fb90c711fb80c721fb7
0c731fb60c741fb50c741fb40c741fb30c731fb20c741fb10d311fb00d31
1faf0d311fae0d311fad0d311fac0d311fab0d311faa0d311fa90b7e1fa8
0b7a1fa70b791fa60b7a1fa50b7c1fa40b7d1fa30b7e1fa20b7e1fa10b7e
1fa00b7e1f9f0b7e1f9e0b7e1f9d0b7e1f9c0b7e1f9b0b7e1f9a0b2d1f99
0b2d1f980aa71f970aa51f960aa71f950aa71f940aa71f930aa71f920a68
1f910a821f900a9b1f8f0a9d1f8e0a9f1f8d0aa71f8c0aa71f8503251f84
03381f8301381f8255805581ab80557f557d557eab7d550b7d010b7d1b7d
4b7d7b7dab7ddb7d404d060a7c557a557bab7a557955775578ab775576ab
755504751475747503f47501ab750144750130750102007510752075030c
7455725573ab7255007250728072b072043bb072e072020072010ab8ffc0
b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a03251f
6938675568ab67556638645565ab645563386255613860555f385d555eab
5d555c385a555bab5a55593858555703251f5638545555ab545553385155
52ab51554f384e554e03251f4d384b554cab4b554a38485549ab48554738
46554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b40
1be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f19016f197f
198f19030f18cf18024018292c460f17cf17df17ef1704134017292e4600
16101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b3163135
46b8ffc0404d162326460f15010f151f1502451f15010011e011f0110315
bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03
400e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c50
54460f0b1f0b02553f0b4f0b02400b3f4346400b2d304600030120010100
01100120010308b8ffc0b401151f4603bc01000100000500010190b15453
2b2b4bb807ff524bb009505bb00188b02553b00188b040515ab00688b000
555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d001d
424bb01d5358b203a0a01d42594bb0805358b20340401d42594bb0ff5358
b20300001d42592b5e7375732b2b745e732b2b5e73742b73742b7374745e
7301755e73742b2b2b2b5e732b5e732b7374755e735e735e73755e732b5e
73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b5e73755e732b2b5e735f73737373742b2b2b2b2b5e73742b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00000000>
[4345 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 2678 10 <0001007cfffa03a303bc00310056ba027f028000582bb10102435558b900
210187b2121628bb021f0000002001fb400b40162d49220d1b490d4c282b
183f3f12393f012f1a4dedd4ed10dded31301b40092d49220d1b490d4c28
2b183f3f12393f313059011406070e03070e0323222e022703262635343e
0233321e02171315373e03373e0333321e0203a30604255d718750071219
20161f2615090185010108121f1a1a201106016c053b62544b27030b1523
1a181e110703a50a150b6ddfddd5630b0c070204080e0a03550b11070d0e
080303070d09fd1a0c0659a7b2c476090d0703030509>DBAAAA+Calibri-Italic AddT42Char 
1 1550 6 <0002003ffffa01ef052f00130029006aba027f028000582bb10102435558
b4291f141e00b80262400b0a1f1e1e141f290424190fb80147b605402449
194c282b183f3f1ade4ded11121739012fd6d4ed1133113331301bb71e14
1f290424190fb80147b605402449194c282b183f3f1ade4ded1112173931
3059010e0323222e02373e0333321e02010e0323222e0237133e0333321e
020701e905111c2a1e1d2612020506121b2a1e1d251302fef7020a142118
191f110502b3010a142119181f11050104cc1c26170a0a17261c1c251909
091925fb31080b080404080b080384070c080404080c0700>DBAAAA+Calibri-Italic AddT42Char 
1 592 3 <00020051ffed03e103ca0026003b008dba027f028000582bb10102435558
b3091d081eb801afb42627263b08b801aeb7000f260113032631b8021e40
171300093b271d26060321492af91a4a36f8400e4d034c282b183f3f1a4d
ed3fed3f121739012fedd45f5e5ddded33113310ed11393931301b401600
093b271d26060321492af91a4a36f8400e4d034c282b183f3f1a4ded3fed
3f12173931305925060623222e0237370e0323222e0235343e0433321617
37363633321e020707262623220e0415141e0233323e0237032c04242a14
1a100603210d445d723b50693e17152f4b6a8c59597f3213042628141b10
0401d32f6d44365743311f0f0b1f362b376f604a1219110e04070b09aa20
4c402a385c743d388e948c6f43483f5b100e03080c07ec454533546b726e
2c234539233d6c925800>DBAAAA+Calibri-Italic AddT42Char 

1 0 1 <> DBAAAA+Calibri-Italic AddT42Char 
1 336 2 <00010073fff00479051e00380069ba027d027e00582bb10102435558b31d
1d0010b80255b62d041a041a1509b8012ab2345315b8012cb3402856282b
183f1a4ded3fed1139392f2f012fedc4392f31301bb5041a041a1509b801
2ab2345315b8012cb3402856282b183f1a4ded3fed1139392f2f31305901
14060623222e0223220e0415141e0233323e0233321615140e0823222e02
35343e0433321e0204790e170d0e2640654c548a6f54371c284c6e464e71
5136110b0a0304050809154361794466a4733f284e759bc274497f5a2804
8a153e24252b253f6b8c999c46507d562c232b2310100513161a17131427
23193d77b1735fc9bea87f4921322700>DBAAAA+Calibri-Italic AddT42Char 
1 1928 8 <0001003ffffa05e703ca005b00a7ba027f028000582bb101024355584039
442d2d2e39171622214e225b005b0b000a0113030a38220b534a1128f940
494a382e21170a00162d0b225b4e44390e333e49334c1c4c054c282b183f
3f3f3f1217393f1a4dfdc43f012f2f2fc45f5e5d113332111239c4113332
c63332113331301b4021534a1128f940494a382e21170a00162d0b225b4e
44390e333e49334c1c4c054c282b183f3f3f3f1217393f1a4dfdc43f3130
59250e0323222e023713363635342623220e0207030e0323222e02371336
3635342623220e0207030e0323222e0237133e0333321e0207073e033332
1e02173e0333321e02151406070567010a152118181f1106026f0507313d
326b604a1150020a152118181f1006016f0705323c336a604a1150020a14
2118191f110502b50109131d14151b0f0401220f455c6d393c56371a0314
465c6c38435a3818080719080b080404080b08022c1d341a404c3d6b9356
fe6e080b080404080b08022c1e3a193d493d6b9356fe6e080b080404080b
080385070c080303080c07ac224c402a21394f2f234c3f2a264258342344
2400>DBAAAA+Calibri-Italic AddT42Char 
1 902 4 <0002003dffed03d00571002d0042009cba027f028000582bb10102435558
40120b111d1e1f20233738391c391c1239111200b8021e401c2e110a3938
22040733f9274a1c12110b040e17460e4c3cf840074d282b183f1a4ded3f
3f1217393fed121739012fd4ed2f11331133107d870ec4c4c4c4c4c4c412
013931301b401a0a393822040733f9274a1c12110b040e17460e4c3cf840
074d282b183f1a4ded3f3f1217393fed12173931305901140e0423222627
07060623222637013e0333321e0207030e03073e0333321e0407342e0223
220e020707161633323e0403d016314a6b8b575a8032120227282a1c0401
0a0209152119181e12040150050e0f0f0610455d6e383c563c251408ad0a
1d372e3670604b11212f6c4434544432211102843c91938b6b4144405811
0e100f0538080c080404080c08fe6e1a38373112234b3f2a20354448472c
1b463c293e6d9357a645423050677172>DBAAAA+Calibri-Italic AddT42Char 
1 1248 5 <0002004dffed039d03ca002e003c0087ba027f028000582bb10102435558
b62a323706040009b8020e400923110c1e031414232fb8020d4015002306
be37372a1e11110c32d12a4a0cdf401e4d282b183f1a4ded3fed11392f11
12392fed012fd4ed12392f173910ed11173931301b401306be37372a1e11
110c32d12a4a0cdf401e4d282b183f1a4ded3fed11392f1112392fed3130
5901140e022323060615141633323e0233321615140e02070e0323222e02
35343e0433321e0207342623220e020733323e02039d4088d4946a070563
6f40664b3009090904080d080c3d5464325986592c193656779c6254754b
22a9504a41644d371166698d552302e5456e4e2a213e1b646a1316130d0c
0a1c1d1a090c17130c28537c5441959286663e2a425137333f2d4c65381a
2d3c>DBAAAA+Calibri-Italic AddT42Char 
1 1784 7 <0001003ffffa01f1057100150047ba027f028000582bb101024355584010
15000b400a000a150b04051046054c282b183f3f121739012f1acd333231
301b400b000a150b04051046054c282b183f3f121739313059370e032322
2e0237013e0333321e0207e6020a142118191f110502010a020915211918
1f11040119080b080404080b080538080c080404080c0800>DBAAAA+Calibri-Italic AddT42Char 
1 2350 9 <00010071ffef02c504ad0045008aba027f028000582bb101024355584029
362c2b372b42080941094137092b2b30371737170030424837413c082ce3
092b2136480ff840214d282b183f1a4ded3f123939ed32cd39393f012fcd
39392f2f123911331133107d87c4c41087c4c431301b4013424837413c08
2ce3092b2136480ff840214d282b183f1a4ded3f123939ed32cd39393f31
305901140e04232303060615141633323e0233321615140e02070e032322
2e0235343e02371323222635343e023333373e0333321e02070733321602
c502060a0b0e09e66504062b301b281d1608080905080c0708202a2f1738
52381b02050503657d0b0c060c130d7e2b010b142118181f1105012be60f
0a039309151616110afe0a153411332f090a090b0f0d1f1e1807070e0b06
18334d360c1d20200e01fa0d130e252016d6070c090404090c07d616>DBAAAA+Calibri-Italic AddT42Char 
1 2910 11 <0001004afff7012a00e00017001fbc00000272000c00130155b2074c28ba
027f028000582b2b3fed012fed313025140e0423222e0235343e0433321e
02012a050a0f182c221c241408050b0f1729261d231407990e262822180c
08131b1110272621170d0a131a00>DBAAAA+Calibri-Italic AddT42Char 
1 3590 14 <00010020000003ca0521004300a6ba027d027e00582bb10102435558b900
45ffc040090f024d0045010f0340b80230b71212270027000d1ab80264b2
380d2ebb01300024001f012c40091a133f030833531240b80126b3400854
282b183f1a4dfdc13f121739fdd4ed012fd4ed1239392f2f3910ed31305f
5e5d2b1bb50045010f032ebb01300024001f012c40091a133f0308335312
40b80126b3400854282b183f1a4dfdc13f121739fdd4ed3130015f5e5d59
25140e042321222e0235343e0237013e0535342e0223220e022322263534
3e04373e0333321e0215140e04070721321603520306090d100afd350d12
0a05030c1815014d4e714d2e1a080f254434396854390b0a0c030307090b
070b415c703c607e491d0c233f658f63fa0228110e6906161718120c060b
0f0a0a20262712012444776757483b171837302022292314130813161614
13070b2422193652602b29565f6a7b8f54d61900>DBAAAA+Calibri-Italic AddT42Char 
1 3014 12 <0002004dffed04090521001f00390087ba027d027e00582bb10102435558
b9003bffc040090f024d003b010f0300ba02300020ffe8b40f024d202db8
0230b40f202d0a23b80103b21b5330b80103b3400a56282b183f1a4ded3f
ed123939012fedd42bed31305f5e5d2b1b4009003b010f03202d0a23b801
03b21b5330b80103b3400a56282b183f1a4ded3fed1239393130015f5e5d
5901140e0407060623222e0235343e04373e0333321e0207342623220607
0e05151416333236373e0504090b19283a4f333ba7705e8656280b19283b
4e331f495560365f865527af5f683b5f28283e3020150a60673c5f27273f
30211509039d2c7f939e9688323c483363915d2c7f939d9787331f322112
3463915e7f7a292728768991876f237f7a292727778991867000>DBAAAA+Calibri-Italic AddT42Char 
1 3310 13 <0001005f000003530517002e008dba027d027e00582bb10102435558b900
30ffc040180f024d0030010f032a142b1320141314001a0b2a25081514b8
014ab325522b13b80100b3400854282b183f1a4dfdc43ffdcd111239012f
c4cd393911331133113331305f5e5d2b1b400a0030010f032a25081514b8
014ab325522b13b80100b3400854282b183f1a4dfdc43ffdcd1112393130
015f5e5d5925140e042321222635343e04332113050606262635343e0237
253e0333321e02070333321603530305080c0f09fd5b0c0f0305090c100a
010ec3fee710140d05050b120e0151050d121911191f110301e2ea0e0b66
06151716130b141105131618120d03ce94080506100c0b21211e08bf0304
040104070b06fb8f1300>DBAAAA+Calibri-Italic AddT42Char 
1 3940 15 <0001001dffed03e1050e004300daba027d027e00582bb10102435558b900
45ffc0400d0f024d0045010f033b2c3c2b20b80239400f002b0f2c002c00
330f20003c03073fb80100400b2528281b2c2b2f2525073bb8012ab22f51
0cbb01310016001b0104b3400756282b183f1a4dfdd4ed3fed12392f1239
3912392f10ed111739012fc439392f2f123910ed1133113331305f5e5d2b
1b400b0045010f0320003c03073fb80100400b2528281b2c2b2f2525073b
b8012ab22f510cbb01310016001b0104b3400756282b183f1a4dfdd4ed3f
ed12392f12393912392f10ed1117393130015f5e5d5901140e0423222e02
27262635343e0433321e0233323e0235342e022322062322263713363633
21321615140e04232103363633321e0203911f3d5e7e9f612c544a3f180e
0d0205070a0d090a284361435d8d5d2e193f664d4863271b12076a06251d
023d0e0e0306090c110bfe1d48233b256e99602b01ed407e726147280b12
180c07151006151919160e191d1a3b617f472340301b0c1a25020f212012
1307161a19140dfe9504042f506d>DBAAAA+Calibri-Italic AddT42Char 
1 0 0 <00050000fe7303da050e00030007003b00550056004fb52d162d16083c41
0a01ed00490007016400020020018c000800010164401204022537060351
1b0d117051015144070254003fdddedd5ddeddcd3fdddecd012fddedd6ed
10fdd6ed1239392f2f3130011121110111211101140e020707060623222e
02373736363333323e0235342e0223220e0223222635343e02373e033332
1e0201140e0207060623222e0235343e0237363633321e020103dafc5b03
4ffd06027b1f456e4e24021f1b0e140c050120051f17083d4f2e130f2135
2828402f1f070a060205080608293a4422445e3a1afeb503070b070a2016
161a0e0504070c0809201913190e04fe46050efaf2050efb43046cfb9403
313467523605980a0802040606bc1b17253b4621192b20130f13100c0e05
131612060713120b263d4afd8b08171a17070a0a070c100a091818160809
0a060c10fd38>DBAAAA+Calibri-Italic AddT42Char 
DBAAAA+Calibri-Italic /CharStrings get begin
/g10 10 def
/g6 6 def
/g3 3 def
/g1 1 def
/g2 2 def
/g8 8 def
/g4 4 def
/g5 5 def
/g7 7 def
/g9 9 def
/g11 11 def
/g14 14 def
/g12 12 def
/g13 13 def
/g15 15 def
end
DBAAAA+Calibri-Italic /Encoding get
dup 33 /g10 put
dup 34 /g6 put
dup 35 /g3 put
dup 36 /g1 put
dup 37 /g2 put
dup 38 /g8 put
dup 39 /g4 put
dup 40 /g5 put
dup 41 /g7 put
dup 42 /g9 put
dup 43 /g11 put
dup 44 /g14 put
dup 45 /g12 put
dup 46 /g13 put
dup 47 /g15 put
pop
end
%ADOEndSubsetFont
/HFKGMD+Calibri-Italic /DBAAAA+Calibri-Italic findfont ct_VMDictPut/HFKGMD+Calibri-Italic*1 [33{/.notdef}rp /g10 /g6 /g3 /g1 /g2 /g8 /g4 /g5 /g7 /g9 /g11 /g14 /g12 /g13 /g15 208{/.notdef}rp]HFKGMD+Calibri-Italic nfHFKGMD+Calibri-Italic*1 [6 0 0 -6 0 0 ]msf146.431 62.0303 mo(!"#$%#&'\(\)\)$\(*$#\)+$,-./)[2.556 1.25401 2.96405 1.23599 3.01201 2.96405 4.62601 2.96404 2.74199 1.25403 1.25401 1.23599 2.74197 1.89005 1.23599 2.96404 1.25403 1.392 1.23599 2.92201 2.92203 2.92201 0 ]xshgsave
145.891 87.1619 mo
145.891 86.9121 li
172.481 86.9121 li
172.481 73.226 li
146.141 73.226 li
146.141 87.1619 li
145.891 87.1619 li
145.891 86.9121 li
145.891 87.1619 li
145.641 87.1619 li
145.641 72.976 li
145.714 72.7992 li
145.891 72.7261 li
172.731 72.7261 li
172.908 72.7992 li
172.981 72.976 li
172.981 87.1619 li
172.908 87.3389 li
172.731 87.412 li
145.891 87.412 li
145.714 87.3389 li
145.641 87.1619 li
145.891 87.1619 li
clp
145.641 72.7261 mo
172.981 72.7261 li
172.981 87.412 li
145.641 87.412 li
cp
.745098 .67451 .666667 .898039 cmyk
f
grestore
gsave
172.605 105.581 mo
218.462 105.581 li
218.462 56.618 li
172.605 56.618 li
172.605 105.581 li
clp
216.694 105.331 mo
215.88 105.331 215.222 105.095 214.856 104.939 cv
212.711 104.027 li
212.711 72.976 li
212.638 72.7992 li
212.461 72.7261 li
174.672 72.7261 li
214.886 57.548 li
215.347 57.372 216.169 56.8677 217.179 56.8677 cv
217.179 56.8677 217.179 56.8677 217.179 56.8677 cv
217.506 56.8679 217.851 56.9203 218.212 57.0546 cv
218.212 105.043 li
217.671 105.255 217.157 105.331 216.694 105.331 cv
212.211 103.814 mo
173.325 87.2789 li
173.19 86.9645 li
173.191 86.9678 li
172.981 86.4688 li
172.981 73.3644 li
173.347 73.226 li
212.211 73.226 li
212.211 103.814 li
0 0 0 0 cmyk
f
173.325 87.2789 mo
172.981 87.1326 li
172.981 86.4688 li
173.191 86.9678 li
173.19 86.9645 li
173.325 87.2789 li
.0313725 .0196078 .0509804 .00392157 cmyk
f
212.711 104.027 mo
212.211 103.814 li
212.211 73.226 li
173.347 73.226 li
174.672 72.7261 li
212.461 72.7261 li
212.638 72.7992 li
212.711 72.976 li
212.711 104.027 li
.0509804 .0470588 .0470588 .0627451 cmyk
f
172.981 87.1326 mo
172.856 87.0794 li
172.856 73.4116 li
172.981 73.3644 li
172.981 86.4688 li
172.981 87.1326 li
f
216.695 105.581 mo
216.694 105.581 216.694 105.581 216.694 105.581 cv
215.832 105.581 215.14 105.331 214.758 105.169 cv
212.711 104.299 li
212.711 104.027 li
214.856 104.939 li
215.222 105.095 215.88 105.331 216.694 105.331 cv
217.157 105.331 217.671 105.255 218.212 105.043 cv
218.212 57.0546 li
217.851 56.9203 217.506 56.8679 217.179 56.8677 cv
217.179 56.8677 217.179 56.8677 217.179 56.8677 cv
216.169 56.8677 215.347 57.372 214.886 57.548 cv
174.672 72.7261 li
173.964 72.7261 li
214.798 57.314 li
215.211 57.1612 216.074 56.6285 217.148 56.618 cv
217.213 56.618 li
217.582 56.6217 217.976 56.6886 218.384 56.8533 cv
218.462 56.8848 li
218.462 105.211 li
218.385 105.243 li
217.783 105.491 217.209 105.581 216.695 105.581 cv
218.212 105.127 mo
218.337 105.127 li
218.385 105.243 li
218.337 105.127 li
218.212 105.127 li
212.211 104.086 mo
173.468 87.6114 li
173.325 87.2789 li
212.211 103.814 li
212.211 104.086 li
.692503 .626897 .619608 .834648 cmyk
f
173.468 87.6114 mo
172.867 87.3558 li
172.908 87.3389 li
172.981 87.1619 li
172.981 87.1326 li
173.325 87.2789 li
173.468 87.6114 li
.721569 .647059 .670588 .839216 cmyk
f
172.981 73.3644 mo
172.981 73.226 li
173.347 73.226 li
172.981 73.3644 li
.692503 .626897 .619608 .834648 cmyk
f
212.711 104.299 mo
212.211 104.086 li
212.211 103.814 li
212.711 104.027 li
212.711 104.299 li
173.347 73.226 mo
172.981 73.226 li
172.981 73.0972 li
173.964 72.7261 li
174.672 72.7261 li
173.347 73.226 li
.745098 .67451 .666667 .898039 cmyk
f
172.867 87.3558 mo
172.606 87.2448 li
172.606 73.2387 li
172.981 73.0972 li
172.981 73.226 li
172.981 73.3644 li
172.856 73.4116 li
172.856 87.0794 li
172.981 87.1326 li
172.981 87.1619 li
172.908 87.3389 li
172.867 87.3558 li
f
grestore
gsave
216.971 56.742 mo
216.472 56.742 216.066 57.185 216.066 57.7311 cv
216.066 108.835 li
216.066 109.381 216.472 109.823 216.971 109.823 cv
275.687 109.823 li
276.187 109.823 276.592 109.381 276.592 108.835 cv
276.592 57.7311 li
276.592 57.185 276.187 56.742 275.687 56.742 cv
216.971 56.742 li
clp
284.658 116.252 mo
212.46 116.252 li
212.46 40.5026 li
285.563 40.5026 li
285.563 115.348 li
285.563 115.847 285.158 116.252 284.658 116.252 cv
0 0 0 0 cmyk
f
1.5 lw
1 ml
216.066 71.6528 mo
217.368 71.6528 li
218.67 71.6528 li
219.947 71.6528 li
221.249 71.6528 li
222.051 71.6528 li
222.362 71.6528 222.651 71.4788 222.817 71.1918 cv
223.562 69.8998 li
223.728 69.6128 224.017 69.4388 224.328 69.4388 cv
225.13 69.4388 li
226.432 69.4388 li
227.71 69.4388 li
228.503 69.4388 li
228.818 69.4388 229.111 69.2578 229.275 68.9638 cv
230.048 67.5758 li
230.213 67.2808 230.506 67.1008 230.822 67.1008 cv
231.615 67.1008 li
232.892 67.1008 li
234.194 67.1008 li
234.975 67.1008 li
235.297 67.1008 235.595 66.9138 235.757 66.6098 cv
236.512 65.1938 li
236.674 64.8888 236.972 64.7018 237.294 64.7018 cv
238.075 64.7018 li
239.377 64.7018 li
240.654 64.7018 li
241.956 64.7018 li
242.737 64.7018 li
243.06 64.7018 243.358 64.5148 243.52 64.2108 cv
244.274 62.7948 li
244.436 62.4898 244.734 62.3028 245.056 62.3028 cv
245.431 62.3028 li
245.69 62.3028 245.936 62.4238 246.108 62.6348 cv
247.139 63.9028 li
247.933 64.8958 li
248.215 65.2488 248.685 65.3378 249.059 65.1078 cv
249.083 65.0918 li
249.454 64.8648 249.92 64.9498 250.203 65.2978 cv
251.021 66.3008 li
251.816 67.3348 li
252.095 67.6988 252.573 67.7938 252.952 67.5608 cv
253.328 67.3288 253.802 67.4208 254.083 67.7788 cv
254.901 68.8228 li
256.203 70.4228 li
257.015 71.4768 li
257.287 71.8318 257.749 71.9318 258.125 71.7188 cv
258.145 71.7068 li
258.519 71.4948 258.976 71.5918 259.25 71.9418 cv
260.085 73.0068 li
261.362 74.6668 li
262.664 76.3888 li
263.511 77.4708 li
263.779 77.8118 264.224 77.9138 264.594 77.7168 cv
264.615 77.7068 li
264.985 77.5098 265.43 77.6108 265.697 77.9528 cv
266.545 79.0338 li
267.847 80.7568 li
269.124 82.4178 li
270.426 84.1398 li
271.308 85.2638 li
271.559 85.5848 271.969 85.6958 272.329 85.5398 cv
272.393 85.5118 li
272.758 85.3538 273.175 85.4708 273.425 85.8018 cv
274.173 86.7918 li
274.261 86.9088 274.324 87.0458 274.356 87.1938 cv
275.609 92.9978 li
276.875 98.9708 li
276.904 99.0788 li
278.171 102.972 li
278.2 103.078 li
279.49 109.114 li
280.768 115.203 li
282.069 121.293 li
283.371 125.661 li
288.713 125.467 li
289.991 130.019 li
291.293 136.293 li
292.595 141.091 li
293.872 147.426 li
295.174 153.824 li
296.476 158.929 li
297.754 165.388 li
299.055 171.847 li
300.357 177.321 li
301.634 183.842 li
302.936 190.424 li
304.238 196.944 li
305.516 197.805 li
306.817 198.728 li
308.119 199.589 li
309.397 201.127 li
310.698 201.988 li
312 202.849 li
313.302 203.71 li
314.58 204.571 li
315.882 205.432 li
317.184 206.847 li
318.461 207.708 li
319.763 208.57 li
321.065 209.923 li
322.342 210.784 li
323.644 211.645 li
324.945 212.937 li
326.223 213.736 li
327.524 215.028 li
328.826 215.828 li
330.105 217.058 li
331.406 218.227 li
332.708 219.027 li
333.985 220.195 li
335.287 221.302 li
336.589 222.102 li
337.866 223.148 li
339.168 224.255 li
340.47 225.239 li
341.772 225.977 li
343.05 226.962 li
344.352 227.945 li
345.653 228.93 li
346.931 229.853 li
348.233 230.714 li
349.534 231.636 li
350.812 232.498 li
352.113 233.298 li
353.415 234.158 li
354.692 234.958 li
355.994 235.696 li
357.296 236.496 li
358.574 237.357 li
359.876 238.095 li
361.178 238.649 li
362.455 239.325 li
363.757 239.941 li
365.059 240.494 li
366.36 241.11 li
367.638 241.601 li
368.94 242.155 li
370.241 242.647 li
371.52 243.201 li
372.821 243.693 li
374.123 244.123 li
375.4 244.615 li
376.702 245.108 li
378.004 245.538 li
379.281 245.538 li
.023 .887 .902 0 cmyk
@
222.551 86.2314 mo
223.828 86.2314 li
224.668 86.2314 li
224.958 86.2314 225.231 86.0794 225.401 85.8214 cv
226.161 84.6724 li
226.331 84.4154 226.604 84.2624 226.895 84.2624 cv
227.71 84.2624 li
229.011 84.2624 li
230.313 84.2624 li
231.615 84.2624 li
232.892 84.2624 li
234.194 84.2624 li
235.496 84.2624 li
236.774 84.2624 li
238.075 84.2624 li
239.377 84.2624 li
240.655 84.2624 li
241.956 84.2624 li
243.258 84.2624 li
244.536 84.2624 li
245.838 84.2624 li
247.139 84.2624 li
248.417 84.2624 li
249.719 84.2624 li
250.553 84.2624 li
250.846 84.2624 251.121 84.4184 251.291 84.6794 cv
252.028 85.8144 li
252.197 86.0754 252.472 86.2314 252.766 86.2314 cv
253.6 86.2314 li
254.902 86.2314 li
256.203 86.2314 li
257.481 86.2314 li
258.783 86.2314 li
259.625 86.2314 li
259.914 86.2314 260.185 86.3814 260.356 86.6354 cv
261.091 87.7334 li
261.261 87.9874 261.533 88.1384 261.822 88.1384 cv
262.664 88.1384 li
263.966 88.1384 li
265.243 88.1384 li
266.1 88.1384 li
266.381 88.1384 266.645 88.2804 266.817 88.5234 cv
267.575 89.5984 li
267.746 89.8414 268.011 89.9834 268.292 89.9834 cv
269.124 89.9834 li
270.426 89.9834 li
271.728 89.9834 li
272.56 89.9834 li
272.841 89.9834 273.106 90.1264 273.277 90.3684 cv
274.036 91.4434 li
274.207 91.6864 274.472 91.8284 274.753 91.8284 cv
275.609 91.8284 li
276.206 91.8284 li
276.609 91.8284 276.964 92.1194 277.075 92.5424 cv
278.179 96.7164 li
278.195 96.7834 li
279.484 103.361 li
279.498 103.424 li
280.768 108.314 li
282.062 113.206 li
282.075 113.264 li
283.365 119.54 li
283.38 119.601 li
284.673 124.43 li
289.991 122.883 li
291.293 127.742 li
292.595 133.832 li
293.872 138.63 li
295.174 143.428 li
296.476 149.272 li
297.754 154.008 li
299.055 158.744 li
300.357 163.481 li
301.634 169.078 li
302.936 173.753 li
304.238 178.428 li
305.516 183.779 li
306.818 188.455 li
308.119 193.068 li
309.397 197.743 li
310.698 202.848 li
312 207.4 li
313.302 212.382 li
314.58 216.935 li
315.882 221.425 li
317.184 225.977 li
318.461 230.713 li
319.763 227.392 li
321.065 224.008 li
322.342 220.933 li
323.644 217.673 li
324.946 214.351 li
326.223 211.398 li
327.525 208.138 li
328.826 204.878 li
330.105 202.11 li
331.406 198.85 li
332.708 195.651 li
333.986 192.945 li
335.287 189.746 li
336.589 186.548 li
337.866 183.349 li
339.168 180.827 li
340.47 184.641 li
341.772 188.393 li
343.05 192.76 li
344.352 196.513 li
345.654 200.757 li
346.931 204.448 li
348.233 208.2 li
349.534 212.26 li
350.812 215.95 li
352.113 219.887 li
353.415 223.578 li
354.693 227.207 li
355.994 231.021 li
357.296 234.65 li
358.574 235.327 li
359.876 235.88 li
361.178 236.557 li
362.455 237.172 li
363.757 237.787 li
365.059 238.34 li
366.361 239.017 li
367.638 239.571 li
368.94 240.186 li
370.241 240.74 li
371.52 241.355 li
372.822 241.908 li
374.123 242.462 li
375.401 243.077 li
376.702 243.631 li
378.004 244.123 li
379.281 246.153 li
.438 .273 .734 .039 cmyk
@
grestore
gsave
202.742 227.092 mo
219.664 227.092 li
219.664 182.792 li
202.742 182.792 li
202.742 227.092 li
clp
218.054 226.842 mo
217.356 226.842 216.784 226.649 216.446 226.51 cv
212.711 216.19 li
212.711 183.949 li
216.405 183.662 li
216.422 183.656 li
216.841 183.496 217.582 183.042 218.49 183.042 cv
218.491 183.042 218.491 183.042 218.491 183.042 cv
218.783 183.042 219.092 183.089 219.414 183.208 cv
219.414 226.585 li
218.929 226.774 218.469 226.842 218.054 226.842 cv
212.211 214.809 mo
202.992 189.339 li
202.992 184.703 li
212.211 183.988 li
212.211 214.809 li
0 0 0 0 cmyk
f
212.711 216.19 mo
212.211 214.809 li
212.211 183.988 li
212.711 183.949 li
212.711 216.19 li
.0509804 .0470588 .0470588 .0627451 cmyk
f
218.055 227.092 mo
218.054 227.092 li
217.272 227.092 216.644 226.866 216.298 226.719 cv
216.248 226.698 li
212.711 216.925 li
212.711 216.19 li
216.446 226.51 li
216.784 226.649 217.356 226.842 218.054 226.842 cv
218.469 226.842 218.929 226.774 219.414 226.585 cv
219.414 183.208 li
219.092 183.089 218.783 183.042 218.491 183.042 cv
218.491 183.042 218.491 183.042 218.49 183.042 cv
217.582 183.042 216.841 183.496 216.422 183.656 cv
216.405 183.662 li
212.711 183.949 li
212.711 183.698 li
216.351 183.416 li
216.733 183.269 217.518 182.792 218.491 182.792 cv
218.836 182.792 219.205 182.852 219.586 183.006 cv
219.664 183.038 li
219.664 226.754 li
219.587 226.785 li
219.042 227.011 218.521 227.092 218.055 227.092 cv
219.414 226.67 mo
219.539 226.67 li
219.587 226.785 li
219.539 226.67 li
219.414 226.67 li
212.211 215.544 mo
202.742 189.383 li
202.742 184.471 li
212.211 183.737 li
212.211 183.988 li
202.992 184.703 li
202.992 189.339 li
212.211 214.809 li
212.211 215.544 li
.692503 .626897 .619608 .834648 cmyk
f
212.711 216.925 mo
212.211 215.544 li
212.211 214.809 li
212.711 216.19 li
212.711 216.925 li
212.211 183.988 mo
212.211 183.737 li
212.711 183.698 li
212.711 183.949 li
212.211 183.988 li
.745098 .67451 .666667 .898039 cmyk
f
grestore
.25 lw
0 lj
196.36 189.672 mo
202.867 189.672 li
202.867 184.77 li
196.36 184.77 li
cp
@
gsave
217.674 182.857 mo
217.222 182.857 216.856 183.256 216.856 183.749 cv
216.856 229.963 li
216.856 230.456 217.222 230.856 217.674 230.856 cv
270.77 230.856 li
271.222 230.856 271.589 230.456 271.589 229.963 cv
271.589 183.749 li
271.589 183.256 271.222 182.857 270.77 182.857 cv
217.674 182.857 li
clp
278.796 236.669 mo
213.596 236.669 li
213.596 168.17 li
279.701 168.17 li
279.701 235.764 li
279.701 236.264 279.296 236.669 278.796 236.669 cv
0 0 0 0 cmyk
f
1.5 lw
1 lj
1 ml
216.856 219.848 mo
221.773 219.848 li
226.782 214.602 li
231.792 214.602 li
236.708 214.602 li
241.718 209.064 li
246.727 209.064 li
251.644 209.064 li
256.653 203.526 li
261.663 197.988 li
266.579 197.988 li
271.588 192.159 li
0 .32 .699 0 cmyk
@
grestore
9 lw
1 lj
510.22 564.425 mo
449.916 564.425 li
0 .617 1 0 cmyk
@
510.22 575.146 mo
449.916 575.146 li
0 .32 .699 0 cmyk
@
510.22 585.866 mo
449.916 585.866 li
.023 .887 .902 0 cmyk
@
510.22 596.588 mo
449.916 596.588 li
0 .73 .508 0 cmyk
@
510.22 607.309 mo
449.916 607.309 li
.438 .273 .734 .039 cmyk
@
510.22 618.029 mo
449.916 618.029 li
.652 .027 .941 0 cmyk
@
510.22 628.75 mo
449.916 628.75 li
.469 .035 .531 0 cmyk
@
510.22 639.471 mo
449.916 639.471 li
.793 .41 .07 0 cmyk
@
0 0 0 0 cmyk
%ADOBeginSubsetFont: WAAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HFKGMB+Calibri gcheck setglobal} if
1 322 2 <000300ac00000401050e001e002b003800c8401a1f1810014d1f100f014d
1f100d014d1f180c014d1f200b014d1fb8022e40281a154010014d15400f
014d15150b2c1810014d2c100f014d2c100d014d2c180c014d2c200b014d
2cba02320000ffc0b50b014d002633b8ffe8b310014d33b8fff0b30f014d
33b8fff0b30d014d33b8fff6b30c014d33b8ffe8b30b014d33b80210400d
a00bc00b020b1a27f431310724b80109b2105134b8010bb10754003fed3f
ed12392fed39012f5de12b2b2b2b2b32d42be12b2b2b2b2b12392f2b2b39
e12b2b2b2b2b313001140e0423212226351134363321321e0215140e0207
1e0301342e0223231133323e0213342e0223231133323e0204011f384f63
7149feae17292917012674946332162b412a355c4528fefd1a385a4ab2c4
435236194e25476b51cefa3b58432601733d67523e2a151f270482271f2c
547a4d2e544738120a35526e02012f4c351cfe5d233b4ffddd3a583c1ffe
381c3752>HFKGMB+Calibri AddT42Char 
1 7254 25 <00010035fffa058403bc004500deb90047ffc0403d0f014d38080c014d29
380137080c014d252e01262101262001261f01261e01261d01271c012804
012903013a3b013b3a013b2d013c2c01102015014d10b8ffe0b310014d10
b8ffe0400a0d014d10200c014d100fb8ffe0b310014d0fb8ffe0400c0d01
4d0f200c014d0f414910b8ffe040200f014d3f104f106f107f1004104012
164810334925493a902c012c200f014d2cb8ffc04010131648672c772c02
452c012c174c094c003f3fd55d5d2b2b5dc43f3fcd2b5d2b3f012f2b2b2b
2f2b2b2b2b3130005d5d5d5d015d5d5d5d5d5d5d5d5d2b5d2b2b01140607
010e0323222e0227032707030e0323222e022701262635343e0233321e02
17131737133e0333321e0217131737133e0333321e0205840405fef7030d
17281e1f2a190c03bd0202af030d1a291e1f27190c03fef9050408132017
1c22120803d90202c70209121f19181f120802d70201d6020913211a181d
1107039f07140ffca90b0e080304080e0a028d0909fd730b0e080304080e
0a03570f1407090b070203070d09fd1a090902e6090d070303070c08fd18
090902e6090d070302080a00>HFKGMB+Calibri AddT42Char 
1 2430 9 <00020099ffed03d50571002a003d0085b53f3f010a2136b8fff6b30c014d
36b8fff0b30d014d36b8ffe8b30b014d36b8fff0b40f10014c36b801f840
1b152b120c014d2b200d014d2b180b014d2b1810014d2b100f014d2bb802
0a400900150a363521040530b80105b6264a1b46104c39b80105b1054d00
3fed3f3f3fed121739012fd4e12b2b2b2b2b10e12b2b2b2b323931305d01
140e0223222e022715140e0223222e023511343e0233321e0215113e0333
321e0207342e0223220e020711161633323e0203d53363905d2b49464627
08121b15141c12060713201819201208284b484828628b5728ae15345640
203e404527447c433e58371901e775bb844611263a296e080c070404070c
080538080c080404080c08fde5293823104e83b0754582643d122a4232fe
9953573c637b>HFKGMB+Calibri AddT42Char 
1 6966 24 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>HFKGMB+Calibri AddT42Char 
1 4620 16 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>HFKGMB+Calibri AddT42Char 
1 7888 27 <0001002a037501730578001b0009b20b1747003fcd313001140e0207070e
0323222e02371335343e0233321e020173060e171189050d13191311170a
0104850b18241a1924170b05261f332f2d18ce070c070303070c0901137f
1a20120606122000>HFKGMB+Calibri AddT42Char 
1 6322 22 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>HFKGMB+Calibri AddT42Char 
1 936 4 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>HFKGMB+Calibri AddT42Char 
1 1092 5 <00010047ffed03630521004900e7b90041ffe8b40f10014c41b8fff0b30d
014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d41b8022c
402b32401314014c324011014d243224320c1b180f10014c1b100d014d1b
1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d00b8ffc0
b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb0127003700
0a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c3711371116
3cb8010cb5411b05295316b80129b10556003fed3f123939ed1139392f2f
2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b2be12b2b
2b2b2b313001140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0603634377a15d41
6f573b170b04080c080e3350714a385d43243252696e6852333b6991542b
574d3c1306040203060b070b2f445d3a3650341a32536a6e6a5333016b5b
8e633216202218251f161d12072228231e375033374e3b31333e54714f51
7f562d0f191f130b111813121c13091c231d1d304225364e3c32333d5371
>HFKGMB+Calibri AddT42Char 
1 1790 7 <0001003dfffa06e00514003c0067b3263c0132b8fff840430b0c014c2532
012f080b0c014c282f0125100b0c014c25250122180b0c014c2922011820
0b0c014c2d31012d30012d24012d230137522a5223300b03121d52125505
55003f3f3f1217393f3f31305d5d5d5d012b5d2b5d2b5d2b5d2b5d250e03
23222e02270123030e0323222e0227012626363633321e02170133013e03
33321e02170133013e03333216160607058304101c291e1f2b1c0e04fef1
02fa030e1a2920212c1c0f03feaa06011126201f24130702012301011403
0914251e1c21140903012902011d030613231d1e23100105260e11090404
09110e03d1fc2f0e1109040409110e04ab171a0e0403080e0bfbc4043a0b
0f080404080f0bfbc6043b0a0f0804050e1a1700>HFKGMB+Calibri AddT42Char 
1 4114 14 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>HFKGMB+Calibri AddT42Char 
1 4378 15 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>HFKGMB+Calibri AddT42Char 
1 3640 13 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>HFKGMB+Calibri AddT42Char 
1 7986 28 <0001004501b4022e023d000f000eb400070bed04002fed012fcd31300114
06232122263534363321321e02022e1211fe5e1212121201a2080d090501
f9271e1f26261e06111a>HFKGMB+Calibri AddT42Char 
HFKGMB+Calibri /CharStrings get begin
/g2 2 def
/g25 25 def
/g9 9 def
/g24 24 def
/g16 16 def
/g27 27 def
/g22 22 def
/g4 4 def
/g5 5 def
/g7 7 def
/g14 14 def
/g15 15 def
/g13 13 def
/g28 28 def
end
HFKGMB+Calibri /Encoding get
dup 56 /g2 put
dup 57 /g25 put
dup 58 /g9 put
dup 59 /g24 put
dup 60 /g16 put
dup 61 /g27 put
dup 62 /g22 put
dup 63 /g4 put
dup 64 /g5 put
dup 65 /g7 put
dup 66 /g14 put
dup 67 /g15 put
dup 68 /g13 put
dup 69 /g28 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HFKGMB+Calibri*1 [33{/.notdef}rp /g32 /g39 /g33 /g31 /g36 /g38 /g35 /g37 /g26 /g12 /g8 /g21 /g34 /g20 /g17 /g6 /g18 /g10 /g19 /g23 /g11 /g3 /g1 /g2 /g25 /g9 /g24 /g16 /g27 /g22 /g4 /g5 /g7 /g14 /g15 /g13 /g28 186{/.notdef}rp]HFKGMB+Calibri nfHFKGMB+Calibri*1 [5.5838 0 0 -5.5838 0 0 ]msf451.075 566.43 mo(8,3917:33:\))[3.03763 1.94873 2.94263 3.9924 2.93146 1.26193 2.93146 2.94263 2.94263 2.93146 0 ]xsh451.075 577.151 mo(8,39171355\))[3.03763 1.94873 2.94263 3.9924 2.93146 1.26193 2.93146 2.94263 2.93146 2.93146 0 ]xsh451.075 587.871 mo(8;<9*,=>7.*4,*<)[2.98737 2.8812 1.22849 3.94214 2.72488 1.8985 1.34012 2.13303 1.21167 2.88123 2.73047 1.82037 1.89847 2.7305 0 ]xsh451.075 598.592 mo(?+\)>+1=>7+<:+4,3>>)[2.34518 2.67465 2.52948 2.18332 2.67465 2.93146 1.39316 2.18332 1.2619 2.67468 1.27872 2.93146 2.67465 1.87061 1.94595 2.94263 2.18329 0 ]xsh451.075 609.313 mo(@334\)74*,1)[2.56296 2.94263 2.94263 1.87061 2.52948 1.26193 1.87061 2.78073 1.94876 0 ]xsh451.075 620.034 mo(ABC4*74*,1)[4.96957 2.93146 1.27872 1.87061 2.78076 1.2619 1.87061 2.77795 1.94876 0 ]xsh451.075 630.755 mo(A*5D*E4+C<*57>B*+,9+4*,)[4.96957 2.78073 2.93146 2.62994 2.77795 1.70865 1.87061 2.67465 1.27872 1.27872 2.78073 2.93146 1.26193 2.18329 2.93146 2.77795 2.67468 1.94592 3.9924 2.67465 1.87064 2.78073 0 ]xsh451.075 641.476 mo(ABC4*E4+C<*574,3.C2:C,5)[4.96957 2.93146 1.27872 1.87061 2.78076 1.70862 1.87061 2.67468 1.27872 1.27869 2.78076 2.93146 1.26193 1.87061 1.94873 2.94263 2.93146 1.27872 2.36197 2.93146 1.27872 1.94873 0 ]xsh277.16 291.399 mo
216.856 291.399 li
0 .617 1 0 cmyk
@
277.16 302.12 mo
216.856 302.12 li
0 .32 .699 0 cmyk
@
277.16 312.84 mo
216.856 312.84 li
.023 .887 .902 0 cmyk
@
277.16 323.561 mo
216.856 323.561 li
0 .73 .508 0 cmyk
@
246.171 334.282 mo
216.856 334.282 li
.438 .273 .734 .039 cmyk
@
277.16 334.283 mo
247.845 334.283 li
.652 .027 .941 0 cmyk
@
277.16 345 mo
216.856 345 li
.469 .035 .531 0 cmyk
@
277.16 355.721 mo
216.856 355.721 li
.793 .41 .07 0 cmyk
@
0 0 0 0 cmyk
HFKGMB+Calibri*1 [5.5838 0 0 -5.5838 0 0 ]msf218.016 293.403 mo(8,3917:33:\))[3.03763 1.94873 2.94263 3.9924 2.93146 1.26193 2.93146 2.94263 2.94261 2.93146 0 ]xsh218.016 304.124 mo(8,39171355\))[3.03763 1.94873 2.94263 3.9924 2.93146 1.26193 2.93146 2.94263 2.93146 2.93146 0 ]xsh218.016 314.845 mo(8;<9*,=>7.*4,*<)[2.98737 2.88121 1.22845 3.94214 2.7249 1.8985 1.3401 2.13306 1.21167 2.88121 2.73048 1.82036 1.89848 2.73048 0 ]xsh218.016 325.566 mo(?+\)>+1=>7+<:+4,3>>)[2.34518 2.67467 2.52948 2.18329 2.67467 2.93146 1.39316 2.1833 1.26193 2.67467 1.2787 2.93147 2.67465 1.87061 1.94595 2.94263 2.18329 0 ]xsh219.132 336.287 mo(@334\)74*,1ABC4*74*,1)[2.56296 2.94263 2.94263 1.87061 2.52948 1.26193 1.87061 2.77794 1.94875 10.2825 4.96957 2.93146 1.27872 1.87061 2.78073 1.26193 1.87064 2.77792 1.94876 0 ]xsh218.016 347.002 mo(A*5D*E4+C<*57>B*+,9+4*,)[4.96957 2.78075 2.93146 2.62993 2.77795 1.70863 1.87062 2.67465 1.27872 1.27872 2.78073 2.93146 1.26193 2.1833 2.93146 2.77794 2.67465 1.94595 3.9924 2.67468 1.87061 2.78073 0 ]xsh218.016 357.723 mo(ABC4*E4+C<*574,3.C2:C,5)[4.96957 2.93146 1.27872 1.87061 2.78075 1.70863 1.87062 2.67467 1.2787 1.27872 2.78073 2.93147 1.26192 1.87062 1.94873 2.94263 2.93146 1.27872 2.36197 2.93146 1.27872 1.94873 0 ]xsh.25 lw
1 lc
216.066 105.456 mo
276.592 105.456 li
276.592 56.743 li
216.066 56.743 li
cp
.746 .676 .668 .898 cmyk
@
216.856 226.623 mo
271.281 226.623 li
271.281 182.856 li
216.856 182.856 li
cp
@
%ADOBeginSubsetFont: SAAAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HFKGMA+Calibri-Bold gcheck setglobal} if
1 2238 7 <0002007effe904000570002a003d0096b10102435558b20a2136bb026000
15002b0284400900150a363521040530b8ffe8b40b0f014c30b8014b400d
264a1b46104c39180b0f014c39b8014ab240054d00183f1a4ded2b3f3f3f
ed2b121739012fd4ed10ed323931301bb60a363521040530b8ffe8b40b0f
014c30b8014b400d264a1b46104c39180b0f014c39b8014ab240054d0018
3f1a4ded2b3f3f3fed2b12173931305901140e0223222e022715140e0223
222e023511343e0233321e0215113e0333321e0205342e0223220e020711
161633323e02040034628f5b2d4e4745240b192a1e1f29190a0c1d302525
301d0c2244444828638a5728fefb112a4333193033361e35613531442d14
01ec77be864811263a29610b0f0a04040a0f0b05230a100b06060b100afe
1322301f0e4f86b375396a52310e223628fed84447325066>HFKGMA+Calibri-Bold AddT42Char 
HFKGMA+Calibri-Bold /CharStrings get begin
/g7 7 def
end
HFKGMA+Calibri-Bold /Encoding get
dup 50 /g7 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/HFKGMA+Calibri-Bold*1 [33{/.notdef}rp /g5 /g11 /g12 /g8 /g4 /g10 /g15 /g17 /g18 /g3 /g6 /g9 /g2 /g13 /g14 /g1 /g16 /g7 205{/.notdef}rp]HFKGMA+Calibri-Bold nfHFKGMA+Calibri-Bold*1 [13 0 0 -13 0 0 ]msf48.938 44.8887 mo(+)sh48.938 270.491 mo(2)shgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
/HFKGMB+Calibri*1 uf/HFKGMB+Calibri uf/WAAAAA+Calibri uf/HFKGMC+Helvetica*1 uf/HFKGMC+Helvetica uf/ZAAAAA+Helvetica uf/HFKGMD+Calibri-Italic*1 uf/HFKGMD+Calibri-Italic uf/DBAAAA+Calibri-Italic uf/HFKGMA+Calibri-Bold*1 uf/HFKGMA+Calibri-Bold uf/SAAAAA+Calibri-Bold ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
